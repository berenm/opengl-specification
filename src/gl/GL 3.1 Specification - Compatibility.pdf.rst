                         R
         The OpenGL Graphics System:
                  A Specification
(Version 3.1 with GL ARB compatibility - May 28,
                      2009)

                       Mark Segal
                       Kurt Akeley

            Editor (version 1.1): Chris Frazier
            Editor (versions 1.2-3.1): Jon Leech
              Editor (version 2.0): Pat Brown
     Copyright c 2006-2009 The Khronos Group Inc. All Rights Reserved.

This specification is protected by copyright laws and contains material proprietary
to the Khronos Group, Inc. It or any components may not be reproduced, repub-
lished, distributed, transmitted, displayed, broadcast or otherwise exploited in any
manner without the express prior written permission of Khronos Group. You may
use this specification for implementing the functionality therein, without altering or
removing any trademark, copyright or other notice from the specification, but the
receipt or possession of this specification does not convey any rights to reproduce,
disclose, or distribute its contents, or to manufacture, use, or sell anything that it
may describe, in whole or in part.
Khronos Group grants express permission to any current Promoter, Contributor
or Adopter member of Khronos to copy and redistribute UNMODIFIED versions
of this specification in any fashion, provided that NO CHARGE is made for the
specification and the latest available update of the specification for any version
of the API is used whenever possible. Such distributed specification may be re-
formatted AS LONG AS the contents of the specification are not changed in any
way. The specification may be incorporated into a product that is sold as long as
such product includes significant independent work developed by the seller. A link
to the current version of this specification on the Khronos Group web-site should
be included whenever possible with specification distributions.
Khronos Group makes no, and expressly disclaims any, representations or war-
ranties, express or implied, regarding this specification, including, without limita-
tion, any implied warranties of merchantability or fitness for a particular purpose
or non-infringement of any intellectual property. Khronos Group makes no, and
expressly disclaims any, warranties, express or implied, regarding the correctness,
accuracy, completeness, timeliness, and reliability of the specification. Under no
circumstances will the Khronos Group, or any of its Promoters, Contributors or
Members or their respective partners, officers, directors, employees, agents or rep-
resentatives be liable for any damages, whether direct, indirect, special or conse-
quential damages for lost revenues, lost profits, or otherwise, arising from or in
connection with these materials.
Khronos is a trademark of The Khronos Group Inc. OpenGL is a registered trade-
mark, and OpenGL ES is a trademark, of Silicon Graphics, Inc.
Contents

1   Introduction                                                                                            1
    1.1 Formatting of Optional Features . . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .    1
    1.2 What is the OpenGL Graphics System?        .   .   .   .   .   .   .   .   .   .   .   .   .   .    1
    1.3 Programmer’s View of OpenGL . . . .        .   .   .   .   .   .   .   .   .   .   .   .   .   .    2
    1.4 Implementor’s View of OpenGL . . . .       .   .   .   .   .   .   .   .   .   .   .   .   .   .    2
    1.5 Our View . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   .   .   .   .   .   .   .    3
    1.6 The Deprecation Model . . . . . . . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .    3
    1.7 Companion Documents . . . . . . . . .      .   .   .   .   .   .   .   .   .   .   .   .   .   .    3
         1.7.1 OpenGL Shading Language . .         .   .   .   .   .   .   .   .   .   .   .   .   .   .    3
         1.7.2 Window System Bindings . . .        .   .   .   .   .   .   .   .   .   .   .   .   .   .    3

2   OpenGL Operation                                                                                        5
    2.1 OpenGL Fundamentals . . . . . . . . . . . . . .                .   .   .   .   .   .   .   .   .    5
        2.1.1 Floating-Point Computation . . . . . . .                 .   .   .   .   .   .   .   .   .    7
        2.1.2 16-Bit Floating-Point Numbers . . . . .                  .   .   .   .   .   .   .   .   .    8
        2.1.3 Unsigned 11-Bit Floating-Point Numbers                   .   .   .   .   .   .   .   .   .    9
        2.1.4 Unsigned 10-Bit Floating-Point Numbers                   .   .   .   .   .   .   .   .   .    9
        2.1.5 Fixed-Point Data Conversions . . . . . .                 .   .   .   .   .   .   .   .   .   10
    2.2 GL State . . . . . . . . . . . . . . . . . . . . . .           .   .   .   .   .   .   .   .   .   12
        2.2.1 Shared Object State . . . . . . . . . . . .              .   .   .   .   .   .   .   .   .   13
    2.3 GL Command Syntax . . . . . . . . . . . . . . .                .   .   .   .   .   .   .   .   .   13
    2.4 Basic GL Operation . . . . . . . . . . . . . . . .             .   .   .   .   .   .   .   .   .   15
    2.5 GL Errors . . . . . . . . . . . . . . . . . . . . .            .   .   .   .   .   .   .   .   .   17
    2.6 Begin/End Paradigm . . . . . . . . . . . . . . .               .   .   .   .   .   .   .   .   .   18
        2.6.1 Begin and End . . . . . . . . . . . . . .                .   .   .   .   .   .   .   .   .   22
        2.6.2 Polygon Edges . . . . . . . . . . . . . .                .   .   .   .   .   .   .   .   .   25
        2.6.3 GL Commands within Begin/End . . . .                     .   .   .   .   .   .   .   .   .   26
    2.7 Vertex Specification . . . . . . . . . . . . . . . .           .   .   .   .   .   .   .   .   .   26
    2.8 Vertex Arrays . . . . . . . . . . . . . . . . . . .            .   .   .   .   .   .   .   .   .   30


                                         i
CONTENTS                                                                                         ii


         2.8.1 Drawing Commands . . . . . . . . . . . . .           .   .   .   .   .   .   .    36
  2.9    Buffer Objects . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .    42
         2.9.1 Mapping and Unmapping Buffer Data . . . .            .   .   .   .   .   .   .    46
         2.9.2 Effects of Accessing Outside Buffer Bounds           .   .   .   .   .   .   .    50
         2.9.3 Copying Between Buffers . . . . . . . . . .          .   .   .   .   .   .   .    50
         2.9.4 Vertex Arrays in Buffer Objects . . . . . . .        .   .   .   .   .   .   .    51
         2.9.5 Array Indices in Buffer Objects . . . . . . .        .   .   .   .   .   .   .    52
         2.9.6 Buffer Object State . . . . . . . . . . . . . .      .   .   .   .   .   .   .    52
  2.10   Vertex Array Objects . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .    53
  2.11   Rectangles . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .    54
  2.12   Fixed-Function Vertex Transformations . . . . . . .        .   .   .   .   .   .   .    54
         2.12.1 Matrices . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .    56
         2.12.2 Normal Transformation . . . . . . . . . . . .       .   .   .   .   .   .   .    60
         2.12.3 Generating Texture Coordinates . . . . . . .        .   .   .   .   .   .   .    62
  2.13   Fixed-Function Vertex Lighting and Coloring . . . .        .   .   .   .   .   .   .    64
         2.13.1 Lighting . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .    66
         2.13.2 Lighting Parameter Specification . . . . . . .      .   .   .   .   .   .   .    70
         2.13.3 ColorMaterial . . . . . . . . . . . . . . . .       .   .   .   .   .   .   .    71
         2.13.4 Lighting State . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .    74
         2.13.5 Color Index Lighting . . . . . . . . . . . . .      .   .   .   .   .   .   .    74
         2.13.6 Clamping or Masking . . . . . . . . . . . .         .   .   .   .   .   .   .    75
         2.13.7 Flatshading . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .    76
  2.14   Vertex Shaders . . . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .    76
         2.14.1 Shader Objects . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .    77
         2.14.2 Program Objects . . . . . . . . . . . . . . .       .   .   .   .   .   .   .    79
         2.14.3 Vertex Attributes . . . . . . . . . . . . . . .     .   .   .   .   .   .   .    81
         2.14.4 Uniform Variables . . . . . . . . . . . . . .       .   .   .   .   .   .   .    84
         2.14.5 Samplers . . . . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .    99
         2.14.6 Varying Variables . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   100
         2.14.7 Shader Execution . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   102
         2.14.8 Required State . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   109
  2.15   Coordinate Transformations . . . . . . . . . . . . .       .   .   .   .   .   .   .   111
         2.15.1 Controlling the Viewport . . . . . . . . . . .      .   .   .   .   .   .   .   111
  2.16   Asynchronous Queries . . . . . . . . . . . . . . . .       .   .   .   .   .   .   .   112
  2.17   Conditional Rendering . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   114
  2.18   Transform Feedback . . . . . . . . . . . . . . . . .       .   .   .   .   .   .   .   115
  2.19   Primitive Queries . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   118
  2.20   Primitive Clipping . . . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   119
         2.20.1 Color and Associated Data Clipping . . . . .        .   .   .   .   .   .   .   121
  2.21   Final Color Processing . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   122

           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
CONTENTS                                                                                  iii


    2.22 Current Raster Position . . . . . . . . . . . . . . . . . . . . . . . 123

3   Rasterization                                                                        126
    3.1 Discarding Primitives Before Rasterization . . . . . . . .       .   .   .   .   128
    3.2 Invariance . . . . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   128
    3.3 Antialiasing . . . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   128
         3.3.1 Multisampling . . . . . . . . . . . . . . . . . . .       .   .   .   .   130
    3.4 Points . . . . . . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   131
         3.4.1 Basic Point Rasterization . . . . . . . . . . . . . .     .   .   .   .   133
         3.4.2 Point Rasterization State . . . . . . . . . . . . . .     .   .   .   .   137
         3.4.3 Point Multisample Rasterization . . . . . . . . . .       .   .   .   .   137
    3.5 Line Segments . . . . . . . . . . . . . . . . . . . . . . .      .   .   .   .   138
         3.5.1 Basic Line Segment Rasterization . . . . . . . . .        .   .   .   .   138
         3.5.2 Other Line Segment Features . . . . . . . . . . . .       .   .   .   .   141
         3.5.3 Line Rasterization State . . . . . . . . . . . . . .      .   .   .   .   144
         3.5.4 Line Multisample Rasterization . . . . . . . . . .        .   .   .   .   144
    3.6 Polygons . . . . . . . . . . . . . . . . . . . . . . . . . .     .   .   .   .   145
         3.6.1 Basic Polygon Rasterization . . . . . . . . . . . .       .   .   .   .   145
         3.6.2 Stippling . . . . . . . . . . . . . . . . . . . . . .     .   .   .   .   147
         3.6.3 Antialiasing . . . . . . . . . . . . . . . . . . . . .    .   .   .   .   148
         3.6.4 Options Controlling Polygon Rasterization . . . .         .   .   .   .   148
         3.6.5 Depth Offset . . . . . . . . . . . . . . . . . . . .      .   .   .   .   149
         3.6.6 Polygon Multisample Rasterization . . . . . . . .         .   .   .   .   150
         3.6.7 Polygon Rasterization State . . . . . . . . . . . .       .   .   .   .   151
    3.7 Pixel Rectangles . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   151
         3.7.1 Pixel Storage Modes and Pixel Buffer Objects . . .        .   .   .   .   152
         3.7.2 The Imaging Subset . . . . . . . . . . . . . . . .        .   .   .   .   153
         3.7.3 Pixel Transfer Modes . . . . . . . . . . . . . . . .      .   .   .   .   154
         3.7.4 Transfer of Pixel Rectangles . . . . . . . . . . . .      .   .   .   .   165
         3.7.5 Rasterization of Pixel Rectangles . . . . . . . . .       .   .   .   .   178
         3.7.6 Pixel Transfer Operations . . . . . . . . . . . . .       .   .   .   .   180
         3.7.7 Pixel Rectangle Multisample Rasterization . . . .         .   .   .   .   189
    3.8 Bitmaps . . . . . . . . . . . . . . . . . . . . . . . . . . .    .   .   .   .   190
    3.9 Texturing . . . . . . . . . . . . . . . . . . . . . . . . . .    .   .   .   .   192
         3.9.1 Texture Image Specification . . . . . . . . . . . .       .   .   .   .   194
         3.9.2 Alternate Texture Image Specification Commands            .   .   .   .   209
         3.9.3 Compressed Texture Images . . . . . . . . . . . .         .   .   .   .   214
         3.9.4 Buffer Textures . . . . . . . . . . . . . . . . . . .     .   .   .   .   218
         3.9.5 Texture Parameters . . . . . . . . . . . . . . . . .      .   .   .   .   220
         3.9.6 Depth Component Textures . . . . . . . . . . . .          .   .   .   .   223

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
CONTENTS                                                                                          iv


           3.9.7 Cube Map Texture Selection . . . . . . . . .        .   .   .   .   .   .   .   223
           3.9.8 Texture Minification . . . . . . . . . . . . .      .   .   .   .   .   .   .   224
           3.9.9 Texture Magnification . . . . . . . . . . . .       .   .   .   .   .   .   .   233
           3.9.10 Combined Depth/Stencil Textures . . . . . .        .   .   .   .   .   .   .   234
           3.9.11 Texture Completeness . . . . . . . . . . . .       .   .   .   .   .   .   .   234
           3.9.12 Texture State and Proxy State . . . . . . . .      .   .   .   .   .   .   .   236
           3.9.13 Texture Objects . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   237
           3.9.14 Texture Environments and Texture Functions         .   .   .   .   .   .   .   240
           3.9.15 Texture Comparison Modes . . . . . . . . .         .   .   .   .   .   .   .   243
           3.9.16 sRGB Texture Color Conversion . . . . . . .        .   .   .   .   .   .   .   246
           3.9.17 Shared Exponent Texture Color Conversion .         .   .   .   .   .   .   .   248
           3.9.18 Texture Application . . . . . . . . . . . . . .    .   .   .   .   .   .   .   248
    3.10   Color Sum . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   249
    3.11   Fog . . . . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   251
    3.12   Fragment Shaders . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   252
           3.12.1 Shader Variables . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   253
           3.12.2 Shader Execution . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   254
    3.13   Antialiasing Application . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   258
    3.14   Multisample Point Fade . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   259

4   Per-Fragment Operations and the Framebuffer                                                  260
    4.1 Per-Fragment Operations . . . . . . . . . . . . . . .        .   .   .   .   .   .   .   262
         4.1.1 Pixel Ownership Test . . . . . . . . . . . . .        .   .   .   .   .   .   .   262
         4.1.2 Scissor Test . . . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   263
         4.1.3 Multisample Fragment Operations . . . . . .           .   .   .   .   .   .   .   263
         4.1.4 Alpha Test . . . . . . . . . . . . . . . . . .        .   .   .   .   .   .   .   264
         4.1.5 Stencil Test . . . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   265
         4.1.6 Depth Buffer Test . . . . . . . . . . . . . . .       .   .   .   .   .   .   .   267
         4.1.7 Occlusion Queries . . . . . . . . . . . . . .         .   .   .   .   .   .   .   267
         4.1.8 Blending . . . . . . . . . . . . . . . . . . .        .   .   .   .   .   .   .   268
         4.1.9 sRGB Conversion . . . . . . . . . . . . . .           .   .   .   .   .   .   .   273
         4.1.10 Dithering . . . . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   273
         4.1.11 Logical Operation . . . . . . . . . . . . . .        .   .   .   .   .   .   .   274
         4.1.12 Additional Multisample Fragment Operations           .   .   .   .   .   .   .   275
    4.2 Whole Framebuffer Operations . . . . . . . . . . . .         .   .   .   .   .   .   .   276
         4.2.1 Selecting a Buffer for Writing . . . . . . . .        .   .   .   .   .   .   .   276
         4.2.2 Fine Control of Buffer Updates . . . . . . .          .   .   .   .   .   .   .   281
         4.2.3 Clearing the Buffers . . . . . . . . . . . . .        .   .   .   .   .   .   .   282
         4.2.4 The Accumulation Buffer . . . . . . . . . .           .   .   .   .   .   .   .   285
    4.3 Drawing, Reading, and Copying Pixels . . . . . . . .         .   .   .   .   .   .   .   287

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
CONTENTS                                                                                                         v


          4.3.1 Writing to the Stencil or Depth/Stencil Buffers . . . . . .                                     287
          4.3.2 Reading Pixels . . . . . . . . . . . . . . . . . . . . . . .                                    287
          4.3.3 Copying Pixels . . . . . . . . . . . . . . . . . . . . . . .                                    295
          4.3.4 Pixel Draw/Read State . . . . . . . . . . . . . . . . . . .                                     300
    4.4   Framebuffer Objects . . . . . . . . . . . . . . . . . . . . . . . .                                   300
          4.4.1 Binding and Managing Framebuffer Objects . . . . . . . .                                        301
          4.4.2 Attaching Images to Framebuffer Objects . . . . . . . . .                                       303
          4.4.3 Feedback Loops Between Textures and the Framebuffer .                                           310
          4.4.4 Framebuffer Completeness . . . . . . . . . . . . . . . . .                                      313
          4.4.5 Effects of Framebuffer State on Framebuffer Dependent
                Values . . . . . . . . . . . . . . . . . . . . . . . . . . . .                                  317
          4.4.6 Mapping between Pixel and Element in Attached Image .                                           318

5   Special Functions                                                                                           320
    5.1 Evaluators . . . . . . . . . . . . . . . . . . . .              .   .   .   .   .   .   .   .   .   .   320
    5.2 Selection . . . . . . . . . . . . . . . . . . . .               .   .   .   .   .   .   .   .   .   .   326
    5.3 Feedback . . . . . . . . . . . . . . . . . . . .                .   .   .   .   .   .   .   .   .   .   328
    5.4 Display Lists . . . . . . . . . . . . . . . . . .               .   .   .   .   .   .   .   .   .   .   330
         5.4.1 Commands Not Usable In Display Lists                     .   .   .   .   .   .   .   .   .   .   334
    5.5 Flush and Finish . . . . . . . . . . . . . . . . .              .   .   .   .   .   .   .   .   .   .   335
    5.6 Hints . . . . . . . . . . . . . . . . . . . . . . .             .   .   .   .   .   .   .   .   .   .   336

6   State and State Requests                                                                                    338
    6.1 Querying GL State . . . . . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   338
          6.1.1 Simple Queries . . . . . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   338
          6.1.2 Data Conversions . . . . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   339
          6.1.3 Enumerated Queries . . . .      .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   340
          6.1.4 Texture Queries . . . . . . .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   343
          6.1.5 Stipple Query . . . . . . . .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   346
          6.1.6 Color Matrix Query . . . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   346
          6.1.7 Color Table Query . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   347
          6.1.8 Convolution Query . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   347
          6.1.9 Histogram Query . . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   348
          6.1.10 Minmax Query . . . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   349
          6.1.11 Pointer and String Queries .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   350
          6.1.12 Asynchronous Queries . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   351
          6.1.13 Buffer Object Queries . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   353
          6.1.14 Vertex Array Object Queries    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   355
          6.1.15 Shader and Program Queries     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   355
          6.1.16 Framebuffer Object Queries     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   359


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
CONTENTS                                                                                                                       vi


         6.1.17 Renderbuffer Object Queries . . . . . . . . . . . . . . . . 362
         6.1.18 Saving and Restoring State . . . . . . . . . . . . . . . . . 362
   6.2   State Tables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 365

A Invariance                                                                                                                  420
  A.1 Repeatability . . . . .     .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   420
  A.2 Multi-pass Algorithms       .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   421
  A.3 Invariance Rules . . . .    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   421
  A.4 What All This Means .       .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   423

B Corollaries                                                                                                                 424

C Compressed Texture Image Formats                                                                                            427
  C.1 RGTC Compressed Texture Image Formats . . . . .                                             .   .   .   .   .   .   .   427
      C.1.1 Format COMPRESSED_RED_RGTC1 . . . . .                                                 .   .   .   .   .   .   .   428
      C.1.2 Format COMPRESSED_SIGNED_RED_RGTC1                                                    .   .   .   .   .   .   .   429
      C.1.3 Format COMPRESSED_RG_RGTC2 . . . . . .                                                .   .   .   .   .   .   .   430
      C.1.4 Format COMPRESSED_SIGNED_RG_RGTC2 .                                                   .   .   .   .   .   .   .   430

D Shared Objects and Multiple Contexts                                                                                        431
  D.1 Object Deletion Behavior . . . . .                  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   431
  D.2 Propagating State Changes . . . .                   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   432
       D.2.1 Definitions . . . . . . . .                  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   433
       D.2.2 Rules . . . . . . . . . . .                  .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   433

E The Deprecation Model                                                435
  E.1 Profiles and Deprecated Features of OpenGL 3.0 . . . . . . . . . 435

F Version 3.0 and Before                                                                                                      441
  F.1 New Features . . . . . . . . . .                .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   441
  F.2 Deprecation Model . . . . . . .                 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   442
  F.3 Changed Tokens . . . . . . . . .                .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   443
  F.4 Change Log . . . . . . . . . . .                .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   443
  F.5 Credits and Acknowledgements                    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   445

G Version 3.1                                                                                                                 448
  G.1 New Features . . . . . . . . . .                .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   448
  G.2 Deprecation Model . . . . . . .                 .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   449
  G.3 Change Log . . . . . . . . . . .                .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   449
  G.4 Credits and Acknowledgements                    .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   .   450



           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
CONTENTS                                                                                     vii


H Extension Registry, Header Files, and ARB Extensions                                       453
  H.1 Extension Registry . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   453
  H.2 Header Files . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   453
  H.3 ARB Extensions . . . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   454
       H.3.1 Naming Conventions . . . . . . . . . . . . .        .   .   .   .   .   .   .   455
       H.3.2 Promoting Extensions to Core Features . . .         .   .   .   .   .   .   .   455
       H.3.3 Multitexture . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   455
       H.3.4 Transpose Matrix . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   456
       H.3.5 Multisample . . . . . . . . . . . . . . . . .       .   .   .   .   .   .   .   456
       H.3.6 Texture Add Environment Mode . . . . . . .          .   .   .   .   .   .   .   456
       H.3.7 Cube Map Textures . . . . . . . . . . . . . .       .   .   .   .   .   .   .   456
       H.3.8 Compressed Textures . . . . . . . . . . . . .       .   .   .   .   .   .   .   456
       H.3.9 Texture Border Clamp . . . . . . . . . . . .        .   .   .   .   .   .   .   456
       H.3.10 Point Parameters . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   456
       H.3.11 Vertex Blend . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   456
       H.3.12 Matrix Palette . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   457
       H.3.13 Texture Combine Environment Mode . . . .           .   .   .   .   .   .   .   457
       H.3.14 Texture Crossbar Environment Mode . . . .          .   .   .   .   .   .   .   457
       H.3.15 Texture Dot3 Environment Mode . . . . . .          .   .   .   .   .   .   .   457
       H.3.16 Texture Mirrored Repeat . . . . . . . . . . .      .   .   .   .   .   .   .   457
       H.3.17 Depth Texture . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   457
       H.3.18 Shadow . . . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   457
       H.3.19 Shadow Ambient . . . . . . . . . . . . . . .       .   .   .   .   .   .   .   458
       H.3.20 Window Raster Position . . . . . . . . . . .       .   .   .   .   .   .   .   458
       H.3.21 Low-Level Vertex Programming . . . . . . .         .   .   .   .   .   .   .   458
       H.3.22 Low-Level Fragment Programming . . . . .           .   .   .   .   .   .   .   458
       H.3.23 Buffer Objects . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   458
       H.3.24 Occlusion Queries . . . . . . . . . . . . . .      .   .   .   .   .   .   .   458
       H.3.25 Shader Objects . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   459
       H.3.26 High-Level Vertex Programming . . . . . . .        .   .   .   .   .   .   .   459
       H.3.27 High-Level Fragment Programming . . . . .          .   .   .   .   .   .   .   459
       H.3.28 OpenGL Shading Language . . . . . . . . .          .   .   .   .   .   .   .   459
       H.3.29 Non-Power-Of-Two Textures . . . . . . . . .        .   .   .   .   .   .   .   459
       H.3.30 Point Sprites . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   459
       H.3.31 Fragment Program Shadow . . . . . . . . . .        .   .   .   .   .   .   .   459
       H.3.32 Multiple Render Targets . . . . . . . . . . .      .   .   .   .   .   .   .   460
       H.3.33 Rectangular Textures . . . . . . . . . . . . .     .   .   .   .   .   .   .   460
       H.3.34 Floating-Point Color Buffers . . . . . . . . .     .   .   .   .   .   .   .   460
       H.3.35 Half-Precision Floating Point . . . . . . . .      .   .   .   .   .   .   .   460
       H.3.36 Floating-Point Textures . . . . . . . . . . . .    .   .   .   .   .   .   .   461

           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
CONTENTS                                                                             viii


     H.3.37   Pixel Buffer Objects . . . . . . . . . . . . . . . .   .   .   .   .   461
     H.3.38   Floating-Point Depth Buffers . . . . . . . . . . . .   .   .   .   .   461
     H.3.39   Instanced Rendering . . . . . . . . . . . . . . . .    .   .   .   .   461
     H.3.40   Framebuffer Objects . . . . . . . . . . . . . . . .    .   .   .   .   461
     H.3.41   sRGB Framebuffers . . . . . . . . . . . . . . . .      .   .   .   .   462
     H.3.42   Geometry Shaders . . . . . . . . . . . . . . . . .     .   .   .   .   462
     H.3.43   Half-Precision Vertex Data . . . . . . . . . . . . .   .   .   .   .   462
     H.3.44   Instanced Rendering . . . . . . . . . . . . . . . .    .   .   .   .   462
     H.3.45   Flexible Buffer Mapping . . . . . . . . . . . . . .    .   .   .   .   462
     H.3.46   Texture Buffer Objects . . . . . . . . . . . . . . .   .   .   .   .   463
     H.3.47   RGTC Texture Compression Formats . . . . . . .         .   .   .   .   463
     H.3.48   One- and Two-Component Texture Formats . . . .         .   .   .   .   463
     H.3.49   Vertex Array Objects . . . . . . . . . . . . . . . .   .   .   .   .   463
     H.3.50   Versioned Context Creation . . . . . . . . . . . .     .   .   .   .   463
     H.3.51   Uniform Buffer Objects . . . . . . . . . . . . . .     .   .   .   .   463
     H.3.52   Restoration of features removed from OpenGL 3.0        .   .   .   .   464
     H.3.53   Fast Buffer-to-Buffer Copies . . . . . . . . . . . .   .   .   .   .   464
     H.3.54   Shader Texture Level of Detail Control . . . . . .     .   .   .   .   464




       OpenGL 3.1 with GL ARB compatibility - May 28, 2009
List of Figures

 2.1  Block diagram of the GL. . . . . . . . . . . . . . . . . . . . . . . 15
 2.2  Creation of a processed vertex from a transformed vertex and cur-
      rent values. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 19
 2.3 Primitive assembly and processing. . . . . . . . . . . . . . . . . . 21
 2.4 Triangle strips, fans, and independent triangles. . . . . . . . . . . 23
 2.5 Quadrilateral strips and independent quadrilaterals. . . . . . . . . 24
 2.6 Vertex transformation sequence. . . . . . . . . . . . . . . . . . . 55
 2.7 Processing of RGBA colors. . . . . . . . . . . . . . . . . . . . . 64
 2.8 Processing of color indices. . . . . . . . . . . . . . . . . . . . . . 64
 2.9 ColorMaterial operation. . . . . . . . . . . . . . . . . . . . . . . 71
 2.10 Current raster position. . . . . . . . . . . . . . . . . . . . . . . . 123

 3.1    Rasterization. . . . . . . . . . . . . . . . . . . . . . . . .   .   .   .   .   126
 3.2    Rasterization of non-antialiased wide points. . . . . . . . .    .   .   .   .   133
 3.3    Rasterization of antialiased wide points. . . . . . . . . . .    .   .   .   .   133
 3.4    Visualization of Bresenham’s algorithm. . . . . . . . . . .      .   .   .   .   139
 3.5    Rasterization of non-antialiased wide lines. . . . . . . . .     .   .   .   .   142
 3.6    The region used in rasterizing an antialiased line segment.      .   .   .   .   143
 3.7    Transfer of pixel rectangles. . . . . . . . . . . . . . . . .    .   .   .   .   165
 3.8    Selecting a subimage from an image . . . . . . . . . . . .       .   .   .   .   170
 3.9    A bitmap and its associated parameters. . . . . . . . . . .      .   .   .   .   191
 3.10   A texture image and the coordinates used to access it. . . .     .   .   .   .   208
 3.11   Multitexture pipeline. . . . . . . . . . . . . . . . . . . . .   .   .   .   .   249

 4.1    Per-fragment operations. . . . . . . . . . . . . . . . . . . . . . . 262
 4.2    Operation of ReadPixels. . . . . . . . . . . . . . . . . . . . . . . 287
 4.3    Operation of CopyPixels. . . . . . . . . . . . . . . . . . . . . . . 295

 5.1    Map Evaluation. . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
 5.2    Feedback syntax. . . . . . . . . . . . . . . . . . . . . . . . . . . 331


                                        ix
List of Tables

 2.1    GL command suffixes . . . . . . . . . . . . . . . . . . .         .   .   .   .   . 14
 2.2    GL data types . . . . . . . . . . . . . . . . . . . . . . .       .   .   .   .   . 16
 2.3    Summary of GL errors . . . . . . . . . . . . . . . . . .          .   .   .   .   . 19
 2.4    Vertex array sizes (values per vertex) and data types . . .       .   .   .   .   . 32
 2.5    Variables that direct the execution of InterleavedArrays.         .   .   .   .   . 40
 2.6    Buffer object binding targets. . . . . . . . . . . . . . . .      .   .   .   .   . 43
 2.7    Buffer object parameters and their values. . . . . . . . .        .   .   .   .   . 43
 2.8    Buffer object initial state. . . . . . . . . . . . . . . . . .    .   .   .   .   . 45
 2.9    Buffer object state set by MapBufferRange. . . . . . .            .   .   .   .   . 48
 2.10   Summary of lighting parameters. . . . . . . . . . . . . .         .   .   .   .   . 67
 2.11   Correspondence of lighting parameter symbols to names.            .   .   .   .   . 72
 2.12   Polygon flatshading color selection. . . . . . . . . . . .        .   .   .   .   . 76
 2.13   OpenGL Shading Language type tokens . . . . . . . . .             .   .   .   .   . 91
 2.14   Transform feedback modes . . . . . . . . . . . . . . . .          .   .   .   .   . 116

 3.1    PixelStore parameters. . . . . . . . . . .      . .   . . . . . . . . . . .         152
 3.2    PixelTransfer parameters. . . . . . . . .       . .   . . . . . . . . . . .         154
 3.3    PixelMap parameters. . . . . . . . . . .        . .   . . . . . . . . . . .         155
 3.4    Color table names. . . . . . . . . . . . .      . .   . . . . . . . . . . .         156
 3.5    Pixel data types. . . . . . . . . . . . . . .   . .   . . . . . . . . . . .         167
 3.6    Pixel data formats. . . . . . . . . . . . .     . .   . . . . . . . . . . .         168
 3.7    Swap Bytes bit ordering. . . . . . . . . .      . .   . . . . . . . . . . .         169
 3.8    Packed pixel formats. . . . . . . . . . . .     . .   . . . . . . . . . . .         171
 3.9    UNSIGNED_BYTE formats. Bit numbers              are   indicated for each
        component. . . . . . . . . . . . . . . . .      . .   . . . . . . . . . . .         172
 3.10   UNSIGNED_SHORT formats . . . . . . . .          . .   . . . . . . . . . . .         173
 3.11   UNSIGNED_INT formats . . . . . . . . .          . .   . . . . . . . . . . .         174
 3.12   FLOAT_UNSIGNED_INT formats . . . . .            . .   . . . . . . . . . . .         175
 3.13   Packed pixel field assignments. . . . . . .     . .   . . . . . . . . . . .         176


                                         x
LIST OF TABLES                                                                   xi


  3.14 Color table lookup. . . . . . . . . . . . . . . . . . . . . . . . . .    183
  3.15 Computation of filtered color components. . . . . . . . . . . . . .      184
  3.16 Conversion from RGBA, depth, and stencil pixel components to
       internal texture, table, or filter components. . . . . . . . . . . . .   196
  3.17 Sized internal color formats. . . . . . . . . . . . . . . . . . . . .    201
  3.18 Sized internal luminance and intensity formats. . . . . . . . . . .      202
  3.19 Sized internal depth and stencil formats. . . . . . . . . . . . . . .    203
  3.20 Generic and specific compressed internal formats. . . . . . . . . .      203
  3.21 Internal formats for buffer textures . . . . . . . . . . . . . . . . .   221
  3.22 Texture parameters and their values. . . . . . . . . . . . . . . . .     222
  3.23 Selection of cube map images. . . . . . . . . . . . . . . . . . . .      224
  3.24 Texel location wrap mode application. . . . . . . . . . . . . . . .      228
  3.25 Correspondence of filtered texture components to texture source
       components. . . . . . . . . . . . . . . . . . . . . . . . . . . . . .    242
  3.26 Texture functions REPLACE, MODULATE, and DECAL . . . . . . . .           242
  3.27 Texture functions BLEND and ADD. . . . . . . . . . . . . . . . . .       243
  3.28 COMBINE texture functions. . . . . . . . . . . . . . . . . . . . . .     244
  3.29 Arguments for COMBINE_RGB functions. . . . . . . . . . . . . . .         245
  3.30 Arguments for COMBINE_ALPHA functions. . . . . . . . . . . . .           245
  3.31 Depth texture comparison functions. . . . . . . . . . . . . . . . .      247

  4.1  RGB and Alpha blend equations. . . . . . . . . . . . . . . . . . .       271
  4.2  Blending functions. . . . . . . . . . . . . . . . . . . . . . . . . .    272
  4.3  Arguments to LogicOp and their corresponding operations. . . . .         275
  4.4  Buffer selection for the default framebuffer . . . . . . . . . . . .     278
  4.5  Buffer selection for a framebuffer object . . . . . . . . . . . . . .    278
  4.6  DrawBuffers buffer selection for the default framebuffer . . . . .       279
  4.7  PixelStore parameters. . . . . . . . . . . . . . . . . . . . . . . .     289
  4.8  ReadPixels index masks. . . . . . . . . . . . . . . . . . . . . . .      293
  4.9  ReadPixels GL data types and reversed component conversion for-
       mulas. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   294
  4.10 Effective ReadPixels format for DEPTH_STENCIL CopyPixels
       operation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .   297
  4.11 Correspondence of renderbuffer sized to base internal formats. . .       306
  4.12 Framebuffer attachment points. . . . . . . . . . . . . . . . . . . .     308

  5.1   Values specified by the target to Map1. . . . . . . . . . . . . . . 321
  5.2   Correspondence of feedback type to number of values per vertex. . 330
  5.3   Hint targets and descriptions . . . . . . . . . . . . . . . . . . . . 337



          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
LIST OF TABLES                                                                                     xii


  6.1    Texture, table, and filter return values. . . . . . . .   .   .   .   .   .   .   .   .   345
  6.2    Attribute groups . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   364
  6.3    State Variable Types . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   366
  6.4    GL Internal begin-end state variables (inaccessible)      .   .   .   .   .   .   .   .   367
  6.5    Current Values and Associated Data . . . . . . . .        .   .   .   .   .   .   .   .   368
  6.6    Vertex Array Object State . . . . . . . . . . . . . .     .   .   .   .   .   .   .   .   369
  6.7    Vertex Array Object State (cont.) . . . . . . . . . .     .   .   .   .   .   .   .   .   370
  6.8    Vertex Array Object State (cont.) . . . . . . . . . .     .   .   .   .   .   .   .   .   371
  6.9    Vertex Array Object State (cont.) . . . . . . . . . .     .   .   .   .   .   .   .   .   372
  6.10   Vertex Array Data (not in Vertex Array objects) . .       .   .   .   .   .   .   .   .   373
  6.11   Buffer Object State . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   .   374
  6.12   Transformation state . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   .   375
  6.13   Coloring . . . . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   376
  6.14   Lighting (see also table 2.10 for defaults) . . . . .     .   .   .   .   .   .   .   .   377
  6.15   Lighting (cont.) . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   378
  6.16   Rasterization . . . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   .   379
  6.17   Rasterization (cont.) . . . . . . . . . . . . . . . . .   .   .   .   .   .   .   .   .   380
  6.18   Multisampling . . . . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   .   381
  6.19   Textures (state per texture unit and binding point) .     .   .   .   .   .   .   .   .   382
  6.20   Textures (state per texture object) . . . . . . . . . .   .   .   .   .   .   .   .   .   383
  6.21   Textures (state per texture image) . . . . . . . . . .    .   .   .   .   .   .   .   .   384
  6.22   Texture Environment and Generation . . . . . . . .        .   .   .   .   .   .   .   .   385
  6.23   Texture Environment and Generation (cont.) . . . .        .   .   .   .   .   .   .   .   386
  6.24   Pixel Operations . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   387
  6.25   Pixel Operations (cont.) . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   388
  6.26   Framebuffer Control . . . . . . . . . . . . . . . .       .   .   .   .   .   .   .   .   389
  6.27   Framebuffer (state per target binding point) . . . .      .   .   .   .   .   .   .   .   390
  6.28   Framebuffer (state per framebuffer object) . . . . .      .   .   .   .   .   .   .   .   391
  6.29   Framebuffer (state per attachment point) . . . . . .      .   .   .   .   .   .   .   .   392
  6.30   Renderbuffer (state per target and binding point) . .     .   .   .   .   .   .   .   .   393
  6.31   Renderbuffer (state per renderbuffer object) . . . .      .   .   .   .   .   .   .   .   394
  6.32   Pixels . . . . . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   395
  6.33   Pixels (cont.) . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   396
  6.34   Pixels (cont.) . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   397
  6.35   Pixels (cont.) . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   398
  6.36   Pixels (cont.) . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   399
  6.37   Pixels (cont.) . . . . . . . . . . . . . . . . . . . .    .   .   .   .   .   .   .   .   400
  6.38   Evaluators (GetMap takes a map name) . . . . . .          .   .   .   .   .   .   .   .   401
  6.39   Shader Object State . . . . . . . . . . . . . . . . .     .   .   .   .   .   .   .   .   402
  6.40   Program Object State . . . . . . . . . . . . . . . .      .   .   .   .   .   .   .   .   403

           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
LIST OF TABLES                                                                  xiii


  6.41 Program Object State (cont.) . . . . . . . . . . . . . . . . . . . . 404
  6.42 Program Object State (cont.) . . . . . . . . . . . . . . . . . . . . 405
  6.43 Program Object State (cont.) . . . . . . . . . . . . . . . . . . . . 406
  6.44 Vertex Shader State . . . . . . . . . . . . . . . . . . . . . . . . . 407
  6.45 Query Object State . . . . . . . . . . . . . . . . . . . . . . . . . 408
  6.46 Transform Feedback State . . . . . . . . . . . . . . . . . . . . . 409
  6.47 Hints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 410
  6.48 Implementation Dependent Values . . . . . . . . . . . . . . . . . 411
  6.49 Implementation Dependent Values (cont.) . . . . . . . . . . . . . 412
  6.50 Implementation Dependent Values (cont.) . . . . . . . . . . . . . 413
  6.51 Implementation Dependent Values (cont.) . . . . . . . . . . . . . 414
  6.52 Implementation Dependent Values (cont.) . . . . . . . . . . . . . 415
  6.53 Implementation Dependent Values (cont.) . . . . . . . . . . . . . 416
  6.54 Implementation              Dependent              Values             (cont.)
          (1) The minimum value for each stage is MAX_stage_-
       UNIFORM_BLOCKS × MAX_stage_UNIFORM_BLOCK_SIZE +
       MAX_stage_UNIFORM_COMPONENTS . . . . . . . . . . . . . . . 417
  6.55 Framebuffer Dependent Values . . . . . . . . . . . . . . . . . . . 418
  6.56 Miscellaneous . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419

  F.1    New token names . . . . . . . . . . . . . . . . . . . . . . . . . . 443




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Chapter 1

Introduction

This document describes the OpenGL graphics system: what it is, how it acts, and
what is required to implement it. We assume that the reader has at least a rudi-
mentary understanding of computer graphics. This means familiarity with the es-
sentials of computer graphics algorithms as well as familiarity with basic graphics
hardware and associated terms.


1.1    Formatting of Optional Features
Starting with version 1.2 of OpenGL, some features in the specification are consid-
ered optional; an OpenGL implementation may or may not choose to provide them
(see section 3.7.2).
    Portions of the specification which are optional are so described where the
optional features are first defined (see section 3.7.2). State table entries which are
optional are typeset against a gray background .


1.2    What is the OpenGL Graphics System?
OpenGL (for “Open Graphics Library”) is a software interface to graphics hard-
ware. The interface consists of a set of several hundred procedures and functions
that allow a programmer to specify the objects and operations involved in produc-
ing high-quality graphical images, specifically color images of three-dimensional
objects.
    Most of OpenGL requires that the graphics hardware contain a framebuffer.
Many OpenGL calls pertain to drawing objects such as points, lines, polygons, and
bitmaps, but the way that some of this drawing occurs (such as when antialiasing



                                          1
1.3. PROGRAMMER’S VIEW OF OPENGL                                                   2


or texturing is enabled) relies on the existence of a framebuffer. Further, some of
OpenGL is specifically concerned with framebuffer manipulation.


1.3    Programmer’s View of OpenGL
To the programmer, OpenGL is a set of commands that allow the specification of
geometric objects in two or three dimensions, together with commands that control
how these objects are rendered into the framebuffer.
    A typical program that uses OpenGL begins with calls to open a window into
the framebuffer into which the program will draw. Then, calls are made to allocate
a GL context and associate it with the window. Once a GL context is allocated,
the programmer is free to issue OpenGL commands. Some calls are used to draw
simple geometric objects (i.e. points, line segments, and polygons), while others
affect the rendering of these primitives including how they are lit or colored and
how they are mapped from the user’s two- or three-dimensional model space to
the two-dimensional screen. There are also calls to effect direct control of the
framebuffer, such as reading and writing pixels.


1.4    Implementor’s View of OpenGL
To the implementor, OpenGL is a set of commands that affect the operation of
graphics hardware. If the hardware consists only of an addressable framebuffer,
then OpenGL must be implemented almost entirely on the host CPU. More typi-
cally, the graphics hardware may comprise varying degrees of graphics accelera-
tion, from a raster subsystem capable of rendering two-dimensional lines and poly-
gons to sophisticated floating-point processors capable of transforming and com-
puting on geometric data. The OpenGL implementor’s task is to provide the CPU
software interface while dividing the work for each OpenGL command between
the CPU and the graphics hardware. This division must be tailored to the available
graphics hardware to obtain optimum performance in carrying out OpenGL calls.
    OpenGL maintains a considerable amount of state information. This state con-
trols how objects are drawn into the framebuffer. Some of this state is directly
available to the user: he or she can make calls to obtain its value. Some of it, how-
ever, is visible only by the effect it has on what is drawn. One of the main goals of
this specification is to make OpenGL state information explicit, to elucidate how it
changes, and to indicate what its effects are.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
1.5. OUR VIEW                                                                    3


1.5     Our View
We view OpenGL as a pipeline having some programmable stages and some state-
driven stages that control a set of specific drawing operations. This model should
engender a specification that satisfies the needs of both programmers and imple-
mentors. It does not, however, necessarily provide a model for implementation. An
implementation must produce results conforming to those produced by the speci-
fied methods, but there may be ways to carry out a particular computation that are
more efficient than the one specified.


1.6     The Deprecation Model
GL features marked as deprecated in one version of the specification are expected
to be removed in a future version, allowing applications time to transition away
from use of deprecated features. The deprecation model is described in more detail,
together with a summary of the commands and state deprecated from this version
of the API, in appendix E.


1.7     Companion Documents
1.7.1   OpenGL Shading Language
This specification should be read together with a companion document titled The
OpenGL Shading Language. The latter document (referred to as the OpenGL Shad-
ing Language Specification hereafter) defines the syntax and semantics of the pro-
gramming language used to write vertex and fragment shaders (see sections 2.14
and 3.12). These sections may include references to concepts and terms (such as
shading language variable types) defined in the companion document.
    OpenGL 3.1 implementations are guaranteed to support at least versions 1.10,
1.20, and 1.30 of the shading language, although versions 1.10 and 1.20 are dep-
recated in a forward-compatible context. The actual version supported may be
queried as described in section 6.1.4.

1.7.2   Window System Bindings
OpenGL requires a companion API to create and manage graphics contexts, win-
dows to render into, and other resources beyond the scope of this Specification.
There are several such APIs supporting different operating and window systems.
    OpenGL Graphics with the X Window System, also called the “GLX Specifica-
tion”, describes the GLX API for use of OpenGL in the X Window System. It is

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
1.7. COMPANION DOCUMENTS                                                      4


primarily directed at Linux and Unix systems, but GLX implementations also exist
for Microsoft Windows, MacOS X, and some other platforms where X is avail-
able. The GLX Specification is available in the OpenGL Extension Registry (see
appendix H).
    The WGL API supports use of OpenGL with Microsoft Windows. WGL is
documented in Microsoft’s MSDN system, although no full specification exists.
    Several APIs exist supporting use of OpenGL with Quartz, the MacOS X win-
dow system, including CGL, AGL, and NSOpenGLView. These APIs are docu-
mented on Apple’s developer website.
    The Khronos Native Platform Graphics Interface or “EGL Specification” de-
scribes the EGL API for use of OpenGL ES on mobile and embedded devices.
EGL implementations may be available supporting OpenGL as well. The EGL
Specification is available in the Khronos Extension Registry at URL

                     http://www.khronos.org/registry/egl




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Chapter 2

OpenGL Operation

2.1    OpenGL Fundamentals
OpenGL (henceforth, the “GL”) is concerned only with rendering into a frame-
buffer (and reading values stored in that framebuffer). There is no support for
other peripherals sometimes associated with graphics hardware, such as mice and
keyboards. Programmers must rely on other mechanisms to obtain user input.
     The GL draws primitives subject to a number of selectable modes and shader
programs. Each primitive is a point, line segment, polygon, or pixel rectangle.
Each mode may be changed independently; the setting of one does not affect the
settings of others (although many modes may interact to determine what eventually
ends up in the framebuffer). Modes are set, primitives specified, and other GL
operations described by sending commands in the form of function or procedure
calls.
     Primitives are defined by a group of one or more vertices. A vertex defines
a point, an endpoint of an edge, or a corner of a polygon where two edges meet.
Data such as positional coordinates, colors, normals, texture coordinates, etc. are
associated with a vertex and each vertex is processed independently, in order, and
in the same way. The only exception to this rule is if the group of vertices must
be clipped so that the indicated primitive fits within a specified region; in this
case vertex data may be modified and new vertices created. The type of clipping
depends on which primitive the group of vertices represents.
     Commands are always processed in the order in which they are received, al-
though there may be an indeterminate delay before the effects of a command are
realized. This means, for example, that one primitive must be drawn completely
before any subsequent one can affect the framebuffer. It also means that queries
and pixel read operations return state consistent with complete execution of all


                                        5
2.1. OPENGL FUNDAMENTALS                                                           6


previously invoked GL commands, except where explicitly specified otherwise. In
general, the effects of a GL command on either GL modes or the framebuffer must
be complete before any subsequent command can have any such effects.
     In the GL, data binding occurs on call. This means that data passed to a com-
mand are interpreted when that command is received. Even if the command re-
quires a pointer to data, those data are interpreted when the call is made, and any
subsequent changes to the data have no effect on the GL (unless the same pointer
is used in a subsequent command).
     The GL provides direct control over the fundamental operations of 3D and 2D
graphics. This includes specification of parameters of application-defined shader
programs performing transformation, lighting, texturing, and shading operations,
as well as built-in functionality such as antialiasing and texture filtering. It does
not provide a means for describing or modeling complex geometric objects. An-
other way to describe this situation is to say that the GL provides mechanisms to
describe how complex geometric objects are to be rendered rather than mechanisms
to describe the complex objects themselves.
     The model for interpretation of GL commands is client-server. That is, a pro-
gram (the client) issues commands, and these commands are interpreted and pro-
cessed by the GL (the server). The server may or may not operate on the same
computer as the client. In this sense, the GL is “network-transparent.” A server
may maintain a number of GL contexts, each of which is an encapsulation of cur-
rent GL state. A client may choose to connect to any one of these contexts. Issuing
GL commands when the program is not connected to a context results in undefined
behavior.
     The GL interacts with two classes of framebuffers: window system-provided
and application-created. There is at most one window system-provided framebuffer
at any time, referred to as the default framebuffer. Application-created frame-
buffers, referred to as framebuffer objects, may be created as desired. These two
types of framebuffer are distinguished primarily by the interface for configuring
and managing their state.
     The effects of GL commands on the default framebuffer are ultimately con-
trolled by the window system, which allocates framebuffer resources, determines
which portions of the default framebuffer the GL may access at any given time, and
communicates to the GL how those portions are structured. Therefore, there are
no GL commands to initialize a GL context or configure the default framebuffer.
Similarly, display of framebuffer contents on a physical display device (including
the transformation of individual framebuffer values by such techniques as gamma
correction) is not addressed by the GL.
     Allocation and configuration of the default framebuffer occurs outside of the
GL in conjunction with the window system, using companion APIs described in

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.1. OPENGL FUNDAMENTALS                                                          7


section 1.7.2.
     Allocation and initialization of GL contexts is also done using these companion
APIs. GL contexts can typically be associated with different default framebuffers,
and some context state is determined at the time this association is performed.
     It is possible to use a GL context without a default framebuffer, in which case
a framebuffer object must be used to perform all rendering. This is useful for
applications needing to perform offscreen rendering.
     The GL is designed to be run on a range of graphics platforms with varying
graphics capabilities and performance. To accommodate this variety, we specify
ideal behavior instead of actual behavior for certain GL operations. In cases where
deviation from the ideal is allowed, we also specify the rules that an implemen-
tation must obey if it is to approximate the ideal behavior usefully. This allowed
variation in GL behavior implies that two distinct GL implementations may not
agree pixel for pixel when presented with the same input even when run on identi-
cal framebuffer configurations.
     Finally, command names, constants, and types are prefixed in the GL (by gl,
GL_, and GL, respectively in C) to reduce name clashes with other packages. The
prefixes are omitted in this document for clarity.

2.1.1   Floating-Point Computation
The GL must perform a number of floating-point operations during the course of
its operation. In some cases, the representation and/or precision of such opera-
tions is defined or limited; by the OpenGL Shading Language Specification for
operations in shaders, and in some cases implicitly limited by the specified format
of vertex, texture, or renderbuffer data consumed by the GL. Otherwise, the rep-
resentation of such floating-point numbers, and the details of how operations on
them are performed, is not specified. We require simply that numbers’ floating-
point parts contain enough bits and that their exponent fields are large enough so
that individual results of floating-point operations are accurate to about 1 part in
105 . The maximum representable magnitude of a floating-point number used to
represent positional, normal, or texture coordinates must be at least 232 ; the max-
imum representable magnitude for colors must be at least 210 . The maximum
representable magnitude for all other floating-point values must be at least 232 .
x · 0 = 0 · x = 0 for any non-infinite and non-NaN x. 1 · x = x · 1 = x.
x + 0 = 0 + x = x. 00 = 1. (Occasionally further requirements will be specified.)
Most single-precision floating-point formats meet these requirements.
    The special values Inf and −Inf encode values with magnitudes too large to
be represented; the special value NaN encodes “Not A Number” values resulting
from undefined arithmetic operations such as 01 . Implementations are permitted,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.1. OPENGL FUNDAMENTALS                                                            8


but not required, to support Inf s and NaN s in their floating-point computations.
    Any representable floating-point value is legal as input to a GL command that
requires floating-point data. The result of providing a value that is not a floating-
point number to such a command is unspecified, but must not lead to GL interrup-
tion or termination. In IEEE arithmetic, for example, providing a negative zero or a
denormalized number to a GL command yields predictable results, while providing
a NaN or an infinity yields unspecified results.
    Some calculations require division. In such cases (including implied divisions
required by vector normalizations), a division by zero produces an unspecified re-
sult but must not lead to GL interruption or termination.

2.1.2   16-Bit Floating-Point Numbers
A 16-bit floating-point number has a 1-bit sign (S), a 5-bit exponent (E), and a
10-bit mantissa (M ). The value V of a 16-bit floating-point number is determined
by the following:
                  
                  
                   (−1)S × 0.0,                     E = 0, M = 0
                  
                         S     −14    M
                  (−1) × 2        × 210 ,           E = 0, M = 0
                  
                  
                  
             V = (−1) × 2S     E−15          M
                                    × 1 + 210 , 0 < E < 31
                  
                        S
                  (−1) × Inf ,                      E = 31, M = 0
                  
                  
                  
                    NaN ,                            E = 31, M = 0
                  

    If the floating-point number is interpreted as an unsigned 16-bit integer N , then


                                     N
                                    mod 65536
                              S=
                                    32768
                                  N mod 32768
                             E=
                                     1024
                             M = N mod 1024.

    Any representable 16-bit floating-point value is legal as input to a GL command
that accepts 16-bit floating-point data. The result of providing a value that is not a
floating-point number (such as Inf or NaN ) to such a command is unspecified, but
must not lead to GL interruption or termination. Providing a denormalized number
or negative zero to GL must yield predictable results.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.1. OPENGL FUNDAMENTALS                                                            9


2.1.3   Unsigned 11-Bit Floating-Point Numbers
An unsigned 11-bit floating-point number has no sign bit, a 5-bit exponent (E), and
a 6-bit mantissa (M ). The value V of an unsigned 11-bit floating-point number is
determined by the following:
                        
                        
                         0.0,                E = 0, M = 0
                        
                           −14    M
                               × 64 ,
                        2                    E = 0, M = 0
                        
                        
                        
                           E−15         M
                  V = 2         × 1 + 64 , 0 < E < 31
                        
                        Inf ,
                        
                                             E = 31, M = 0
                        
                        
                          NaN ,               E = 31, M = 0
                        

    If the floating-point number is interpreted as an unsigned 11-bit integer N , then


                                     N
                                 E=
                                     64
                                M = N mod 64.

    When a floating-point value is converted to an unsigned 11-bit floating-point
representation, finite values are rounded to the closest representable finite value.
While less accurate, implementations are allowed to always round in the direction
of zero. This means negative values are converted to zero. Likewise, finite posi-
tive values greater than 65024 (the maximum finite representable unsigned 11-bit
floating-point value) are converted to 65024. Additionally: negative infinity is con-
verted to zero; positive infinity is converted to positive infinity; and both positive
and negative NaN are converted to positive NaN .
    Any representable unsigned 11-bit floating-point value is legal as input to a
GL command that accepts 11-bit floating-point data. The result of providing a
value that is not a floating-point number (such as Inf or NaN ) to such a command
is unspecified, but must not lead to GL interruption or termination. Providing a
denormalized number to GL must yield predictable results.

2.1.4   Unsigned 10-Bit Floating-Point Numbers
An unsigned 10-bit floating-point number has no sign bit, a 5-bit exponent (E), and
a 5-bit mantissa (M ). The value V of an unsigned 10-bit floating-point number is
determined by the following:




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.1. OPENGL FUNDAMENTALS                                                           10


                      
                      
                      0.0,                      E = 0, M = 0
                      
                        −14 × M ,
                      2                         E = 0, M = 0
                      
                      
                             32
                   V = 2E−15 × 1 +        M
                                          32   , 0 < E < 31
                      
                       Inf ,                     E = 31, M = 0
                      
                      
                      
                      
                      
                       NaN ,                     E = 31, M = 0
                      

    If the floating-point number is interpreted as an unsigned 10-bit integer N , then


                                     N
                                 E=
                                     32
                                M = N mod 32.

    When a floating-point value is converted to an unsigned 10-bit floating-point
representation, finite values are rounded to the closest representable finite value.
While less accurate, implementations are allowed to always round in the direction
of zero. This means negative values are converted to zero. Likewise, finite posi-
tive values greater than 64512 (the maximum finite representable unsigned 10-bit
floating-point value) are converted to 64512. Additionally: negative infinity is con-
verted to zero; positive infinity is converted to positive infinity; and both positive
and negative NaN are converted to positive NaN .
    Any representable unsigned 10-bit floating-point value is legal as input to a
GL command that accepts 10-bit floating-point data. The result of providing a
value that is not a floating-point number (such as Inf or NaN ) to such a command
is unspecified, but must not lead to GL interruption or termination. Providing a
denormalized number to GL must yield predictable results.

2.1.5   Fixed-Point Data Conversions
When generic vertex attributes and pixel color or depth components are repre-
sented as integers, they are often (but not always) considered to be normalized.
Normalized integer values are treated specially when being converted to and from
floating-point values, and are usually referred to as normalized fixed-point. Such
values are always either signed or unsigned.
     In the remainder of this section, b denotes the bit width of the fixed-point in-
teger representation. When the integer is one of the types defined in table 2.2, b
is the minimum required bit width of that type. When the integer is a texture or
renderbuffer color or depth component (see section 3.9.1), b is the number of bits
allocated to that component in the internal format of the texture or renderbuffer.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.1. OPENGL FUNDAMENTALS                                                               11


When the integer is a framebuffer color or depth component (see section 4, b is the
number of bits allocated to that component in the framebuffer. For framebuffer and
renderbuffer A components, b must be at least 2 if the buffer does not contain an A
component, or if there is only 1 bit of A in the buffer.
    The signed and unsigned fixed-point representations are assumed to be b-bit
binary twos-complement integers and binary unsigned integers, respectively The
signed fixed-point representation may be treated in one of two ways, as discussed
below.
    All the conversions described below are performed as defined, even if the im-
plemented range of an integer data type is greater than the minimum required range.

Conversion from Normalized Fixed-Point to Floating-Point
Unsigned normalized fixed-point integers represent numbers in the range [0, 1].
The conversion from an unsigned normalized fixed-point value c to the correspond-
ing floating-point value f is defined as
                                                c
                                      f=           .                                (2.1)
                                           2b   −1
    Signed normalized fixed-point integers represent numbers in the range [−1, 1].
The conversion from a signed normalized fixed-point value c to the corresponding
floating-point value f may be performed in two ways:
                                            2c + 1
                                      f=                                            (2.2)
                                            2b − 1
    In this case the full range of the representation is used, so that −2b−1 corre-
sponds to -1.0 and 2b−1 − 1 corresponds to 1.0. For example, if b = 8, then the
integer value -128 corresponds to -1.0 and the value 127 corresponds to 1.0. Note
that it is not possible to exactly express 0 in this representation. In general, this rep-
resentation is used for signed normalized fixed-point parameters in GL commands,
such as vertex attribute values.
    Alternatively, conversion may be performed using

                                            c
                            f = max               , −1.0 .                          (2.3)
                                         2b−1 − 1
    In this case only the range [−2b−1 + 1, 2b−1 − 1] is used to represent signed
fixed-point values in the range [−1, 1]. For example, if b = 8, then the integer
value -127 corresponds to -1.0 and the value 127 corresponds to 1.0. Note that
while zero can be exactly expressed in this representation, one value (-128 in the
example) is outside the representable range, and must be clamped before use. In


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.2. GL STATE                                                                    12


general, this representation is used for signed normalized fixed-point texture or
framebuffer values.
    Everywhere that signed normalized fixed-point values are converted, the equa-
tion used is specified.

Conversion from Floating-Point to Normalized Fixed-Point
The conversion from a floating-point value f to the corresponding unsigned nor-
malized fixed-point value c is defined by first clamping f to the range [0, 1], then
computing

                                f = f × (2b − 1).                              (2.4)
f is then cast to an unsigned binary integer value with exactly b bits.
   The conversion from a floating-point value f to the corresponding signed nor-
malized fixed-point value c may be performed in two ways, both beginning by
clamping f to the range [−1, 1]:

                               f = f × (2b − 1) − 1
                                                                               (2.5)
                                         2
    In general, this conversion is used when querying floating-point state (see sec-
tion 6) and returning integers.
    Alternatively, conversion may be performed using

                              f = f × (2b−1 − 1).                              (2.6)
    In general, this conversion is used when specifying signed normalized fixed-
point texture or framebuffer values.
    After conversion, f is then cast to a signed two’s-complement binary integer
value with exactly b bits.
    Everywhere that floating-point values are converted to signed normalized fixed-
point, the equation used is specified.


2.2    GL State
The GL maintains considerable state. This document enumerates each state vari-
able and describes how each variable can be changed. For purposes of discussion,
state variables are categorized somewhat arbitrarily by their function. Although we
describe the operations that the GL performs on the framebuffer, the framebuffer
is not a part of GL state.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.3. GL COMMAND SYNTAX                                                              13


    We distinguish two types of state. The first type of state, called GL server
state, resides in the GL server. The majority of GL state falls into this category.
The second type of state, called GL client state, resides in the GL client. Unless
otherwise specified, all state referred to in this document is GL server state; GL
client state is specifically identified. Each instance of a GL context implies one
complete set of GL server state; each connection from a client to a server implies
a set of both GL client state and GL server state.
    While an implementation of the GL may be hardware dependent, this discus-
sion is independent of the specific hardware on which a GL is implemented. We are
therefore concerned with the state of graphics hardware only when it corresponds
precisely to GL state.

2.2.1    Shared Object State
It is possible for groups of contexts to share certain state. Enabling such sharing
between contexts is done through window system binding APIs such as those de-
scribed in section 1.7.2. These APIs are responsible for creation and management
of contexts, and not discussed further here. More detailed discussion of the behav-
ior of shared objects is included in appendix D. Except as defined in this appendix,
all state in a context is specific to that context only.


2.3     GL Command Syntax
GL commands are functions or procedures. Various groups of commands perform
the same operation but differ in how arguments are supplied to them. To conve-
niently accommodate this variation, we adopt a notation for describing commands
and their arguments.
    GL commands are formed from a name followed, depending on the particular
command, by up to 4 characters. The first character indicates the number of values
of the indicated type that must be presented to the command. The second character
or character pair indicates the specific type of the arguments: 8-bit integer, 16-bit
integer, 32-bit integer, single-precision floating-point, or double-precision floating-
point. The final character, if present, is v, indicating that the command takes a
pointer to an array (a vector) of values rather than a series of individual arguments.
Two specific examples are:

        void Uniform4f( int location, float v0, float v1,
           float v2, float v3 );

and

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.3. GL COMMAND SYNTAX                                                                               14


                             Letter    Corresponding GL Type
                               b       byte
                               s       short
                               i       int
                               f       float
                               d       double
                              ub       ubyte
                              us       ushort
                              ui       uint

Table 2.1: Correspondence of command suffix letters to GL argument types. Refer
to table 2.2 for definitions of the GL types.



       void GetFloatv( enum value, float *data );

    These examples show the ANSI C declarations for these commands. In general,
a command declaration has the form1

       rtype Name{ 1234}{ b s i f d ub us ui}{ v}
                       ( [args ,] T arg1 , . . . , T argN [, args] );

rtype is the return type of the function. The braces ({}) enclose a series of char-
acters (or character pairs) of which one is selected. indicates no character. The
arguments enclosed in brackets ([args ,] and [, args]) may or may not be present.
The N arguments arg1 through argN have type T, which corresponds to one of the
type letters or letter pairs as indicated in table 2.1 (if there are no letters, then the
arguments’ type is given explicitly). If the final character is not v, then N is given
by the digit 1, 2, 3, or 4 (if there is no digit, then the number of arguments is fixed).
If the final character is v, then only arg1 is present and it is an array of N values
of the indicated type. Finally, we indicate an unsigned type by the shorthand of
prepending a u to the beginning of the type name (so that, for instance, unsigned
byte is abbreviated ubyte).
     For example,

       void Uniform{1234}{if}( int location, T value );

indicates the eight declarations
   1
     The declarations shown in this document apply to ANSI C. Languages such as C++ and Ada
that allow passing of argument type information admit simpler declarations and fewer entry points.


                   OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.4. BASIC GL OPERATION                                                             15


      void Uniform1i( int location, int value );
      void Uniform1f( int location, float value );
      void Uniform2i( int location, int v0, int v1 );
      void Uniform2f( int location, float v0, float v1 );
      void Uniform3i( int location, int v0, int v1, int v2 );
      void Uniform3f( int location, float v1, float v2,
         float v2 );
      void Uniform4i( int location, int v0, int v1, int v2,
         int v3 );
      void Uniform4f( int location, float v0, float v1,
         float v2, float v3 );

    Arguments whose type is fixed (i.e. not indicated by a suffix on the command)
are of one of the GL data types summarized in table 2.2, or pointers to one of these
types.


2.4    Basic GL Operation
Figure 2.1 shows a schematic diagram of the GL. Commands enter the GL on the
left. Some commands specify geometric objects to be drawn while others control
how the objects are handled by the various stages. Most commands may be ac-
cumulated in a display list for processing by the GL at a later time. Otherwise,
commands are effectively sent through a processing pipeline.
     The first stage provides an efficient means for approximating curve and surface
geometry by evaluating polynomial functions of input values. operates on geo-
metric primitives described by vertices: points, line segments, and polygons. In
this stage vertices are transformed and lit, and primitives are clipped to a viewing
volume in preparation for the next stage, rasterization. The rasterizer produces a
series of framebuffer addresses and values using a two-dimensional description of
a point, line segment, or polygon. Each fragment so produced is fed to the next
stage that performs operations on individual fragments before they finally alter the
framebuffer. These operations include conditional updates into the framebuffer
based on incoming and previously stored depth values (to effect depth buffering),
blending of incoming fragment colors with stored colors, as well as masking and
other logical operations on fragment values.
     Finally, there is a way to bypass the vertex processing portion of the pipeline to
send a block of fragments directly to the individual fragment operations, eventually
causing a block of pixels to be written to the framebuffer; values may also be read
back from the framebuffer or copied from one portion of the framebuffer to another.
These transfers may include some type of decoding or encoding.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.4. BASIC GL OPERATION                                                         16




        GL Type        Minimum      Description
                       Bit Width
        boolean            1        Boolean
        byte               8        Signed 2’s complement binary integer
        ubyte              8        Unsigned binary integer
        char               8        Characters making up strings
        short              16       Signed 2’s complement binary integer
        ushort             16       Unsigned binary integer
        int                32       Signed 2’s complement binary integer
        uint               32       Unsigned binary integer
        sizei              32       Non-negative binary integer size
        enum               32       Enumerated binary integer value
        intptr          ptrbits     Signed 2’s complement binary integer
        sizeiptr        ptrbits     Non-negative binary integer size
        bitfield           32       Bit field
        half               16       Half-precision floating-point value
                                    encoded in an unsigned scalar
        float              32       Floating-point value
        clampf             32       Floating-point value clamped to [0, 1]
        double             64       Floating-point value
        clampd             64       Floating-point value clamped to [0, 1]

Table 2.2: GL data types. GL types are not C types. Thus, for example, GL
type int is referred to as GLint outside this document, and is not necessarily
equivalent to the C type int. An implementation may use more bits than the
number indicated in the table to represent a GL type. Correct interpretation of
integer values outside the minimum range is not required, however.
ptrbits is the number of bits required to represent a pointer type; in other words,
types intptr and sizeiptr must be sufficiently large as to store any address.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.5. GL ERRORS                                                                       17




           Display
            List


                                 Per−Vertex
                                 Operations               Per−
                                              Rasteriz−
                     Evaluator                            Fragment     Framebuffer
                                 Primitive    ation
                                                          Operations
                                 Assembly



                                              Texture
                                              Memory

                                 Pixel
                                 Operations




   Figure 2.1. Block diagram of the GL.




    This ordering is meant only as a tool for describing the GL, not as a strict rule
of how the GL is implemented, and we present it only as a means to organize the
various operations of the GL. Objects such as curved surfaces, for instance, may
be transformed before they are converted to polygons.


2.5    GL Errors
The GL detects only a subset of those conditions that could be considered errors.
This is because in many cases error checking would adversely impact the perfor-
mance of an error-free program.
   The command

      enum GetError( void );

is used to obtain error information. Each detectable error is assigned a numeric
code. When an error is detected, a flag is set and the code is recorded. Further
errors, if they occur, do not affect this recorded code. When GetError is called,
the code is returned and the flag is cleared, so that a further error will again record
its code. If a call to GetError returns NO_ERROR, then there has been no detectable
error since the last call to GetError (or since the GL was initialized).
     To allow for distributed implementations, there may be several flag-code pairs.
In this case, after a call to GetError returns a value other than NO_ERROR each

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                               18


subsequent call returns the non-zero code of a distinct flag-code pair (in unspecified
order), until all non-NO_ERROR codes have been returned. When there are no more
non-NO_ERROR error codes, all flags are reset. This scheme requires some positive
number of pairs of a flag bit and an integer. The initial state of all flags is cleared
and the initial value of all codes is NO_ERROR.
    Table 2.3 summarizes GL errors. Currently, when an error flag is set, results of
GL operation are undefined only if OUT_OF_MEMORY has occurred. In other cases,
the command generating the error is ignored so that it has no effect on GL state or
framebuffer contents. If the generating command returns a value, it returns zero. If
the generating command modifies values through a pointer argument, no change is
made to these values. These error semantics apply only to GL errors, not to system
errors such as memory access errors. This behavior is the current behavior; the
action of the GL in the presence of errors is subject to change.
    Several error generation conditions are implicit in the description of every GL
command:

    • If a command that requires an enumerated value is passed a symbolic con-
      stant that is not one of those specified as allowable for that command, the
      error INVALID_ENUM is generated. This is the case even if the argument is
      a pointer to a symbolic constant, if the value pointed to is not allowable for
      the given command.
    • If a negative number is provided where an argument of type sizei or
      sizeiptr is specified, the error INVALID_VALUE is generated.
    • If memory is exhausted as a side effect of the execution of a command, the
      error OUT_OF_MEMORY may be generated.

Otherwise, errors are generated only for conditions that are explicitly described in
this specification.


2.6     Begin/End Paradigm
    In the GL, most geometric objects are drawn by enclosing a series of coor-
dinate sets that specify vertices and optionally normals, texture coordinates, and
colors between Begin/End pairs. There are ten geometric objects that are drawn
this way: points, line segment strips, line segment loops, separated line segments,
polygons, quadrilateral strips, separated quadrilaterals, triangle strips, triangle fans,
and separated triangles,
    Each vertex is specified with two, three, or four coordinates. In addition, a
current normal, multiple current texture coordinate sets, multiple current generic

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                            19


 Error                                        Description                          Offending com-
                                                                                   mand ignored?
 INVALID_ENUM                                 enum argument out of range           Yes
 INVALID_VALUE                                Numeric argument out of range        Yes
 INVALID_OPERATION                            Operation illegal in current state   Yes
 INVALID_FRAMEBUFFER_OPERATION                Framebuffer object is not com-       Yes
                                              plete
 STACK_OVERFLOW                               Command would cause a stack          Yes
                                              overflow
 STACK_UNDERFLOW                              Command would cause a stack          Yes
                                              underflow
 OUT_OF_MEMORY                                Not enough memory left to exe-       Unknown
                                              cute command
 TABLE_TOO_LARGE                              The specified table is too large     Yes


                         Table 2.3: Summary of GL errors


vertex attributes, current color, current secondary color, and current fog coordi-
nate may be used in processing each vertex. Normals are used by the GL in lighting
calculations; the current normal is a three-dimensional vector that may be set by
sending three coordinates that specify it. Texture coordinates determine how a tex-
ture image is mapped onto a primitive. Multiple sets of texture coordinates may
be used to specify how multiple texture images are mapped onto a primitive. The
number of texture units supported is implementation-dependent but must be at least
two. The number of texture units supported can be queried with the state MAX_-
TEXTURE_UNITS. Generic vertex attributes can be accessed from within vertex
shaders (section 2.14) and used to compute values for consumption by later pro-
cessing stages.
    Primary and secondary colors are associated with each vertex (see sec-
tion 3.10). These associated colors are either based on the current color and current
secondary color or produced by lighting, depending on whether or not lighting is
enabled. Texture and fog coordinates are similarly associated with each vertex.
Multiple sets of texture coordinates may be associated with a vertex. Figure 2.2
summarizes the association of auxiliary data with a transformed vertex to produce
a processed vertex.
    The current values are part of GL state. Vertices and normals are transformed,
colors may be affected or replaced by lighting, and texture coordinates are trans-
formed and possibly affected by a texture coordinate generation function. The


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                                   20



                Vertex
             Coordinates In


                                   vertex / normal           Transformed
                                   transformation
                                                             Coordinates
      Current
      Normal
                                                                              Processed
                                                                                Vertex
                                                                                 Out

     Current                                 lighting         Associated
     Colors &                                                    Data
     Materials                                               (Colors, Edge Flag,
                                                              Fog and Texture
                                                                Coordinates)
      Current
    Edge Flag &
     Fog Coord

     Current
     Texture              texgen                 texture
                                                 matrix 0
    Coord Set 0




     Current
     Texture             texgen                  texture
                                                 matrix 1
    Coord Set 1




     Current
     Texture             texgen                  texture
                                                 matrix 2
    Coord Set 2




     Current
     Texture             texgen                  texture
                                                 matrix 3
    Coord Set 3




  Figure 2.2. Association of current values with a vertex. The heavy lined boxes rep-
  resent GL state. Four texture units are shown; however, multitexturing may support
  a different number of units depending on the implementation.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                                  21



                                                    Point culling;
                                                    Line Segment
                Coordinates        Point,             or Polygon
                              Line Segment, or         Clipping
    Processed
                                  Polygon                              Rasterization
     Vertices   Associated       (Primitive)
                  Data           Assembly               Color
                                                     Processing




                                 Begin/End
                                   State




   Figure 2.3. Primitive assembly and processing.




processing indicated for each current value is applied for each vertex that is sent to
the GL.
     The methods by which vertices, normals, texture coordinates, fog coordinate,
generic attributes, and colors are sent to the GL, as well as how normals are trans-
formed and how vertices are mapped to the two-dimensional screen, are discussed
later.
     Before colors have been assigned to a vertex, the state required by a vertex
is the vertex’s coordinates, the current normal, the current edge flag (see sec-
tion 2.6.2), the current material properties (see section 2.13.2), the current fog co-
ordinate, the multiple generic vertex attribute sets, and the multiple current texture
coordinate sets. Because color assignment is done vertex-by-vertex, a processed
vertex comprises the vertex’s coordinates, its edge flag, its fog coordinate, its as-
signed colors, and its multiple texture coordinate sets.
     Figure 2.3 shows the sequence of operations that builds a primitive (point, line
segment, or polygon) from a sequence of vertices. After a primitive is formed, it
is clipped to a viewing volume. This may alter the primitive by altering vertex
coordinates, texture coordinates, and colors. In the case of line and polygon prim-
itives, clipping may insert new vertices into the primitive. The vertices defining a
primitive to be rasterized have texture coordinates and colors associated with them.




                      OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                              22


2.6.1    Begin and End
Vertices making up one of the supported geometric object types are specified by
enclosing commands defining those vertices between the two commands

        void Begin( enum mode );
        void End( void );

There is no limit on the number of vertices that may be specified between a Begin
and an End. The mode parameter of Begin determines the type of primitives to be
drawn using the vertices. The types, and the corresponding mode parameters, are:
    Points. A series of individual points may be specified with mode POINTS.
Each vertex defines a separate point. No special state need be kept between Begin
and End in this case, since each point is independent of previous and following
points.
    Line Strips. A series of one or more connected line segments may be specified
with mode LINE_STRIP. In this case, the first vertex specifies the first segment’s
start point while the second vertex specifies the first segment’s endpoint and the
second segment’s start point. In general, the ith vertex (for i > 1) specifies the
beginning of the ith segment and the end of the i − 1st. The last vertex specifies
the end of the last segment. If only one vertex is specified, then no primitive is
generated.
    The required state consists of the processed vertex produced from the last ver-
tex that was sent (so that a line segment can be generated from it to the current
vertex), and a boolean flag indicating if the current vertex is the first vertex.
    Line Loops. Line loops may be specified with mode LINE_LOOP. Loops are
the same as line strips except that a final segment is added from the final specified
vertex to the first vertex. The required state consists of the processed first vertex,
in addition to the state required for line strips.
    Separate Lines. Individual line segments, each specified by a pair of vertices,
may be specified with mode LINES. The first two vertices between a Begin and
End pair define the first segment, with subsequent pairs of vertices each defining
one more segment. If the number of specified vertices is odd, then the last one is
ignored. The state required is the same as for line strips but it is used differently: a
processed vertex holding the first vertex of the current segment, and a boolean flag
indicating whether the current vertex is odd or even (a segment start or end).
    Polygons. A polygon is described by specifying its boundary as a series of line
segments. When Begin is called with POLYGON, the bounding line segments are
specified in the same way as line loops. A polygon described with fewer than three
vertices does not generate a primitive.


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                                       23




    2               4                 2                          2
                                                  3                                      6
                                                                           4
                                                      4

                                                          5                          5
    1           3            5        1                          1             3

             (a)                            (b)                                (c)


   Figure 2.4. (a) A triangle strip. (b) A triangle fan. (c) Independent triangles. The
   numbers give the sequencing of the vertices in order within the vertex arrays. Note
   that in (a) and (b) triangle edge ordering is determined by the first triangle, while in
   (c) the order of each triangle’s edges is independent of the other triangles.




    The state required to support polygons consists of at least two processed ver-
tices (more than two are never required, although an implementation may use
more); this is because a convex polygon can be rasterized as its vertices arrive,
before all of them have been specified.
    Triangle strips. A triangle strip is a series of triangles connected along shared
edges, and may be specified with mode TRIANGLE_STRIP. In this case, the first
three vertices define the first triangle (and their order is significant, just as for poly-
gons). Each subsequent vertex defines a new triangle using that point along with
two vertices from the previous triangle. If fewer than three vertices are specified,
no primitive is produced. See figure 2.4.
    The required state consists of a flag indicating if the first triangle has been
completed, two stored processed vertices, (called vertex A and vertex B), and a
one bit pointer indicating which stored vertex will be replaced with the next vertex.
After a Begin(TRIANGLE_STRIP), the pointer is initialized to point to vertex A.
Each successive vertex toggles the pointer. Therefore, the first vertex is stored as
vertex A, the second stored as vertex B, the third stored as vertex A, and so on.
Any vertex after the second one sent forms a triangle from vertex A, vertex B, and
the current vertex (in that order).
    Triangle fans. A triangle fan is the same as a triangle strip with one exception:
each vertex after the first always replaces vertex B of the two stored vertices. A
triangle fan may be specified with mode TRIANGLE_FAN.


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                                 24



             2         4          6              2         3     6       7




             1         3          5              1         4     5        8


                      (a)                                      (b)



   Figure 2.5. (a) A quad strip. (b) Independent quads. The numbers give the sequenc-
   ing of the vertices between Begin and End.




      Separate Triangles. Separate triangles are specified with mode TRIANGLES.
In this case, The 3i + 1st, 3i + 2nd, and 3i + 3rd vertices (in that order) determine
a triangle for each i = 0, 1, . . . , n − 1, where there are 3n + k vertices drawn. k is
either 0, 1, or 2; if k is not zero, the final k vertices are ignored. For each triangle,
vertex A is vertex 3i and vertex B is vertex 3i + 1. Otherwise, separate triangles
are the same as a triangle strip.
      Quadrilateral (quad) strips. Quad strips generate a series of edge-sharing
quadrilaterals from vertices appearing between Begin and End, when Begin is
called with QUAD_STRIP. If the m vertices between the Begin and End are
v1 , . . . , vm , where vj is the jth specified vertex, then quad i has vertices (in or-
der) v2i , v2i+1 , v2i+3 , and v2i+2 with i = 0, . . . , m/2 . The state required is thus
three processed vertices, to store the last two vertices of the previous quad along
with the third vertex (the first new vertex) of the current quad, a flag to indicate
when the first quad has been completed, and a one-bit counter to count members
of a vertex pair. See figure 2.5.
      A quad strip with fewer than four vertices generates no primitive. If the number
of vertices specified for a quadrilateral strip between Begin and End is odd, the
final vertex is ignored.
      Separate Quadrilaterals Separate quads are just like quad strips except that
each group of four vertices, the 4j + 1st, the 4j + 2nd, the 4j + 3rd, and the
4j + 4th, generate a single quad, for j = 0, 1, . . . , n − 1. The total number of
vertices between Begin and End is 4n + k, where 0 ≤ k ≤ 3; if k is not zero, the
final k vertices are ignored. Separate quads are generated by calling Begin with
the argument value QUADS.


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.6. BEGIN/END PARADIGM                                                                25


    Depending on the current state of the GL, a polygon primitive generated from
a drawing command with mode POLYGON, QUADS, QUAD_STRIP, TRIANGLE_-
FAN, TRIANGLE_STRIP, or TRIANGLES may be rendered in one of several ways,
such as outlining its border or filling its interior. The order of vertices in such
a primitive is significant in lighting, polygon rasterization, and fragment shading
(see sections 2.13.1, 3.6.1, and 3.12.2). Only convex polygons are guaranteed to
be drawn correctly by the GL. If a specified polygon is nonconvex when projected
onto the window, then the rendered polygon need only lie within the convex hull
of the projected vertices defining its boundary.
    The state required for Begin and End consists of an eleven-valued integer indi-
cating either one of the ten possible Begin/End modes, or that no Begin/End mode
is being processed.
    Calling Begin will result in an INVALID_FRAMEBUFFER_OPERATION error if
the object bound to DRAW_FRAMEBUFFER_BINDING is not framebuffer complete
(see section 4.4.4).

2.6.2    Polygon Edges
Each edge of each polygon primitive generated is flagged as either boundary or
non-boundary. These classifications are used during polygon rasterization; some
modes affect the interpretation of polygon boundary edges (see section 3.6.4). By
default, all edges are boundary edges, but the flagging of polygons, separate trian-
gles, or separate quadrilaterals may be altered by calling

        void EdgeFlag( boolean flag );
        void EdgeFlagv( boolean *flag );

to change the value of a flag bit. If flag is zero, then the flag bit is set to FALSE; if
flag is non-zero, then the flag bit is set to TRUE.
     When Begin is supplied with one of the argument values POLYGON,
TRIANGLES, or QUADS, each vertex specified within a Begin and End pair be-
gins an edge. If the edge flag bit is TRUE, then each specified vertex begins an edge
that is flagged as boundary. If the bit is FALSE, then induced edges are flagged as
non-boundary.
     The state required for edge flagging consists of one current flag bit. Initially, the
bit is TRUE. In addition, each processed vertex of an assembled polygonal primitive
must be augmented with a bit indicating whether or not the edge beginning on that
vertex is boundary or non-boundary.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.7. VERTEX SPECIFICATION                                                               26


2.6.3    GL Commands within Begin/End
The only GL commands that are allowed within any Begin/End pairs are the com-
mands for specifying vertex coordinates, vertex colors, normal coordinates, texture
coordinates, generic vertex attributes, and fog coordinates (Vertex, Color, Sec-
ondaryColor, Index, Normal, TexCoord and MultiTexCoord, VertexAttrib,
FogCoord), the ArrayElement command (see section 2.8), the EvalCoord and
EvalPoint commands (see section 5.1), commands for specifying lighting mate-
rial parameters (Material commands; see section 2.13.2), display list invocation
commands (CallList and CallLists; see section 5.4), and the EdgeFlag command.
Executing any other GL command between the execution of Begin and the corre-
sponding execution of End results in the error INVALID_OPERATION. Executing
Begin after Begin has already been executed but before an End is executed gen-
erates the INVALID_OPERATION error, as does executing End without a previous
corresponding Begin.
     Execution of the commands EnableClientState, DisableClientState, Push-
ClientAttrib, PopClientAttrib, ColorPointer, FogCoordPointer, EdgeFlag-
Pointer, IndexPointer, NormalPointer, TexCoordPointer, SecondaryCol-
orPointer, VertexPointer, VertexAttribPointer, ClientActiveTexture, Inter-
leavedArrays, and PixelStore is not allowed within any Begin/End pair, but an
error may or may not be generated if such execution occurs. If an error is not gen-
erated, GL operation is undefined. (These commands are described in sections 2.8,
3.7.1, and chapter 6.)


2.7     Vertex Specification
Vertices are specified by giving their coordinates in two, three, or four dimensions.
This is done using one of several versions of the Vertex command:

        void Vertex{234}{sifd}( T coords );
        void Vertex{234}{sifd}v( T coords );

A call to any Vertex command specifies four coordinates: x, y, z, and w. The
x coordinate is the first coordinate, y is second, z is third, and w is fourth. A
call to Vertex2 sets the x and y coordinates; the z coordinate is implicitly set to
zero and the w coordinate to one. Vertex3 sets x, y, and z to the provided values
and w to one. Vertex4 sets all four coordinates, allowing the specification of an
arbitrary point in projective three-space. Invoking a Vertex command outside of a
Begin/End pair results in undefined behavior.



                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.7. VERTEX SPECIFICATION                                                          27


    Current values are used in associating auxiliary data with a vertex as described
in section 2.5. A current value may be changed at any time by issuing an appropri-
ate command. The commands

      void TexCoord{1234}{sifd}( T coords );
      void TexCoord{1234}{sifd}v( T coords );

specify the current homogeneous texture coordinates, named s, t, r, and q. The
TexCoord1 family of commands set the s coordinate to the provided single argu-
ment while setting t and r to 0 and q to 1. Similarly, TexCoord2 sets s and t to the
specified values, r to 0 and q to 1; TexCoord3 sets s, t, and r, with q set to 1, and
TexCoord4 sets all four texture coordinates.
   Implementations must support at least two sets of texture coordinates. The
commands

      void MultiTexCoord{1234}{sifd}(enum texture,T coords)
      void MultiTexCoord{1234}{sifd}v(enum texture,T
        coords)

take the coordinate set to be modified as the texture parameter. texture is a symbolic
constant of the form TEXTUREi, indicating that texture coordinate set i is to be
modified. The constants obey TEXTUREi = TEXTURE0 + i (i is in the range 0 to
k − 1, where k is the implementation-dependent number of texture coordinate sets
defined by MAX_TEXTURE_COORDS).
    The TexCoord commands are exactly equivalent to the corresponding Multi-
TexCoord commands with texture set to TEXTURE0.
    Gets of CURRENT_TEXTURE_COORDS return the texture coordinate set defined
by the value of ACTIVE_TEXTURE.
    Specifying an invalid texture coordinate set for the texture argument of Multi-
TexCoord results in undefined behavior.
    The current normal is set using

      void Normal3{bsifd}( T coords );
      void Normal3{bsifd}v( T coords );

Byte, short, or integer values passed to Normal are converted to floating-point
values as described in equation 2.2 for the corresponding (signed) type.
    The current fog coordinate is set using

      void FogCoord{fd}( T coord );
      void FogCoord{fd}v( T coord );

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.7. VERTEX SPECIFICATION                                                                 28


    There are several ways to set the current color and secondary color. The GL
stores a current single-valued color index, as well as a current four-valued RGBA
color and secondary color. Either the index or the color and secondary color are
significant depending as the GL is in color index mode or RGBA mode. The mode
selection is made when the GL is initialized.
    The commands to set RGBA colors are

      void    Color{34}{bsifd ubusui}( T components );
      void    Color{34}{bsifd ubusui}v( T components );
      void    SecondaryColor3{bsifd ubusui}( T components );
      void    SecondaryColor3{bsifd ubusui}v( T components );

The Color command has two major variants: Color3 and Color4. The four value
versions set all four values. The three value versions set R, G, and B to the provided
values; A is set to 1.0. (The conversion of integer color components (R, G, B, and
A) to floating-point values is discussed in section 2.10.)
     The secondary color has only the three value versions. Secondary A is always
set to 1.0.
     Versions of the Color and SecondaryColor commands that take floating-point
values accept values nominally between 0.0 and 1.0. 0.0 corresponds to the min-
imum while 1.0 corresponds to the maximum (machine dependent) value that a
component may take on in the framebuffer (see section 2.10 on colors and color-
ing). Values outside [0, 1] are not clamped.
     The command

      void Index{sifd ub}( T index );
      void Index{sifd ub}v( T index );

updates the current (single-valued) color index. It takes one argument, the value
to which the current color index should be set. Values outside the (machine-
dependent) representable range of color indices are not clamped.
     Vertex shaders (see section 2.14) can be written to access an array of 4-
component generic vertex attributes in addition to the conventional attributes spec-
ified previously. The first slot of this array is numbered 0, and the size of the array
is specified by the implementation-dependent constant MAX_VERTEX_ATTRIBS.
     Current generic attribute values define generic attributes for a vertex. The cur-
rent values of a generic shader attribute declared as a floating-point scalar, vector,
or matrix may be changed at any time by issuing one of the commands

      void VertexAttrib{1234}{sfd}( uint index, T values );
      void VertexAttrib{123}{sfd}v( uint index, T values );

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.7. VERTEX SPECIFICATION                                                         29


      void VertexAttrib4{bsifd ub us ui}v( uint index, T values );
      void VertexAttrib4Nub( uint index, T values );
      void VertexAttrib4N{bsi ub us ui}v( uint index, T values );

    The VertexAttrib4N* commands specify fixed-point values that are converted
to a normalized [0, 1] or [−1, 1] range as described in equations 2.1 and 2.2, re-
spectively, while the other commands specify values that are converted directly to
the internal floating-point representation.
    The resulting value(s) are loaded into the generic attribute at slot index, whose
components are named x, y, z, and w. The VertexAttrib1* family of commands
sets the x coordinate to the provided single argument while setting y and z to 0 and
w to 1. Similarly, VertexAttrib2* commands set x and y to the specified values,
z to 0 and w to 1; VertexAttrib3* commands set x, y, and z, with w set to 1, and
VertexAttrib4* commands set all four coordinates.
    The VertexAttrib* entry points may also be used to load shader attributes de-
clared as a floating-point matrix. Each column of a matrix takes up one generic
4-component attribute slot out of the MAX_VERTEX_ATTRIBS available slots. Ma-
trices are loaded into these slots in column major order. Matrix columns are loaded
in increasing slot numbers.
    The resulting attribute values are undefined if the base type of the shader at-
tribute at slot index is not floating-point (e.g. is signed or unsigned integer). To
load current values of a generic shader attribute declared as a signed or unsigned
scalar or vector, use the commands

      void VertexAttribI{1234}{i ui}( uint index, T values );
      void VertexAttribI{1234}{i ui}v( uint index, T values );
      void VertexAttribI4{bs ubus}v( uint index, T values );

    These commands specify values that are extended to full signed or unsigned
integers, then loaded into the generic attribute at slot index in the same fashion as
described above.
    The resulting attribute values are undefined if the base type of the shader at-
tribute at slot index is floating-point; if the base type is integer and unsigned in-
teger values are supplied (the VertexAttribI*ui, VertexAttribI*us, and Vertex-
AttribI*ub commands); or if the base type is unsigned integer and signed integer
values are supplied (the VertexAttribI*i, VertexAttribI*s, and VertexAttribI*b
commands)
    The error INVALID_VALUE is generated by VertexAttrib* if index is greater
than or equal to MAX_VERTEX_ATTRIBS.
    Setting generic vertex attribute zero specifies a vertex; the four vertex coordi-
nates are taken from the values of attribute zero. A Vertex2, Vertex3, or Vertex4

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                       30


command is completely equivalent to the corresponding VertexAttrib* command
with an index of zero. Setting any other generic vertex attribute updates the current
values of the attribute. There are no current values for vertex attribute zero.
    There is no aliasing among generic attributes and conventional attributes. In
other words, an application can set all MAX_VERTEX_ATTRIBS generic attributes
and all conventional attributes without fear of one particular attribute overwriting
the value of another attribute.
    The state required to support vertex specification consists of four floating-point
numbers per texture coordinate set to store the current texture coordinates s, t, r,
and q, three floating-point numbers to store the three coordinates of the current
normal, one floating-point number to store the current fog coordinate, four floating-
point values to store the current RGBA color, four floating-point values to store the
current RGBA secondary color, one floating-point value to store the current color
index, and the value of MAX_VERTEX_ATTRIBS − 1 four-component vectors to
store generic vertex attributes.
    There is no notion of a current vertex, so no state is devoted to vertex coor-
dinates or generic attribute zero. The initial texture coordinates are (s, t, r, q) =
(0, 0, 0, 1) for each texture coordinate set. The initial current normal has coor-
dinates (0, 0, 1). The initial fog coordinate is zero. The initial RGBA color is
(R, G, B, A) = (1, 1, 1, 1) and the initial RGBA secondary color is (0, 0, 0, 1).
The initial color index is 1. The initial values for all generic vertex attributes are
(0.0, 0.0, 0.0, 1.0).


2.8    Vertex Arrays
The vertex specification commands described in section 2.7 accept data in almost
any format, but their use requires many command executions to specify even sim-
ple geometry. Vertex data may also be placed into arrays that are stored in the
client’s address space (described here) or in the server’s address space (described
in section 2.9). Blocks of data in these arrays may then be used to specify multiple
geometric primitives through the execution of a single GL command. The client
may specify up to seven plus the values of MAX_TEXTURE_COORDS and MAX_-
VERTEX_ATTRIBS arrays: one each to store vertex coordinates, normals, colors,
secondary colors, color indices, edge flags, fog coordinates, two or more texture
coordinate sets, and MAX_VERTEX_ATTRIBS arrays to store one or more generic
vertex attributes. The commands

      void VertexPointer( int size, enum type, sizei stride,
         void *pointer );


                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                   31


      void NormalPointer( enum type, sizei stride,
         void *pointer );
      void ColorPointer( int size, enum type, sizei stride,
         void *pointer );
      void SecondaryColorPointer( int size, enum type,
         sizei stride, void *pointer );
      void IndexPointer( enum type, sizei stride, void *pointer );
      void EdgeFlagPointer( sizei stride, void *pointer );
      void FogCoordPointer( enum type, sizei stride,
         void *pointer );
      void TexCoordPointer( int size, enum type, sizei stride,
         void *pointer );
      void VertexAttribPointer( uint index, int size, enum type,
         boolean normalized, sizei stride, const
         void *pointer );
      void VertexAttribIPointer( uint index, int size, enum type,
         sizei stride, const void *pointer );

describe the locations and organizations of these arrays. For each command, type
specifies the data type of the values stored in the array. Because edge flags are al-
ways type boolean, EdgeFlagPointer has no type argument. size, when present,
 indicates the number of values per vertex (1, 2, 3, or 4) that are stored in the array.
Because normals are always specified with three values, NormalPointer has no
size argument. Likewise, because color indices and edge flags are always specified
with a single value, IndexPointer and EdgeFlagPointer also have no size argu-
ment. Table 2.4 indicates the allowable values for size and type (when present).
For type the values BYTE, SHORT, INT, FLOAT, HALF_FLOAT, and DOUBLE indi-
cate types byte, short, int, float, half, and double, respectively; and the
values UNSIGNED_BYTE, UNSIGNED_SHORT, and UNSIGNED_INT indicate types
ubyte, ushort, and uint, respectively. The error INVALID_VALUE is gener-
ated if size is specified with a value other than that indicated in the table.
    The index parameter in the VertexAttribPointer and VertexAttribIPointer
commands identifies the generic vertex attribute array being described. The er-
ror INVALID_VALUE is generated if index is greater than or equal to the value of
MAX_VERTEX_ATTRIBS. Generic attribute arrays with integer type arguments can
be handled in one of three ways: converted to float by normalizing to [0, 1] or
[−1, 1] as described in equations 2.1 and 2.2, respectively; converted directly to
float, or left as integers. Data for an array specified by VertexAttribPointer will
be converted to floating-point by normalizing if normalized is TRUE, and converted
directly to floating-point otherwise. Data for an array specified by VertexAttribI-

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                               32




                                        Integer
 Command                      Sizes     Handling     Types
 VertexPointer                2,3,4     cast         short, int, float, half,
                                                     double
 NormalPointer                   3      normalize    byte, short, int, float,
                                                     half, double
 ColorPointer                   3,4     normalize    byte,    ubyte,    short,
                                                     ushort, int, uint, float,
                                                     half, double
 SecondaryColorPointer           3      normalize    byte,    ubyte,    short,
                                                     ushort, int, uint, float,
                                                     half, double
 IndexPointer                    1      cast         ubyte, short, int, float,
                                                     double
 FogCoordPointer                 1      n/a          float, half, double
 TexCoordPointer              1,2,3,4   cast         short, int, float, half,
                                                     double
 EdgeFlagPointer                 1      integer      boolean
 VertexAttribPointer          1,2,3,4   flag         byte,    ubyte,    short,
                                                     ushort, int, uint, float,
                                                     half, double
 VertexAttribIPointer         1,2,3,4   integer      byte,    ubyte,    short,
                                                     ushort, int, uint

Table 2.4: Vertex array sizes (values per vertex) and data types. The “Integer
Handling” column indicates how fixed-point data types are handled: “cast” means
that they are converted to floating-point directly, “normalize” means that they are
converted to floating-point by normalizing to [0, 1] (for unsigned types) or [−1, 1]
(for signed types), “integer” means that they remain as integer values, and “flag”
means that either “cast” or “normalized” applies, depending on the setting of the
normalized flag in VertexAttribPointer.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                        33


Pointer will always be left as integer values; such data are referred to as pure
integers.
     The one, two, three, or four values in an array that correspond to a single vertex
comprise an array element. The values within each array element are stored se-
quentially in memory. If stride is specified as zero, then array elements are stored
sequentially as well. The error INVALID_VALUE is generated if stride is negative.
Otherwise pointers to the ith and (i + 1)st elements of an array differ by stride
basic machine units (typically unsigned bytes), the pointer to the (i + 1)st element
being greater. For each command, pointer specifies the location in memory of the
first value of the first element of the array being specified.
     An individual array is enabled or disabled by calling one of

       void EnableClientState( enum array );
       void DisableClientState( enum array );

with array set to VERTEX_ARRAY, NORMAL_ARRAY, COLOR_ARRAY,
SECONDARY_COLOR_ARRAY, INDEX_ARRAY, EDGE_FLAG_ARRAY, FOG_-
COORD_ARRAY, or TEXTURE_COORD_ARRAY, for the vertex, normal, color,
secondary color, color index, edge flag, fog coordinate, or texture coordinate array,
respectively.
    An individual generic vertex attribute array is enabled or disabled by calling
one of

       void EnableVertexAttribArray( uint index );
       void DisableVertexAttribArray( uint index );

where index identifies the generic vertex attribute array to enable or disable. The
error INVALID_VALUE is generated if index is greater than or equal to MAX_-
VERTEX_ATTRIBS.
    The command

       void ClientActiveTexture( enum texture );

is used to select the vertex array client state parameters to be modified by the Tex-
CoordPointer command and the array affected by EnableClientState and Dis-
ableClientState with parameter TEXTURE_COORD_ARRAY. This command sets the
client state variable CLIENT_ACTIVE_TEXTURE. Each texture coordinate set has
a client state vector which is selected when this command is invoked. This state
vector includes the vertex array state. This call also selects the texture coordinate
set state used for queries of client state.


                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                              34


    Specifying an invalid texture generates the error INVALID_ENUM. Valid values
of texture are the same as for the MultiTexCoord commands described in sec-
tion 2.7.
    The command

      void ArrayElement( int i );

transfers the ith element of every enabled array to the GL. The effect of ArrayEle-
ment(i) is the same as the effect of the command sequence

         if (normal array enabled)
           Normal3[type]v(normal array element i);
         if (color array enabled)
           Color[size][type]v(color array element i);
         if (secondary color array enabled)
           SecondaryColor3[type]v(secondary color array element i);
         if (fog coordinate array enabled)
           FogCoord[type]v(fog coordinate array element i);
         for (j = 0; j < textureUnits; j++) {
           if (texture coordinate set j array enabled)
             MultiTexCoord[size][type]v(TEXTURE0 + j, texture coordinate set j array element i);
         }
         if (color index array enabled)
           Index[type]v(color index array element i);
         if (edge flag array enabled)
           EdgeFlagv(edge flag array element i);
         for (j = 1; j < genericAttributes; j++) {
           if (generic vertex attribute j array enabled) {
             if (generic vertex attribute j array is a pure integer array)
                VertexAttribI[size][type]v(j, generic vertex attribute j array element i);
             else if (generic vertex attribute j array normalization flag is set, and
                   type is not FLOAT or DOUBLE)
                VertexAttrib[size]N[type]v(j, generic vertex attribute j array element i);
             else
                VertexAttrib[size][type]v(j, generic vertex attribute j array element i);
           }
         }
         if (generic vertex attribute array 0 enabled) {
           if (generic vertex attribute 0 array is a pure integer array)
             VertexAttribI[size][type]v(0, generic vertex attribute 0 array element i);


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                 35


           else if (generic vertex attribute 0 array normalization flag is set, and
               type is not FLOAT or DOUBLE)
             VertexAttrib[size]N[type]v(0, generic vertex attribute 0 array element i);
           else
             VertexAttrib[size][type]v(0, generic vertex attribute 0 array element i);
         } else if (vertex array enabled) {
             Vertex[size][type]v(vertex array element i);
         }

where textureUnits and genericAttributes give the number of texture coordinate
sets and generic vertex attributes supported by the implementation, respectively.
”[size]” and ”[type]” correspond to the size and type of the corresponding array.
For generic vertex attributes, it is assumed that a complete set of vertex attribute
commands exists, even though not all such functions are provided by the GL.
    Changes made to array data between the execution of Begin and the corre-
sponding execution of End may affect calls to ArrayElement that are made within
the same Begin/End period in non-sequential ways. That is, a call to ArrayEle-
ment that precedes a change to array data may access the changed data, and a call
that follows a change to array data may access original data.
    Specifying i < 0 results in undefined behavior. Generating the error
INVALID_VALUE is recommended in this case.
    Primitive restarting is enabled or disabled by calling one of the commands

      void Enable( enum target );

and

      void Disable( enum target );

with target PRIMITIVE_RESTART. The command

      void PrimitiveRestartIndex( uint index );

specifies the index of a vertex array element that is treated specially when prim-
itive restarting is enabled. This value is called the primitive restart index. When
ArrayElement is called between an execution of Begin and the corresponding ex-
ecution of End, if i is equal to the primitive restart index, then no vertex data is
derefererenced, and no current vertex state is modified. Instead, it is as if End were
called, followed by a call to Begin where mode is the same as the mode used by
the previous Begin.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                              36


2.8.1    Drawing Commands
   The command
     void DrawArrays( enum mode, int first, sizei count );

constructs a sequence of geometric primitives using elements first through first +
count − 1 of each enabled array. mode specifies what kind of primitives are con-
structed, and accepts the same token values as the mode parameter of the Begin
command. The effect of

          DrawArrays (mode, f irst, count);

is the same as the effect of the command sequence

          if (mode or count is invalid )
            generate appropriate error
          else {
            Begin(mode);
            for (int i = 0; i < count ; i++)
              ArrayElement(f irst+ i);
            End();
          }

with one exception: the current normal coordinate, color, secondary color, color
index, edge flag, fog coordinate, texture coordinates, and generic attribute values
are each indeterminate after execution of DrawArrays, if the corresponding array
is enabled. Current values corresponding to disabled arrays are not modified by the
execution of DrawArrays.
    Specifying f irst < 0 results in undefined behavior. Generating the error
INVALID_VALUE is recommended in this case.
    The command

        void MultiDrawArrays( enum mode, int *first,
           sizei *count, sizei primcount );

   behaves identically to DrawArrays except that primcount separate ranges of
elements are specified instead. It has the same effect as:

          for (i = 0; i < primcount; i++) {
            if (count[i] > 0)
              DrawArrays(mode, f irst[i], count[i]);
          }

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                 37


    The command

      void DrawElements( enum mode, sizei count, enum type,
         void *indices );

constructs a sequence of geometric primitives using the count elements whose in-
dices are stored in indices. type must be one of UNSIGNED_BYTE, UNSIGNED_-
SHORT, or UNSIGNED_INT, indicating that the index values are of GL type
ubyte, ushort, or uint respectively. mode specifies what kind of primitives
are constructed, and accepts the same token values as the mode parameter of the
Begin command. The effect of

         DrawElements (mode, count, type, indices);

is the same as the effect of the command sequence

         if (mode, count, or type is invalid )
           generate appropriate error
         else {
           Begin(mode);
           for (int i = 0; i < count ; i++)
             ArrayElement(indices[i]);
           End();
         }

with one exception: the current normal coordinates, color, secondary color, color
index, edge flag, fog coordinate, texture coordinates, and generic attributes are each
indeterminate after the execution of DrawElements, if the corresponding array is
enabled. Current values corresponding to disabled arrays are not modified by the
execution of DrawElements.
    The command

      void MultiDrawElements( enum mode, sizei *count,
         enum type, void **indices, sizei primcount );

   behaves identically to DrawElements except that primcount separate lists of
elements are specified instead. It has the same effect as:

         for (i = 0; i < primcount; i++) {
           if (count[i]) > 0)
             DrawElements(mode, count[i], type, indices[i]);
         }

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                    38


   The command
      void DrawRangeElements( enum mode, uint start,
         uint end, sizei count, enum type, void *indices );
is a restricted form of DrawElements. mode, count, type, and indices match the
corresponding arguments to DrawElements, with the additional constraint that all
index values identified by indices must lie between start and end inclusive.
    Implementations denote recommended maximum amounts of vertex and index
data, which may be queried by calling GetIntegerv with the symbolic constants
MAX_ELEMENTS_VERTICES and MAX_ELEMENTS_INDICES. If end − start + 1
is greater than the value of MAX_ELEMENTS_VERTICES, or if count is greater than
the value of MAX_ELEMENTS_INDICES, then the call may operate at reduced per-
formance. There is no requirement that all vertices in the range [start, end] be
referenced. However, the implementation may partially process unused vertices,
reducing performance from what could be achieved with an optimal index set.
    The error INVALID_VALUE is generated if end < start. Invalid mode, count,
or type parameters generate the same errors as would the corresponding call to
DrawElements. It is an error for indices to lie outside the range [start, end], but
implementations may not check for this. Such indices will cause implementation-
dependent behavior.
    The internal counter instanceID is a 32-bit integer value which may be read by
a vertex shader as gl_InstanceID, as described in section 2.14.7. The value of
this counter is always zero, except as noted below.
    The command
      void DrawArraysInstanced( enum mode, int first,
        sizei count, sizei primcount );
behaves identically to DrawArrays except that primcount instances of the range
of elements are executed and the value of instanceID advances for each iteration.
It has the same effect as:
         if (mode or count is invalid )
           generate appropriate error
         else {
           for (int i = 0; i < primcount ; i++) {
             instanceID = i;
             DrawArrays(mode, f irst, count);
           }
           instanceID = 0;
         }

                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                     39


    The command

      void DrawElementsInstanced( enum mode, sizei count,
         enum type, const void *indices, sizei primcount );

behaves identically to DrawElements except that primcount instances of the set of
elements are executed, and the value of instanceID advances for each iteration. It
has the same effect as:

         if (mode, count, or type is invalid )
           generate appropriate error
         else {
           for (int i = 0; i < primcount ; i++) {
             instanceID = i;
             DrawElements(mode, count, type, indices);
           }
           instanceID = 0;
         }

    The command

      void InterleavedArrays( enum format, sizei stride,
         void *pointer );

efficiently initializes the six arrays and their enables to one of 14 configurations.
format must be one of 14 symbolic constants: V2F, V3F, C4UB_V2F, C4UB_-
V3F, C3F_V3F, N3F_V3F, C4F_N3F_V3F, T2F_V3F, T4F_V4F, T2F_C4UB_V3F,
T2F_C3F_V3F, T2F_N3F_V3F, T2F_C4F_N3F_V3F, or T4F_C4F_N3F_V4F.
     The effect of

         InterleavedArrays(f ormat, stride, pointer);

    is the same as the effect of the command sequence

         if (f ormat or stride is invalid)
           generate appropriate error
         else {
           int str;
           set et , ec , en , st , sc , sv , tc , pc , pn , pv , and s as a function
              of table 2.5 and the value of f ormat.
           str = stride;
           if (str is zero)

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                           40




 f ormat               et           ec      en     st   sc   sv        tc
 V2F                  False        False   False             2
 V3F                  False        False   False             3
 C4UB_V2F             False        True    False        4    2    UNSIGNED_BYTE
 C4UB_V3F             False        True    False        4    3    UNSIGNED_BYTE
 C3F_V3F              False        True    False        3    3        FLOAT
 N3F_V3F              False        False   True              3
 C4F_N3F_V3F          False        True    True         4    3       FLOAT
 T2F_V3F              True         False   False   2         3
 T4F_V4F              True         False   False   4         4
 T2F_C4UB_V3F         True         True    False   2    4    3    UNSIGNED_BYTE
 T2F_C3F_V3F          True         True    False   2    3    3        FLOAT
 T2F_N3F_V3F          True         False   True    2         3
 T2F_C4F_N3F_V3F      True         True    True    2    4    3       FLOAT
 T4F_C4F_N3F_V4F      True         True    True    4    4    4       FLOAT

 f ormat              pc      pn        pv        s
 V2F                                     0       2f
 V3F                                     0       3f
 C4UB_V2F              0                 c     c + 2f
 C4UB_V3F              0                 c     c + 3f
 C3F_V3F               0                3f       6f
 N3F_V3F                       0        3f       6f
 C4F_N3F_V3F           0      4f        7f       10f
 T2F_V3F                                2f       5f
 T4F_V4F                                4f       8f
 T2F_C4UB_V3F         2f             c + 2f    c + 5f
 T2F_C3F_V3F          2f                5f       8f
 T2F_N3F_V3F                  2f        5f       8f
 T2F_C4F_N3F_V3F      2f      6f        9f       12f
 T4F_C4F_N3F_V4F      4f      8f       11f       15f

Table 2.5: Variables that direct the execution of InterleavedArrays. f is
sizeof(FLOAT). c is 4 times sizeof(UNSIGNED_BYTE), rounded up to
the nearest multiple of f . All pointer arithmetic is performed in units of
sizeof(UNSIGNED_BYTE).




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.8. VERTEX ARRAYS                                                                41


               str = s;
             DisableClientState(EDGE_FLAG_ARRAY);
             DisableClientState(INDEX_ARRAY);
             DisableClientState(SECONDARY_COLOR_ARRAY);
             DisableClientState(FOG_COORD_ARRAY);
             if (et ) {
               EnableClientState(TEXTURE_COORD_ARRAY);
               TexCoordPointer(st , FLOAT, str, pointer);
             } else
               DisableClientState(TEXTURE_COORD_ARRAY);
             if (ec ) {
               EnableClientState(COLOR_ARRAY);
               ColorPointer(sc , tc , str, pointer + pc );
             } else
               DisableClientState(COLOR_ARRAY);
             if (en ) {
               EnableClientState(NORMAL_ARRAY);
               NormalPointer(FLOAT, str, pointer + pn );
             } else
               DisableClientState(NORMAL_ARRAY);
             EnableClientState(VERTEX_ARRAY);
             VertexPointer(sv , FLOAT, str, pointer + pv );
         }

    If the number of supported texture units (the value of MAX_TEXTURE_COORDS)
is m and the number of supported generic vertex attributes (the value of MAX_-
VERTEX_ATTRIBS) is n, then the client state required to implement vertex arrays
consists of an integer for the client active texture unit selector, 7 + m + n boolean
values, 7 + m + n memory pointers, 7 + m + n integer stride values, 7 + m +
n symbolic constants representing array types, 3 + m + n integers representing
values per element, n boolean values indicating normalization, n boolean values
indicating whether the attribute values are pure integers, and an unsigned integer
representing the restart index.
    In the initial state, the client active texture unit selector is TEXTURE0, the
boolean values are each false, the memory pointers are each NULL, the strides are
each zero, the array types are each FLOAT, the integers representing values per el-
ement are each four, the normalized and pure integer flags are each false, and the
restart index is zero.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                               42


2.9    Buffer Objects
Vertex array data (described in section 2.8) are stored in client memory. It is some-
times desirable to store frequently used client data, such as vertex array and pixel
data, in high-performance server memory. GL buffer objects provide a mechanism
that clients can use to allocate, initialize, and render from such memory. The name
space for buffer objects is the unsigned integers, with zero reserved for the GL.
    The command

      void GenBuffers( sizei n, uint *buffers );

returns n previously unused buffer object names in buffers. These names are
marked as used, for the purposes of GenBuffers only, but they acquire buffer state
only when they are first bound with BindBuffer (see below), just as if they were
unused.
    Buffer objects are deleted by calling

      void DeleteBuffers( sizei n, const uint *buffers );

buffers contains n names of buffer objects to be deleted. After a buffer object is
deleted it has no contents, and its name is again unused. Unused names in buffers
are silently ignored, as is the value zero.
    A buffer object is created by binding an unused name to a buffer target. The
binding is effected by calling

      void BindBuffer( enum target, uint buffer );

target must be one of the targets listed in table 2.6. If the buffer object named
buffer has not been previously bound, or has been deleted since the last binding,
the GL creates a new state vector, initialized with a zero-sized memory buffer and
comprising the state values listed in table 2.7.
    Buffer objects created by binding an unused name to any of the valid targets
are formally equivalent, but the GL may make different choices about storage lo-
cation and layout based on the initial binding.
    BindBuffer may also be used to bind an existing buffer object. If the bind is
successful no change is made to the state of the newly bound buffer object, and any
previous binding to target is broken.
    In a deprecated context, BindBuffer fails and an INVALID_OPERATION er-
ror is generated if buffer is not zero or a name returned from a previous call to
GenBuffers, or if such a name has since been deleted with DeleteBuffers.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                               43




 Target name                            Purpose                        Described in section(s)
 ARRAY_BUFFER                           Vertex attributes              2.9.4
 COPY_READ_BUFFER                       Buffer copy source             2.9.3
 COPY_WRITE_BUFFER                      Buffer copy destination        2.9.3
 ELEMENT_ARRAY_BUFFER                   Vertex array indices           2.9.5
 PIXEL_PACK_BUFFER                      Pixel read target              4.3.2, 6.1
 PIXEL_UNPACK_BUFFER                    Texture data source            3.7
 TEXTURE_BUFFER                         Texture data buffer            3.9.4
 TRANSFORM_FEEDBACK_BUFFER              Transform feedback buffer      2.18
 UNIFORM_BUFFER                         Uniform block storage          2.14.4

                     Table 2.6: Buffer object binding targets.




 Name                         Type         Initial Value   Legal Values
 BUFFER_SIZE                  integer            0         any non-negative integer
 BUFFER_USAGE                 enum        STATIC_DRAW      STREAM_DRAW, STREAM_READ,
                                                           STREAM_COPY, STATIC_DRAW,
                                                           STATIC_READ, STATIC_COPY,
                                                           DYNAMIC_DRAW, DYNAMIC_READ,
                                                           DYNAMIC_COPY
 BUFFER_ACCESS                enum         READ_WRITE      READ_ONLY, WRITE_ONLY,
                                                           READ_WRITE
 BUFFER_ACCESS_FLAGS          integer           0          See section 2.9.1
 BUFFER_MAPPED                boolean         FALSE        TRUE, FALSE
 BUFFER_MAP_POINTER           void*            NULL        address
 BUFFER_MAP_OFFSET            integer           0          any non-negative integer
 BUFFER_MAP_LENGTH            integer           0          any non-negative integer

               Table 2.7: Buffer object parameters and their values.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                                     44


    While a buffer object is bound, GL operations on the target to which it is bound
affect the bound buffer object, and queries of the target to which a buffer object is
bound return state from the bound object. Operations on the target also affect any
other bindings of that object.
    If a buffer object is deleted while it is bound, all bindings to that object in
the current context (i.e. in the thread that called DeleteBuffers) are reset to zero.
Bindings to that buffer in other contexts and other threads are not affected, but
attempting to use a deleted buffer in another thread produces undefined results,
including but not limited to possible GL errors and rendering corruption. Using
a deleted buffer in another context or thread may not, however, result in program
termination.
    Initially, each buffer object target is bound to zero. There is no buffer object
corresponding to the name zero, so client attempts to modify or query buffer object
state for a target bound to zero generate an INVALID_OPERATION error.
    The data store of a buffer object is created and initialized by calling

      void BufferData( enum target, sizeiptr size, const
         void *data, enum usage );

with target set to one of the targets listed in table 2.6. size set to the size of the data
store in basic machine units, and data pointing to the source data in client memory.
If data is non-null, then the source data is copied to the buffer object’s data store.
If data is null, then the contents of the buffer object’s data store are undefined.
    usage is specified as one of nine enumerated values, indicating the expected
application usage pattern of the data store. The values are:

STREAM_DRAW The data store contents will be specified once by the application,
      and used at most a few times as the source for GL drawing and image speci-
      fication commands.

STREAM_READ The data store contents will be specified once by reading data from
      the GL, and queried at most a few times by the application.

STREAM_COPY The data store contents will be specified once by reading data from
      the GL, and used at most a few times as the source for GL drawing and image
      specification commands.

STATIC_DRAW The data store contents will be specified once by the application,
      and used many times as the source for GL drawing and image specification
      commands.



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                               45


                    Name                          Value
                    BUFFER_SIZE                   size
                    BUFFER_USAGE                  usage
                    BUFFER_ACCESS                 READ_WRITE
                    BUFFER_ACCESS_FLAGS           0
                    BUFFER_MAPPED                 FALSE
                    BUFFER_MAP_POINTER            NULL
                    BUFFER_MAP_OFFSET             0
                    BUFFER_MAP_LENGTH             0

                       Table 2.8: Buffer object initial state.


STATIC_READ The data store contents will be specified once by reading data from
      the GL, and queried many times by the application.
STATIC_COPY The data store contents will be specified once by reading data from
      the GL, and used many times as the source for GL drawing and image spec-
      ification commands.
DYNAMIC_DRAW The data store contents will be respecified repeatedly by the ap-
      plication, and used many times as the source for GL drawing and image
      specification commands.
DYNAMIC_READ The data store contents will be respecified repeatedly by reading
      data from the GL, and queried many times by the application.
DYNAMIC_COPY The data store contents will be respecified repeatedly by reading
      data from the GL, and used many times as the source for GL drawing and
      image specification commands.
    usage is provided as a performance hint only. The specified usage value does
not constrain the actual usage pattern of the data store.
    BufferData deletes any existing data store, and sets the values of the buffer
object’s state variables as shown in table 2.8.
    Clients must align data elements consistent with the requirements of the client
platform, with an additional base-level requirement that an offset within a buffer to
a datum comprising N basic machine units be a multiple of N .
    If the GL is unable to create a data store of the requested size, the error OUT_-
OF_MEMORY is generated.
    To modify some or all of the data contained in a buffer object’s data store, the
client may use the command

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                                    46


        void BufferSubData( enum target, intptr offset,
           sizeiptr size, const void *data );

with target set to one of the targets listed in table 2.6. offset and size indicate the
range of data in the buffer object that is to be replaced, in terms of basic machine
units. data specifies a region of client memory size basic machine units in length,
containing the data that replace the specified buffer range. An INVALID_VALUE
error is generated if offset or size is less than zero or if offset + size is greater than
the value of BUFFER_SIZE. An INVALID_OPERATION error is generated if any
part of the specified buffer range is mapped with MapBufferRange or MapBuffer
(see section 2.9.1).

2.9.1    Mapping and Unmapping Buffer Data
All or part of the data store of a buffer object may be mapped into the client’s
address space by calling

        void *MapBufferRange( enum target, intptr offset,
           sizeiptr length, bitfield access );

with target set to one of the targets listed in table 2.6. offset and length indicate the
range of data in the buffer object that is to be mapped, in terms of basic machine
units. access is a bitfield containing flags which describe the requested mapping.
These flags are described below.
    If no error occurs, a pointer to the beginning of the mapped range is returned
once all pending operations on that buffer have completed, and may be used to
modify and/or query the corresponding range of the buffer, according to the fol-
lowing flag bits set in access:

    • MAP_READ_BIT indicates that the returned pointer may be used to read
      buffer object data. No GL error is generated if the pointer is used to query
      a mapping which excludes this flag, but the result is undefined and system
      errors (possibly including program termination) may occur.

    • MAP_WRITE_BIT indicates that the returned pointer may be used to modify
      buffer object data. No GL error is generated if the pointer is used to modify
      a mapping which excludes this flag, but the result is undefined and system
      errors (possibly including program termination) may occur.

    Pointer values returned by MapBufferRange may not be passed as parameter
values to GL commands. For example, they may not be used to specify array

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                             47


pointers, or to specify or query pixel or texture image data; such actions produce
undefined results, although implementations may not check for such behavior for
performance reasons.
    Mappings to the data stores of buffer objects may have nonstandard perfor-
mance characteristics. For example, such mappings may be marked as uncacheable
regions of memory, and in such cases reading from them may be very slow. To en-
sure optimal performance, the client should use the mapping in a fashion consistent
with the values of BUFFER_USAGE and access. Using a mapping in a fashion in-
consistent with these values is liable to be multiple orders of magnitude slower
than using normal memory.
    The following optional flag bits in access may be used to modify the mapping:
   • MAP_INVALIDATE_RANGE_BIT indicates that the previous contents of the
     specified range may be discarded. Data within this range are undefined with
     the exception of subsequently written data. No GL error is generated if sub-
     sequent GL operations access unwritten data, but the result is undefined and
     system errors (possibly including program termination) may occur. This flag
     may not be used in combination with MAP_READ_BIT.
   • MAP_INVALIDATE_BUFFER_BIT indicates that the previous contents of the
     entire buffer may be discarded. Data within the entire buffer are undefined
     with the exception of subsequently written data. No GL error is generated if
     subsequent GL operations access unwritten data, but the result is undefined
     and system errors (possibly including program termination) may occur. This
     flag may not be used in combination with MAP_READ_BIT.
   • MAP_FLUSH_EXPLICIT_BIT indicates that one or more discrete subranges
     of the mapping may be modified. When this flag is set, modifications to
     each subrange must be explicitly flushed by calling FlushMappedBuffer-
     Range. No GL error is set if a subrange of the mapping is modified and
     not flushed, but data within the corresponding subrange of the buffer are un-
     defined. This flag may only be used in conjunction with MAP_WRITE_BIT.
     When this option is selected, flushing is strictly limited to regions that are
     explicitly indicated with calls to FlushMappedBufferRange prior to un-
     map; if this option is not selected UnmapBuffer will automatically flush the
     entire mapped range when called.
   • MAP_UNSYNCHRONIZED_BIT indicates that the GL should not attempt to
     synchronize pending operations on the buffer prior to returning from Map-
     BufferRange. No GL error is generated if pending operations which source
     or modify the buffer overlap the mapped region, but the result of such previ-
     ous and any subsequent operations is undefined.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                              48


               Name                         Value
               BUFFER_ACCESS                Depends on access1
               BUFFER_ACCESS_FLAGS          access
               BUFFER_MAPPED                TRUE
               BUFFER_MAP_POINTER           pointer to the data store
               BUFFER_MAP_OFFSET            offset
               BUFFER_MAP_LENGTH            length

Table 2.9: Buffer object state set by MapBufferRange.
1 BUFFER_ACCESS is set to READ_ONLY, WRITE_ONLY, or READ_WRITE if access

& (MAP_READ_BIT|MAP_WRITE_BIT) is respectively MAP_READ_BIT, MAP_-
WRITE_BIT, or MAP_READ_BIT|MAP_WRITE_BIT.



    A successful MapBufferRange sets buffer object state values as shown in ta-
ble 2.9.

Errors
    If an error occurs, MapBufferRange returns a NULL pointer.
    An INVALID_VALUE error is generated if offset or length is negative, if offset +
length is greater than the value of BUFFER_SIZE, or if access has any bits set other
than those defined above.
    An INVALID_OPERATION error is generated for any of the following condi-
tions:

   • The buffer is already in a mapped state.

   • Neither MAP_READ_BIT nor MAP_WRITE_BIT is set.

   • MAP_READ_BIT is set and any of MAP_INVALIDATE_RANGE_BIT, MAP_-
     INVALIDATE_BUFFER_BIT, or MAP_UNSYNCHRONIZED_BIT is set.

   • MAP_FLUSH_EXPLICIT_BIT is set and MAP_WRITE_BIT is not set.

    An OUT_OF_MEMORY error is generated if MapBufferRange fails because
memory for the mapping could not be obtained.
    No error is generated if memory outside the mapped range is modified or
queried, but the result is undefined and system errors (possibly including program
termination) may occur.
    The entire data store of a buffer object can be mapped into the client’s address
space by calling

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                              49


      void *MapBuffer( enum target, enum access );

MapBuffer is equivalent to calling MapBufferRange with the same target, offset
of zero, length equal to the value of BUFFER_SIZE, and the access value passed to
MapBufferRange equal to

   • MAP_READ_BIT, if access is READ_ONLY

   • MAP_WRITE_BIT, if access is WRITE_ONLY

   • MAP_READ_BIT|MAP_WRITE_BIT, if access is READ_WRITE.

   INVALID_ENUM is generated if access is not one of the values described above.
Other errors are generated as described above for MapBufferRange.
    If a buffer is mapped with the MAP_FLUSH_EXPLICIT_BIT flag, modifications
to the mapped range may be indicated by calling

      void FlushMappedBufferRange( enum target, intptr offset,
         sizeiptr length );

with target set to one of the targets listed in table 2.6. offset and length indi-
cate a modified subrange of the mapping, in basic machine units. The specified
subrange to flush is relative to the start of the currently mapped range of buffer.
FlushMappedBufferRange may be called multiple times to indicate distinct sub-
ranges of the mapping which require flushing.

Errors
    An INVALID_VALUE error is generated if offset or length is negative, or if
offset + length exceeds the size of the mapping.
    An INVALID_OPERATION error is generated if zero is bound to target.
    An INVALID_OPERATION error is generated if the buffer bound to target is
not mapped, or is mapped without the MAP_FLUSH_EXPLICIT_BIT flag.

Unmapping Buffers
    After the client has specified the contents of a mapped buffer range, and before
the data in that range are dereferenced by any GL commands, the mapping must be
relinquished by calling
      boolean UnmapBuffer( enum target );




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                                50


with target set to one of the targets listed in table 2.6. Unmapping a mapped buffer
object invalidates the pointer to its data store and sets the object’s BUFFER_-
MAPPED, BUFFER_MAP_POINTER, BUFFER_ACCESS_FLAGS, BUFFER_MAP_-
OFFSET, and BUFFER_MAP_LENGTH state variables to the initial values shown in
table 2.8.
    UnmapBuffer returns TRUE unless data values in the buffer’s data store have
become corrupted during the period that the buffer was mapped. Such corruption
can be the result of a screen resolution change or other window system-dependent
event that causes system heaps such as those for high-performance graphics mem-
ory to be discarded. GL implementations must guarantee that such corruption can
occur only during the periods that a buffer’s data store is mapped. If such corrup-
tion has occurred, UnmapBuffer returns FALSE, and the contents of the buffer’s
data store become undefined.
    If the buffer data store is already in the unmapped state, UnmapBuffer returns
FALSE, and an INVALID_OPERATION error is generated. However, unmapping
that occurs as a side effect of buffer deletion or reinitialization is not an error.

Effects of Mapping Buffers on Other GL Commands
Any GL command that attempts to read data from a buffer object will fail and
generate an INVALID_OPERATION error if the object is mapped at the time the
command is issued.

2.9.2    Effects of Accessing Outside Buffer Bounds
Most, but not all GL commands operating on buffer objects will detect attempts to
read from or write to a location in a bound buffer object at an offset less than zero,
or greater than or equal to the buffer’s size. When such an attempt is detected, a
GL error will be generated. Any command which does not detect these attempts,
and performs such an invalid read or write, has undefined results, and may result
in GL interruption or termination.

2.9.3    Copying Between Buffers
All or part of the data store of a buffer object may be copied to the data store of
another buffer object by calling

        void *CopyBufferSubData( enum readtarget,
           enum writetarget, intptr readoffset, intptr writeoffset,
           sizeiptr size );


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                                51


with readtarget and writetarget each set to one of the targets listed in table 2.6.
While any of these targets may be used, the COPY_READ_BUFFER and COPY_-
WRITE_BUFFER targets are provided specifically for copies, so that they can be
done without affecting other buffer binding targets that may be in use. writeoffset
and size specify the range of data in the buffer object bound to writetarget that is
to be replaced, in terms of basic machine units. readoffset and size specify the
range of data in the buffer object bound to readtarget that is to be copied to the
corresponding region of writetarget.
    An INVALID_VALUE error is generated if any of readoffset, writeoffset, or size
are negative, if readoffset + size exceeds the size of the buffer object bound to
readtarget, or if writeoffset + size exceeds the size of the buffer object bound to
writetarget.
    An INVALID_VALUE error is generated if the same buffer object is bound to
both readtarget and writetarget, and the ranges [readoffset, readoffset+size) and
[writeoffset, writeoffset+size) overlap.
    An INVALID_OPERATION error is generated if zero is bound to readtarget or
writetarget.
    An INVALID_OPERATION error is generated if the buffer objects bound to
either readtarget or writetarget are mapped.

2.9.4   Vertex Arrays in Buffer Objects
Blocks of vertex array data may be stored in buffer objects with the same format
and layout options supported for client-side vertex arrays. However, it is expected
that GL implementations will (at minimum) be optimized for data with all compo-
nents represented as floats, as well as for color data with components represented
as either floats or unsigned bytes. A buffer object binding point is added to the
client state associated with each vertex array type. The commands that specify
the locations and organizations of vertex arrays copy the buffer object name that
is bound to ARRAY_BUFFER to the binding point corresponding to the vertex ar-
ray of the type being specified. For example, the VertexAttribPointer command
copies the value of ARRAY_BUFFER_BINDING (the queriable name of the buffer
binding corresponding to the target ARRAY_BUFFER) to the client state variable
VERTEX_ATTRIB_ARRAY_BUFFER_BINDING for the specified index.
    Rendering commands ArrayElement, DrawArrays, and the other drawing
commands defined in section 2.8.1 operate as previously defined, except that data
for enabled vertex and attrib arrays are sourced from buffers if the array’s buffer
binding is non-zero. When an array is sourced from a buffer object, the pointer
value of that array is used to compute an offset, in basic machine units, into the
data store of the buffer object. This offset is computed by subtracting a null pointer


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.9. BUFFER OBJECTS                                                                 52


from the pointer value, where both pointers are treated as pointers to basic machine
units.
    It is acceptable for vertex or attrib arrays to be sourced from any combination
of client memory and various buffer objects during a single rendering operation.

2.9.5   Array Indices in Buffer Objects
Blocks of array indices may be stored in buffer objects with the same format op-
tions that are supported for client-side index arrays. Initially zero is bound to
ELEMENT_ARRAY_BUFFER, indicating that DrawElements and DrawRangeEle-
ments are to source their indices from arrays passed as their indices parameters,
and that MultiDrawElements is to source its indices from the array of pointers to
arrays passed in as its indices parameter.
    A buffer object is bound to ELEMENT_ARRAY_BUFFER by calling BindBuffer
with target set to ELEMENT_ARRAY_BUFFER, and buffer set to the name of the
buffer object. If no corresponding buffer object exists, one is initialized as defined
in section 2.9.
    While a non-zero buffer object name is bound to ELEMENT_ARRAY_BUFFER,
  DrawElements, DrawRangeElements, and DrawElementsInstanced source
their indices from that buffer object, using their indices parameters as offsets into
the buffer object in the same fashion as described in section 2.9.4. MultiDrawEle-
ments also sources its indices from that buffer object, using its indices parameter
as a pointer to an array of pointers that represent offsets into the buffer object.
    In some cases performance will be optimized by storing indices and array data
in separate buffer objects, and by creating those buffer objects with the correspond-
ing binding points.

2.9.6   Buffer Object State
The state required to support buffer objects consists of binding names for the array
buffer, element buffer, pixel unpack buffer, and pixel pack buffer. Additionally,
each vertex array has an associated binding so there is a buffer object binding for
each of the vertex array, normal array, color array, index array, multiple texture
coordinate arrays, edge flag array, secondary color array, fog coordinate array, and
 vertex attribute arrays. The initial values for all buffer object bindings is zero.
    The state of each buffer object consists of a buffer size in basic machine units, a
usage parameter, an access parameter, a mapped boolean, two integers for the offset
and size of the mapped region, a pointer to the mapped buffer (NULL if unmapped),
and the sized array of basic machine units for the buffer data.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.10. VERTEX ARRAY OBJECTS                                                               53


2.10     Vertex Array Objects
The buffer objects that are to be used by the vertex stage of the GL are collected
together to form a vertex array object. All state related to the definition of data
used by the vertex processor is encapsulated in a vertex array object.
    The command

       void GenVertexArrays( sizei n, uint *arrays );

returns n previous unused vertex array object names in arrays. These names are
marked as used, for the purposes of GenVertexArrays only, but they acquire array
state only when they are first bound, just as if they were unused.
    Vertex array objects are deleted by calling

       void DeleteVertexArrays( sizei n, const uint *arrays );

arrays contains n names of vertex array objects to be deleted. Once a vertex array
object is deleted it has no contents and its name is again unused. If a vertex array
object that is currently bound is deleted, the binding for that object reverts to zero
and the default vertex array becomes current. Unused names in arrays are silently
ignored, as is the value zero.
    A vertex array object is created by binding a name returned by GenVertexAr-
rays with the command

       void BindVertexArray( uint array );

array is the vertex array object name. The resulting vertex array object is a new
state vector, comprising all the state values listed in tables 6.6- 6.9.
     BindVertexArray may also be used to bind an existing vertex array object.
If the bind is successful no change is made to the state of the bound vertex array
object, and any previous binding is broken.
     The currently bound vertex array object is used for all commands which modify
vertex array state, such as VertexAttribPointer and EnableVertexAttribArray;
all commands which draw from vertex arrays, such as DrawArrays and DrawEle-
ments; and all queries of vertex array state (see chapter 6).
     BindVertexArray fails and an INVALID_OPERATION error is generated if ar-
ray is not zero or a name returned from a previous call to GenVertexArrays, or if
such a name has since been deleted with DeleteVertexArrays.
     An INVALID_OPERATION error is generated if any of the *Pointer commands
specifying the location and organization of vertex array data are called while a


                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.11. RECTANGLES                                                                                 54


non-zero vertex array object is bound, zero is bound to the ARRAY_BUFFER buffer
object binding point, and the pointer argument is not NULL2 .


2.11       Rectangles
There is a set of GL commands to support efficient specification of rectangles as
two corner vertices.

       void Rect{sifd}( T x1, T y1, T x2, T y2 );
       void Rect{sifd}v( T v1[2], T v2[2] );

Each command takes either four arguments organized as two consecutive pairs of
(x, y) coordinates, or two pointers to arrays each of which contains an x value
followed by a y value. The effect of the Rect command
           Rect (x1 , y1 , x2 , y2 );
is exactly the same as the following sequence of commands:
           Begin(POLYGON);
             Vertex2(x1 , y1 );
             Vertex2(x2 , y1 );
             Vertex2(x2 , y2 );
             Vertex2(x1 , y2 );
           End();
The appropriate Vertex2 command would be invoked depending on which of the
Rect commands is issued.


2.12       Fixed-Function Vertex Transformations
     This section and the following discussion through section 2.10 describe the
state values and operations necessary for transforming vertex attributes according
to a fixed-functionality method. An alternate programmable method for transform-
ing vertex attributes is described in section 2.14.
     Vertices, normals, and texture coordinates are transformed before their coordi-
nates are used to produce an image in the framebuffer. We begin with a description
of how vertex coordinates are transformed and how this transformation is con-
trolled.
   2
     This error makes it impossible to create a vertex array object containing client array pointers,
while still allowing buffer objects to be unbound.


              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                                            55



                                                                                         Normalized
      Object        Model−View      Eye        Projection      Clip        Perspective     Device
    Coordinates                  Coordinates                Coordinates     Division     Coordinates
                      Matrix                    Matrix




                                                                             Viewport     Window
                                                                          Transformation Coordinates




   Figure 2.6. Vertex transformation sequence.




    Figure 2.6 diagrams the sequence of transformations that are applied to ver-
tices. The vertex coordinates that are presented to the GL are termed object coor-
dinates. The model-view matrix is applied to these coordinates to yield eye coordi-
nates. Then another matrix, called the projection matrix, is applied to eye coordi-
nates to yield clip coordinates. Clip coordinates are further processed as described
in section 2.15.
    Object coordinates, eye coordinates, and clip coordinates are four-dimensional,
consisting of x, y, z, and w coordinates (in that order). The model-view and pro-
jection matrices are thus 4 × 4.                   
                                                    xo
                                                   yo 
    If a vertex in object coordinates is given by 
                                                   zo  and the model-view matrix
                                                       

                                                   wo
is M , then the vertex’s eye coordinates are found as
                                             
                                  xe            xo
                                 ye          yo 
                                  = M  .
                                 ze          zo 
                                  we            wo




                  OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                            56


Similarly, if P is the projection matrix, then the vertex’s clip coordinates are
                                             
                                   xc           xe
                                 yc          ye 
                                  = P  .
                                 zc          ze 
                                  wc            we
2.12.1    Matrices
The projection matrix and model-view matrix are set and modified with a variety
of commands. The affected matrix is determined by the current matrix mode. The
current matrix mode is set with
      void MatrixMode( enum mode );
which takes one of the pre-defined constants TEXTURE, MODELVIEW, COLOR, or
PROJECTION as the argument value. TEXTURE is described later in section 2.12.1,
and COLOR is described in section 3.7.3. If the current matrix mode is MODELVIEW,
then matrix operations apply to the model-view matrix; if PROJECTION, then they
apply to the projection matrix.
    The two basic commands for affecting the current matrix are
      void LoadMatrix{fd}( T m[16] );
      void MultMatrix{fd}( T m[16] );
LoadMatrix takes a pointer to a 4 × 4 matrix stored in column-major order as 16
consecutive floating-point values, i.e. as
                                               
                               a1 a5 a9 a13
                             a2 a6 a10 a14 
                             a3 a7 a11 a15  .
                                               

                               a4 a8 a12 a16
(This differs from the standard row-major C ordering for matrix elements. If the
standard ordering is used, all of the subsequent transformation equations are trans-
posed, and the columns representing vectors become rows.)
     The specified matrix replaces the current matrix with the one pointed to. Mult-
Matrix takes the same type argument as LoadMatrix, but multiplies the current
matrix by the one pointed to and replaces the current matrix with the product. If C
is the current matrix and M is the matrix pointed to by MultMatrix’s argument,
then the resulting current matrix, C , is
                                    C = C · M.
    The commands

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                     57


      void LoadTransposeMatrix{fd}( T m[16] );
      void MultTransposeMatrix{fd}( T m[16] );

take pointers to 4×4 matrices stored in row-major order as 16 consecutive floating-
point values, i.e. as
                                                  
                               a1 a2 a3 a4
                             a5 a6 a7 a8 
                             a9 a10 a11 a12  .
                                                  

                              a13 a14 a15 a16
    The effect of

          LoadTransposeMatrix[fd](m);

is the same as the effect of

          LoadMatrix[fd](mT );

    The effect of

          MultTransposeMatrix[fd](m);

is the same as the effect of

          MultMatrix[fd](mT );

    The command

      void LoadIdentity( void );

effectively calls LoadMatrix with the identity matrix:
                                             
                                 1 0 0 0
                               0 1 0 0
                               0 0 1 0 .
                                             

                                 0 0 0 1
    There are a variety of other commands that manipulate matrices. Rotate,
Translate, Scale, Frustum, and Ortho manipulate the current matrix. Each com-
putes a matrix and then invokes MultMatrix with this matrix. In the case of

      void Rotate{fd}( T θ, T x, T y, T z );



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                      58


θ gives an angle of rotation in degrees; the coordinates of a vector v are given by
v = (x y z)T . The computed matrix is a counter-clockwise rotation about the line
through the origin with the specified axis when that axis is pointing up (i.e. the
right-hand rule determines the sense of the rotation angle). The matrix is thus
                                                
                                               0
                                  R           0
                                                .
                                              0
                                   0 0 0 1
                                 T
Let u = v/||v|| = x      y   z   . If
                                                  
                                 0        −z     y
                             S= z         0    −x 
                                −y        x      0

then
                      R = uuT + cos θ(I − uuT ) + sin θS.
   The arguments to

       void Translate{fd}( T x, T y, T z );

give the coordinates of a translation vector as (x y z)T . The resulting matrix is a
translation by the specified vector:
                                               
                                     1 0 0 x
                                  0 1 0 y 
                                  0 0 1 z  .
                                               

                                     0 0 0 1

       void Scale{fd}( T x, T y, T z );

produces a general scaling along the x-, y-, and z- axes. The corresponding matrix
is                                             
                                   x 0 0 0
                                 0 y 0 0
                                 0 0 z 0 .
                                               

                                   0 0 0 1
   For

       void Frustum( double l, double r, double b, double t,
         double n, double f );

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                          59


the coordinates (l b − n)T and (r t − n)T specify the points on the near clipping
plane that are mapped to the lower left and upper right corners of the window,
respectively (assuming that the eye is located at (0 0 0)T ). f gives the distance
from the eye to the far clipping plane. If either n or f is less than or equal to zero,
l is equal to r, b is equal to t, or n is equal to f , the error INVALID_VALUE results.
The corresponding matrix is
                                                              
                                2n            r+l
                               r−l     0      r−l         0
                              0       2n     t+b
                                      t−b     t−b         0 
                                                          2f n  .
                                                              
                              0       0 − ff +n       −
                             
                                                −n       f −n 
                                 0     0      −1          0

      void Ortho( double l, double r, double b, double t,
         double n, double f );

describes a matrix that produces parallel projection. (l b − n)T and (r t − n)T
specify the points on the near clipping plane that are mapped to the lower left and
upper right corners of the window, respectively. f gives the distance from the eye
to the far clipping plane. If l is equal to r, b is equal to t, or n is equal to f , the
error INVALID_VALUE results. The corresponding matrix is
                                                         
                              2                      r+l
                            r−l      0      0      − r−l
                                     2
                           0
                                   t−b     0      − t+b  
                                                     t−b  .
                                             2       f +n
                           0        0 − f −n      − f −n 
                                                         
                              0      0      0        1

    For each texture coordinate set, a 4 × 4 matrix is applied to the corresponding
texture coordinates. This matrix is applied as
                                                 
                           m1 m5 m9 m13                s
                        m2 m6 m10 m14   t 
                        m3 m7 m11 m15  r ,
                                                 

                           m4 m8 m12 m16               q

where the left matrix is the current texture matrix. The matrix is applied to the
coordinates resulting from texture coordinate generation (which may simply be the
current texture coordinates), and the resulting transformed coordinates become the
texture coordinates associated with a vertex. Setting the matrix mode to TEXTURE
causes the already described matrix operations to apply to the texture matrix.
    The active texture unit selector (see section 3.9) specifies the texture coordi-
nate set accessed by commands involving texture coordinate processing. Such

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                      60


commands include those accessing the current matrix stack (if MATRIX_MODE is
TEXTURE), TexEnv commands controlling point sprite coordinate replacement
(see section 3.4), TexGen (section 2.12.3), Enable/Disable (if any texture co-
ordinate generation enum is selected), as well as queries of the current texture
coordinates and current raster texture coordinates. If the texture coordinate set
number corresponding to the current value of ACTIVE_TEXTURE is greater than
or equal to the implementation-dependent constant MAX_TEXTURE_COORDS, the
error INVALID_OPERATION is generated by any such command.
    There is a stack of matrices for each of matrix modes MODELVIEW,
PROJECTION, and COLOR, and for each texture unit. For MODELVIEW mode, the
stack depth is at least 32 (that is, there is a stack of at least 32 model-view ma-
trices). For the other modes, the depth is at least 2. Texture matrix stacks for all
texture units have the same depth. The current matrix in any mode is the matrix on
the top of the stack for that mode.

      void PushMatrix( void );

pushes the stack down by one, duplicating the current matrix in both the top of the
stack and the entry below it.

      void PopMatrix( void );

pops the top entry off of the stack, replacing the current matrix with the matrix
that was the second entry in the stack. The pushing or popping takes place on the
stack corresponding to the current matrix mode. Popping a matrix off a stack with
only one entry generates the error STACK_UNDERFLOW; pushing a matrix onto a
full stack generates STACK_OVERFLOW.
     When the current matrix mode is TEXTURE, the texture matrix stack of the
active texture unit is pushed or popped.
     The state required to implement transformations consists of a four-valued in-
teger indicating the current matrix mode, one stack of at least two 4 × 4 matrices
for each of COLOR, PROJECTION, and each texture coordinate set, TEXTURE; and
a stack of at least 32 4 × 4 matrices for MODELVIEW. Each matrix stack has an
associated stack pointer. Initially, there is only one matrix on each stack, and all
matrices are set to the identity. The initial matrix mode is MODELVIEW.

2.12.2   Normal Transformation
Finally, we consider how the model-view matrix and transformation state affect
normals. Before use in lighting, normals are transformed to eye coordinates by a


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                    61


matrix derived from the model-view matrix. Rescaling and normalization opera-
tions are performed on the transformed normals to make them unit length prior to
use in lighting. Rescaling and normalization are controlled by calling Enable and
Disable with target equal to RESCALE_NORMAL or NORMALIZE. This requires two
bits of state. The initial state is for normals not to be rescaled or normalized.
    If the model-view matrix is M , then the normal is transformed to eye coordi-
nates by:

                 nx    ny    nz    q     = nx ny nz q · M −1
           
            x
          y 
where, if 
           z  are the associated vertex coordinates, then
              

            w
                          
                          0,
                          
                                             0 1
                                                      w = 0,
                          
                                            « Bx C
                          
                           „
                     q= − n n n B                C                           (2.7)
                                 x    y    z By C
                                              B C
                          
                                             @ A
                          
                          
                                              z
                                                   , w=0
                          
                                       w

    Implementations may choose instead to transform nx ny nz to eye coor-
dinates using

                      nx    ny    nz    = nx ny nz · Mu −1
where Mu is the upper leftmost 3x3 matrix taken from M .
   Rescale multiplies the transformed normals by a scale factor

                       nx    ny    nz        = f nx   ny      nz
If rescaling is disabled, then f = 1. If rescaling is enabled, then f is computed
as (mij denotes the matrix element in row i and column j of M −1 , numbering the
topmost row of the matrix as row 1 and the leftmost column as column 1)
                                           1
                            f=√
                                   m31 + m32 2 + m33 2
                                         2

    Note that if the normals sent to GL were unit length and the model-view matrix
uniformly scales space, then rescale makes the transformed normals unit length.
    Alternatively, an implementation may choose f as
                                               1
                            f=
                                       nx 2 + ny 2 + nz   2



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                         62


recomputing f for each normal. This makes all non-zero length normals unit length
regardless of their input length and the nature of the model-view matrix.
    After rescaling, the final transformed normal used in lighting, nf , is computed
as

                             nf = m nx           ny        nz
If normalization is disabled, then m = 1. Otherwise
                                                 1
                           m=
                                           2          2          2
                                      nx       + ny       + nz
    Because we specify neither the floating-point format nor the means for matrix
inversion, we cannot specify behavior in the case of a poorly-conditioned (nearly
singular) model-view matrix M . In case of an exactly singular matrix, the trans-
formed normal is undefined. If the GL implementation determines that the model-
view matrix is uninvertible, then the entries in the inverted matrix are arbitrary. In
any case, neither normal transformation nor use of the transformed normal may
lead to GL interruption or termination.

2.12.3    Generating Texture Coordinates
Texture coordinates associated with a vertex may either be taken from the current
texture coordinates or generated according to a function dependent on vertex coor-
dinates. The command

      void TexGen{ifd}( enum coord, enum pname, T param );
      void TexGen{ifd}v( enum coord, enum pname, T params );

controls texture coordinate generation. coord must be one of the constants S, T, R,
or Q, indicating that the pertinent coordinate is the s, t, r, or q coordinate, respec-
tively. In the first form of the command, param is a symbolic constant specifying a
single-valued texture generation parameter; in the second form, params is a pointer
to an array of values that specify texture generation parameters. pname must be one
of the three symbolic constants TEXTURE_GEN_MODE, OBJECT_PLANE, or EYE_-
PLANE. If pname is TEXTURE_GEN_MODE, then either params points to or param is
an integer that is one of the symbolic constants OBJECT_LINEAR, EYE_LINEAR,
SPHERE_MAP, REFLECTION_MAP, or NORMAL_MAP.
    If TEXTURE_GEN_MODE indicates OBJECT_LINEAR, then the generation func-
tion for the coordinate indicated by coord is

                         g = p 1 x o + p 2 y o + p 3 z o + p 4 wo .

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.12. FIXED-FUNCTION VERTEX TRANSFORMATIONS                                               63


xo , yo , zo , and wo are the object coordinates of the vertex. p1 , . . . , p4 are specified
by calling TexGen with pname set to OBJECT_PLANE in which case params points
to an array containing p1 , . . . , p4 . There is a distinct group of plane equation co-
efficients for each texture coordinate; coord indicates the coordinate to which the
specified coefficients pertain.
     If TEXTURE_GEN_MODE indicates EYE_LINEAR, then the function is

                           g = p1 xe + p2 ye + p3 ze + p4 we

where
                     p1 p2 p3 p4 = p1 p2 p3 p4 M −1
xe , ye , ze , and we are the eye coordinates of the vertex. p1 , . . . , p4 are set by
calling TexGen with pname set to EYE_PLANE in correspondence with setting the
coefficients in the OBJECT_PLANE case. M is the model-view matrix in effect
when p1 , . . . , p4 are specified. Computed texture coordinates may be inaccurate or
undefined if M is poorly conditioned or singular.
     When used with a suitably constructed texture image, calling TexGen with
TEXTURE_GEN_MODE indicating SPHERE_MAP can simulate the reflected image
of a spherical environment on a polygon. SPHERE_MAP texture coordinates are
generated as follows. Denote the unit vector pointing from the origin to the vertex
(in eye coordinates) by u. Denote the current normal, after transformation to eye
                                             T
coordinates, by nf . Let r = rx ry rz , the reflection vector, be given by

                                 r = u − 2nf T (nf u) ,

and let m = 2 rx2 + ry2 + (rz + 1)2 . Then the value assigned to an s coordinate
(the first TexGen argument value is S) is s = rx /m + 21 ; the value assigned to a t
coordinate is t = ry /m + 12 . Calling TexGen with a coord of either R or Q when
pname indicates SPHERE_MAP generates the error INVALID_ENUM.
    If TEXTURE_GEN_MODE indicates REFLECTION_MAP, compute the reflection
vector r as described for the SPHERE_MAP mode. Then the value assigned to an s
coordinate is s = rx ; the value assigned to a t coordinate is t = ry ; and the value
assigned to an r coordinate is r = rz . Calling TexGen with a coord of Q when
pname indicates REFLECTION_MAP generates the error INVALID_ENUM.
    If TEXTURE_GEN_MODE indicates NORMAL_MAP, compute the normal vector
nf as described in section 2.12.2. Then the value assigned to an s coordinate is
s = nf x ; the value assigned to a t coordinate is t = nf y ; and the value assigned
to an r coordinate is r = nf z (the values nf x , nf y , and nf z are the components
of nf .) Calling TexGen with a coord of Q when pname indicates NORMAL_MAP
generates the error INVALID_ENUM.

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                   64


    A texture coordinate generation function is enabled or disabled using En-
able and Disable with an argument of TEXTURE_GEN_S, TEXTURE_GEN_T,
TEXTURE_GEN_R, or TEXTURE_GEN_Q (each indicates the corresponding texture
coordinate). When enabled, the specified texture coordinate is computed according
to the current EYE_LINEAR, OBJECT_LINEAR or SPHERE_MAP specification, de-
pending on the current setting of TEXTURE_GEN_MODE for that coordinate. When
disabled, subsequent vertices will take the indicated texture coordinate from the
current texture coordinates.
    The state required for texture coordinate generation for each texture unit com-
prises a five-valued integer for each coordinate indicating coordinate generation
mode, and a bit for each coordinate to indicate whether texture coordinate genera-
tion is enabled or disabled. In addition, four coefficients are required for the four
coordinates for each of EYE_LINEAR and OBJECT_LINEAR. The initial state has
the texture generation function disabled for all texture coordinates. The initial val-
ues of pi for s are all 0 except p1 which is one; for t all the pi are zero except p2 ,
which is 1. The values of pi for r and q are all 0. These values of pi apply for both
the EYE_LINEAR and OBJECT_LINEAR versions. Initially all texture generation
modes are EYE_LINEAR.


2.13     Fixed-Function Vertex Lighting and Coloring
    Figures 2.7 and 2.8 diagram the processing of RGBA colors and color indices
before rasterization. Incoming colors arrive in one of several formats. R, G, B, and
A components specified with unsigned and signed integer versions of the Color
command are converted to floating-point as described in equations 2.1 and 2.2,
respectively; As a result of limited precision, some converted values will not
be represented exactly. In color index mode, a single-valued color index is not
mapped.
    Next, lighting, if enabled, produces either a color index or primary and sec-
ondary colors. If lighting is disabled, the current color index or current color (pri-
mary color) and current secondary color are used in further processing. After light-
ing, RGBA colors may be clamped to the range [0, 1] as described in section 2.13.6.
A color index is converted to fixed-point and then its integer portion is masked (see
section 2.13.6). After clamping or masking, a primitive may be flatshaded, indi-
cating that all vertices of the primitive are to have the same colors. Finally, if a
primitive is clipped, then colors (and texture coordinates) must be computed at the




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                        65




     [0,2k−1]       Convert to
                     [0.0,1.0]             Current
                                           RGBA                             Clamp to
                                            Color        Lighting           [0.0, 1.0]
                    Convert to
   [−2k,2k−1]
                    [−1.0,1.0]
       float
                                                      Color
                                                     Clipping


                              Convert to                             Flatshade?
                             fixed−point
                                                     Primitive
                                                     Clipping




  Figure 2.7. Processing of RGBA colors. The heavy dotted lines indicate both pri-
  mary and secondary vertex colors, which are processed in the same fashion. k is the
  minimum required bit width of the integer type representing a color component.




  [0,2n−1]         Convert to
                                      Current
                     float
                                       Color                               Mask to
      float                            Index          Lighting             [0.0, 2n−1]



                                                 Color
                                                Clipping


                         Convert to                                 Flatshade?
                        fixed−point
                                                Primitive
                                                Clipping




  Figure 2.8. Processing of color indices. n is the number of bits in a color index.




               OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                  66


vertices introduced or modified by clipping.
2.13.1    Lighting
GL lighting computes colors for each vertex sent to the GL. This is accomplished
by applying an equation defined by a client-specified lighting model to a collection
of parameters that can include the vertex coordinates, the coordinates of one or
more light sources, the current normal, and parameters defining the characteristics
of the light sources and a current material. The following discussion assumes that
the GL is in RGBA mode. (Color index lighting is described in section 2.13.5.)
    Lighting is turned on or off using the generic Enable or Disable commands
with the symbolic value LIGHTING. If lighting is off, the current color and current
secondary color are assigned to the vertex primary and secondary color, respec-
tively. If lighting is on, colors computed from the current lighting parameters are
assigned to the vertex primary and secondary colors.

Lighting Operation
A lighting parameter is of one of five types: color, position, direction, real, or
boolean. A color parameter consists of four floating-point values, one for each of
R, G, B, and A, in that order. There are no restrictions on the allowable values for
these parameters. A position parameter consists of four floating-point coordinates
(x, y, z, and w) that specify a position in object coordinates (w may be zero,
indicating a point at infinity in the direction given by x, y, and z). A direction
parameter consists of three floating-point coordinates (x, y, and z) that specify a
direction in object coordinates. A real parameter is one floating-point value. The
various values and their types are summarized in table 2.10. The result of a lighting
computation is undefined if a value for a parameter is specified that is outside the
range given for that parameter in the table.
    There are n light sources, indexed by i = 0, . . . , n−1. (n is an implementation-
dependent maximum that must be at least 8.) Note that the default values for dcli
and scli differ for i = 0 and i > 0.
    Before specifying the way that lighting computes colors, we introduce oper-
ators and notation that simplify the expressions involved. If c1 and c2 are col-
ors without alpha where c1 = (r1 , g1 , b1 ) and c2 = (r2 , g2 , b2 ), then define
c1 ∗ c2 = (r1 r2 , g1 g2 , b1 b2 ). Addition of colors is accomplished by addition of
the components. Multiplication of colors by a scalar means multiplying each com-
ponent by that scalar. If d1 and d2 are directions, then define

                           d1    d2 = max{d1 · d2 , 0}.

(Directions are taken to have three coordinates.) If P1 and P2 are (homogeneous,

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                  67


 Parameter      Type         Default Value        Description
 Material Parameters
    acm         color      (0.2, 0.2, 0.2, 1.0)   ambient color of material
    dcm         color      (0.8, 0.8, 0.8, 1.0)   diffuse color of material
    scm         color      (0.0, 0.0, 0.0, 1.0)   specular color of material
    ecm         color      (0.0, 0.0, 0.0, 1.0)   emissive color of material
    srm          real              0.0            specular exponent (range:
                                                  [0.0, 128.0])
      am          real             0.0            ambient color index
      dm          real             1.0            diffuse color index
       sm         real             1.0            specular color index
 Light Source Parameters
      acli       color     (0.0, 0.0, 0.0, 1.0)   ambient intensity of light i
 dcli (i = 0)    color     (1.0, 1.0, 1.0, 1.0)   diffuse intensity of light 0
 dcli (i > 0)    color     (0.0, 0.0, 0.0, 1.0)   diffuse intensity of light i
 scli (i = 0)    color     (1.0, 1.0, 1.0, 1.0)   specular intensity of light 0
 scli (i > 0)    color     (0.0, 0.0, 0.0, 1.0)   specular intensity of light i
     Ppli      position    (0.0, 0.0, 1.0, 0.0)   position of light i
      sdli     direction    (0.0, 0.0, −1.0)      direction of spotlight for light i
      srli        real             0.0            spotlight exponent for light i
                                                  (range: [0.0, 128.0])
     crli         real           180.0            spotlight cutoff angle for light i
                                                  (range: [0.0, 90.0], 180.0)
     k0i          real             1.0            constant attenuation factor for
                                                  light i (range: [0.0, ∞))
     k1i          real             0.0            linear attenuation factor for
                                                  light i (range: [0.0, ∞))
     k2i          real             0.0            quadratic attenuation factor for
                                                  light i (range: [0.0, ∞))
 Lighting Model Parameters
    acs         color    (0.2, 0.2, 0.2, 1.0)     ambient color of scene
     vbs      boolean          FALSE              viewer assumed to be at
                                                  (0, 0, 0) in eye coordinates
                                                  (TRUE) or (0, 0, ∞) (FALSE)
     ces         enum      SINGLE_COLOR           controls computation of colors
     tbs        boolean        FALSE              use two-sided lighting mode

Table 2.10: Summary of lighting parameters. The range of individual color com-
ponents is (−∞, +∞).


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                    68

                                         −−−→
with four coordinates) points then let P1 P2 be the unit vector that points from P1
to P2 . Note that if P2 has a zero w coordinate and P1 has non-zero w coordinate,
      −−−→
then P1 P2 is the unit vector corresponding to the direction specified by the x, y,
and z coordinates of P2 ; if P1 has a zero w coordinate and P2 has a non-zero w
                  −−−→
coordinate then P1 P2 is the unit vector that is the negative of that corresponding
to the direction specified by P1 . If both P1 and P2 have zero w coordinates, then
−−−→
P1 P2 is the unit vector obtained by normalizing the direction corresponding to
P2 − P1 .
                                              ˆ be the unit vector in d’s direction. Let
     If d is an arbitrary direction, then let d
  P1 P2 be the distance between P1 and P2 . Finally, let V be the point corre-
sponding to the vertex being lit, and n be the corresponding normal. Let Pe be the
eyepoint ((0, 0, 0, 1) in eye coordinates).
     Lighting produces two colors at a vertex: a primary color cpri and a secondary
color csec . The values of cpri and csec depend on the light model color control, ces .
If ces = SINGLE_COLOR, then the equations to compute cpri and csec are


              cpri = ecm
                     + acm ∗ acs
                          n−1
                     +     (atti )(spoti ) [acm ∗ acli
                                                −−→
                          i=0        + (n VPpli )dcm ∗ dcli
                                     + (fi )(n h     ˆ i )srm scm ∗ scli ]
              csec   = (0, 0, 0, 1)

    If ces = SEPARATE_SPECULAR_COLOR, then


               cpri = ecm
                      + acm ∗ acs
                          n−1
                      +        (atti )(spoti ) [acm ∗ acli
                                                    −−→
                           i=0           + (n VPpli )dcm ∗ dcli ]
                          n−1
               csec =            (atti )(spoti )(fi )(n   ˆ i )srm scm ∗ scli
                                                          h
                           i=0




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                      69


   where
                          −−→
                   1, n VPpli = 0,
      fi =                                                                          (2.8)
                   0, otherwise,



                   −−→     −−→
                   VPpli + VPe ,              vbs = TRUE,
      hi =         −−→                  T                                           (2.9)
                   VPpli + 0 0 1            , vbs = FALSE,



                                  1
               
                                                         2,   if Ppli ’s w = 0,
    atti =         k0i + k1i VPpli + k2i VPpli                                     (2.10)
               
                                     1.0,                      otherwise.


                −−−→                                     −−−→
                (Ppli V
                             ˆsdli )srli , crli = 180.0, Ppli V   ˆsdli ≥ cos(crli ),
                                                          −−−→
   spoti =                 0.0,             crli = 180.0, Ppli V                    (2.11)
                                                                   ˆsdli < cos(crli ),
               
                          1.0,             crli = 180.0.

All computations are carried out in eye coordinates.
    The value of A produced by lighting is the alpha value associated with dcm .
A is always associated with the primary color cpri ; the alpha component of csec is
always 1.
    Results of lighting are undefined if the we coordinate (w in eye coordinates) of
V is zero.
    Lighting may operate in two-sided mode (tbs = TRUE), in which a front color
is computed with one set of material parameters (the front material) and a back
color is computed with a second set of material parameters (the back material).
This second computation replaces n with −n. If tbs = FALSE, then the back color
and front color are both assigned the color computed using the front material with
n.
    Additionally, vertex shaders can operate in two-sided color mode. When a ver-
tex shader is active, front and back colors can be computed by the vertex shader and
written to the gl_FrontColor, gl_BackColor, gl_FrontSecondaryColor
and gl_BackSecondaryColor outputs. If VERTEX_PROGRAM_TWO_SIDE is en-
abled, the GL chooses between front and back colors, as described below. Other-
wise, the front color output is always selected. Two-sided color mode is enabled


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                    70


and disabled by calling Enable or Disable with the symbolic value VERTEX_-
PROGRAM_TWO_SIDE.
    The selection between back and front colors depends on the primitive of which
the vertex being lit is a part. If the primitive is a point or a line segment, the front
color is always selected. If it is a polygon, then the selection is performed based
on the sign of the (clipped or unclipped) polygon’s area a computed in window
coordinates, as described in equation 3.8 of section 3.6.1. If the sign of a (including
the possible reversal of this sign as indicated by the last call to FrontFace) is
positive, the color of each vertex of the polygon becomes the front color computed
for that vertex; otherwise the back color is selected.

2.13.2    Lighting Parameter Specification
Lighting parameters are divided into three categories: material parameters, light
source parameters, and lighting model parameters (see table 2.10). Sets of lighting
parameters are specified with

      void    Material{if}( enum face, enum pname, T param );
      void    Material{if}v( enum face, enum pname, T params );
      void    Light{if}( enum light, enum pname, T param );
      void    Light{if}v( enum light, enum pname, T params );
      void    LightModel{if}( enum pname, T param );
      void    LightModel{if}v( enum pname, T params );

pname is a symbolic constant indicating which parameter is to be set (see ta-
ble 2.11). In the vector versions of the commands, params is a pointer to a group
of values to which to set the indicated parameter. The number of values pointed to
depends on the parameter being set. In the non-vector versions, param is a value
to which to set a single-valued parameter. (If param corresponds to a multi-valued
parameter, the error INVALID_ENUM results.) For the Material command, face
must be one of FRONT, BACK, or FRONT_AND_BACK, indicating that the property
name of the front or back material, or both, respectively, should be set. In the case
of Light, light is a symbolic constant of the form LIGHTi, indicating that light i is
to have the specified parameter set. The constants obey LIGHTi = LIGHT0 + i.
    Table 2.11 gives, for each of the three parameter groups, the correspondence
between the pre-defined constant names and their names in the lighting equations,
along with the number of values that must be specified with each. Color param-
eters specified with Material and Light are converted to floating-point values (if
specified as integers) as described in equation 2.2. The error INVALID_VALUE
occurs if a specified lighting parameter lies outside the allowable range given in


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                71


table 2.10. (The symbol “∞” indicates the maximum representable magnitude for
the indicated type.)
    Material properties can be changed inside a Begin/End pair by calling Ma-
terial. However, when a vertex shader is active such property changes are not
guaranteed to update material parameters, defined in table 2.11, until the following
End command.
    The current model-view matrix is applied to the position parameter indicated
with Light for a particular light source when that position is specified. These
transformed values are the values used in the lighting equation.
    The spotlight direction is transformed when it is specified using only the upper
leftmost 3x3 portion of the model-view matrix. That is, if Mu is the upper left 3x3
matrix taken from the current model-view matrix M , then the spotlight direction
                                        
                                         dx
                                       dy 
                                         dz
is transformed to                       
                               dx         dx
                              dy  = Mu dy  .
                               dz         dz
   An individual light is enabled or disabled by calling Enable or Disable with the
symbolic value LIGHTi (i is in the range 0 to n − 1, where n is the implementation-
dependent number of lights). If light i is disabled, the ith term in the lighting
equation is effectively removed from the summation.

2.13.3   ColorMaterial
It is possible to attach one or more material properties to the current color, so
that they continuously track its component values. This behavior is enabled and
disabled by calling Enable or Disable with the symbolic value COLOR_MATERIAL.
     The command that controls which of these modes is selected is
      void ColorMaterial( enum face, enum mode );
face is one of FRONT, BACK, or FRONT_AND_BACK, indicating whether the front
material, back material, or both are affected by the current color. mode is one
of EMISSION, AMBIENT, DIFFUSE, SPECULAR, or AMBIENT_AND_DIFFUSE and
specifies which material property or properties track the current color. If mode
is EMISSION, AMBIENT, DIFFUSE, or SPECULAR, then the value of ecm , acm ,
dcm or scm , respectively, will track the current color. If mode is AMBIENT_AND_-
DIFFUSE, both acm and dcm track the current color. The replacements made to


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                        72




      Parameter                 Name                 Number of values
     Material Parameters (Material)
         acm                   AMBIENT                       4
         dcm                   DIFFUSE                       4
      acm , dcm         AMBIENT_AND_DIFFUSE                  4
         scm                  SPECULAR                       4
         ecm                  EMISSION                       4
         srm                  SHININESS                      1
     am , dm , sm          COLOR_INDEXES                     3
     Light Source Parameters (Light)
         acli                  AMBIENT                       4
         dcli                  DIFFUSE                       4
          scli                SPECULAR                       4
         Ppli                 POSITION                       4
         sdli              SPOT_DIRECTION                    3
         srli              SPOT_EXPONENT                     1
          crli              SPOT_CUTOFF                      1
          k0           CONSTANT_ATTENUATION                  1
          k1            LINEAR_ATTENUATION                   1
          k2          QUADRATIC_ATTENUATION                  1
     Lighting Model Parameters (LightModel)
          acs           LIGHT_MODEL_AMBIENT                  4
          vbs       LIGHT_MODEL_LOCAL_VIEWER                 1
          tbs          LIGHT_MODEL_TWO_SIDE                  1
          ces      LIGHT_MODEL_COLOR_CONTROL                 1


Table 2.11: Correspondence of lighting parameter symbols to names. AMBIENT_-
AND_DIFFUSE is used to set acm and dcm to the same value.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                                                            73




                         Current
  Color*()                                                     To subsequent vertex operations
                         Color



                                                          Up while ColorMaterial face is FRONT or FRONT_AND_BACK,
                                                          and ColorMaterial mode is AMBIENT or AMBIENT_AND_DIFFUSE,
                                                          and ColorMaterial is enabled. Down otherwise.

                                                                        Front Ambient
                                                                                                     To lighting equations
  Material*(FRONT,AMBIENT)                                              Color


                                                          Up while ColorMaterial face is FRONT or FRONT_AND_BACK,
                                                          and ColorMaterial mode is DIFFUSE or AMBIENT_AND_DIFFUSE,
                                                          and ColorMaterial is enabled. Down otherwise.

                                                                        Front Diffuse
                                                                                                     To lighting equations
  Material*(FRONT,DIFFUSE)                                              Color


                                                          Up while ColorMaterial face is FRONT or FRONT_AND_BACK,
                                                          and ColorMaterial mode is SPECULAR, and ColorMaterial is
                                                          enabled. Down otherwise.

                                                                        Front Specular
                                                                                                     To lighting equations
  Material*(FRONT,SPECULAR)                                             Color


                                                          Up while ColorMaterial face is FRONT or FRONT_AND_BACK,
                                                          and ColorMaterial mode is EMISSION, and ColorMaterial is
                                                          enabled. Down otherwise.

                                                                        Front Emission
                                                                                                     To lighting equations
  Material*(FRONT,EMISSION)                                             Color




                                   State values flow along this path only when a command is issued

                                   State values flow continuously along this path




  Figure 2.9. ColorMaterial operation. Material properties are continuously up-
  dated from the current color while ColorMaterial is enabled and has the appro-
  priate mode. Only the front material properties are included in this figure. The
  back material properties are treated identically, except that face must be BACK or
  FRONT_AND_BACK.




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                    74


material properties are permanent; the replaced values remain until changed by
either sending a new color or by setting a new material value when ColorMaterial
is not currently enabled to override that particular value. When COLOR_MATERIAL
is enabled, the indicated parameter or parameters always track the current color.
For instance, calling

      ColorMaterial(FRONT, AMBIENT)

while COLOR_MATERIAL is enabled sets the front material acm to the value of the
current color.
    Material properties can be changed inside a Begin/End pair indirectly by en-
abling ColorMaterial mode and making Color calls. However, when a vertex
shader is active such property changes are not guaranteed to update material pa-
rameters, defined in table 2.11, until the following End command.

2.13.4    Lighting State
The state required for lighting consists of all of the lighting parameters (front and
back material parameters, lighting model parameters, and at least 8 sets of light pa-
rameters), a bit indicating whether a back color distinct from the front color should
be computed, at least 8 bits to indicate which lights are enabled, a five-valued vari-
able indicating the current ColorMaterial mode, a bit indicating whether or not
COLOR_MATERIAL is enabled, and a single bit to indicate whether lighting is en-
abled or disabled. In the initial state, all lighting parameters have their default val-
ues. Back color evaluation does not take place, ColorMaterial is FRONT_AND_-
BACK and AMBIENT_AND_DIFFUSE, and both lighting and COLOR_MATERIAL are
disabled.

2.13.5    Color Index Lighting
A simplified lighting computation applies in color index mode that uses many of
the parameters controlling RGBA lighting, but none of the RGBA material param-
eters. First, the RGBA diffuse and specular intensities of light i (dcli and scli ,
respectively) determine color index diffuse and specular light intensities, dli and
sli from
                dli = (.30)R(dcli ) + (.59)G(dcli ) + (.11)B(dcli )
and
                 sli = (.30)R(scli ) + (.59)G(scli ) + (.11)B(scli ).
R(x) indicates the R component of the color x and similarly for G(x) and B(x).



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.13. FIXED-FUNCTION VERTEX LIGHTING AND COLORING                                   75


    Next, let
                           n
                     s=          (atti )(spoti )(sli )(fi )(n   ˆ i )srm
                                                                h
                           i=0

where atti and spoti are given by equations 2.10 and 2.11, respectively, and fi and
ˆ i are given by equations 2.8 and 2.9, respectively. Let s = min{s, 1}. Finally,
h
let
                           n
                                                      −−→
                     d=       (atti )(spoti )(dli )(n VPpli ).
                            i=0

Then color index lighting produces a value c, given by

                  c = am + d(1 − s )(dm − am ) + s (sm − am ).

The final color index is
                                     c = min{c, sm }.
The values am , dm and sm are material properties described in tables 2.10 and 2.11.
Any ambient light intensities are incorporated into am . As with RGBA lighting,
disabled lights cause the corresponding terms from the summations to be omitted.
The interpretation of tbs and the calculation of front and back colors is carried out
as has already been described for RGBA lighting.
     The values am , dm , and sm are set with Material using a pname of COLOR_-
INDEXES. Their initial values are 0, 1, and 1, respectively. The additional state
consists of three floating-point values. These values have no effect on RGBA light-
ing.

2.13.6    Clamping or Masking
When the GL is in RGBA mode and vertex color clamping is enabled, all com-
ponents of both primary and secondary colors are clamped to the range [0, 1] af-
ter lighting. If color clamping is disabled, the primary and secondary colors are
unmodified. Vertex color clamping is controlled by calling ClampColor, as de-
scribed in section 3.8, with a target of CLAMP_VERTEX_COLOR.
     For a color index, the index is first converted to fixed-point with an unspecified
number of bits to the right of the binary point; the nearest fixed-point value is
selected. Then, the bits to the right of the binary point are left alone while the
integer portion is masked (bitwise ANDed) with 2n − 1, where n is the number of
bits in a color in the color index buffer (buffers are discussed in chapter 4).
     The state required for vertex color clamping is a three-valued integer, initially
set to TRUE.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                  76


                     Primitive type of polygon i            Vertex
                     single polygon (i ≡ 1)                    1
                     triangle strip                          i+2
                     triangle fan                            i+2
                     independent triangle                     3i
                     quad strip                             2i + 2
                     independent quad                         4i


Table 2.12: Polygon flatshading color selection. The colors used for flatshading
the ith polygon generated by the indicated Begin/End type are derived from the
current color (if lighting is disabled) in effect when the indicated vertex is specified.
If lighting is enabled, the colors are produced by lighting the indicated vertex.
Vertices are numbered 1 through n, where n is the number of vertices between the
Begin/End pair.


2.13.7    Flatshading
A primitive may be flatshaded, meaning that all vertices of the primitive are as-
signed the same color index or the same primary and secondary colors. These
colors are the colors of the vertex that spawned the primitive. For a point, these
are the colors associated with the point. For a line segment, they are the colors of
the second (final) vertex of the segment. For a polygon, they come from a selected
vertex depending on how the polygon was generated. Table 2.12 summarizes the
possibilities.
    Flatshading is controlled by

       void ShadeModel( enum mode );

mode value must be either of the symbolic constants SMOOTH or FLAT. If mode is
SMOOTH (the initial state), vertex colors are treated individually. If mode is FLAT,
flatshading is turned on. ShadeModel thus requires one bit of state.
     If a vertex shader is active, the flat shading control applies to the built-in vary-
ing variables gl_FrontColor, gl_BackColor, gl_FrontSecondaryColor
and gl_BackSecondaryColor. Non-color varying variables can be specified
as being flat-shaded via the flat qualifier, as described in section 4.3.6 of the
OpenGL Shading Language Specification.


2.14     Vertex Shaders

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             77


The sequence of operations described in sections 2.15 through 2.10 is a fixed-
function method for processing vertex data. Applications can also use vertex
shaders to describe the operations that occur on vertex values and their associ-
ated data.
    A vertex shader is an array of strings containing source code for the operations
that are meant to occur on each vertex that is processed. The language used for
vertex shaders is described in the OpenGL Shading Language Specification.
    To use a vertex shader, shader source code is first loaded into a shader ob-
ject and then compiled. One or more vertex shader objects are then attached to
a program object. A program object is then linked, which generates executable
code from all the compiled shader objects attached to the program. When a linked
program object is used as the current program object, the executable code for the
vertex shaders it contains is used to process vertices.
    In addition to vertex shaders, fragment shaders can be created, compiled, and
linked into program objects. Fragment shaders affect the processing of fragments
during rasterization, and are described in section 3.12. A single program object
can contain both vertex and fragment shaders.
    When the program object currently in use includes a vertex shader, its vertex
shader is considered active and is used to process vertices. If the program object
has no vertex shader, or no program object is currently in use, the fixed-function
method for processing vertices is used instead.
    A vertex shader can reference a number of variables as it executes. Vertex
attributes are the per-vertex values specified in section 2.7. Uniforms are per-
program variables that are constant during program execution. Samplers are a
special form of uniform used for texturing (section 3.9). Varying variables hold
the results of vertex shader execution that are used later in the pipeline. Each of
these variable types is described in more detail below.

2.14.1   Shader Objects
The source code that makes up a program that gets executed by one of the pro-
grammable stages is encapsulated in one or more shader objects.
     The name space for shader objects is the unsigned integers, with zero reserved
for the GL. This name space is shared with program objects. The following sections
define commands that operate on shader and program objects by name. Commands
that accept shader or program object names will generate the error INVALID_-
VALUE if the provided name is not the name of either a shader or program object
and INVALID_OPERATION if the provided name identifies an object that is not the
expected type.
     To create a shader object, use the command


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                               78


      uint CreateShader( enum type );

The shader object is empty when it is created. The type argument specifies the type
of shader object to be created. For vertex shaders, type must be VERTEX_SHADER.
A non-zero name that can be used to reference the shader object is returned. If an
error occurs, zero will be returned.
    The command

      void ShaderSource( uint shader, sizei count, const
         char **string, const int *length );

loads source code into the shader object named shader. string is an array of count
pointers to optionally null-terminated character strings that make up the source
code. The length argument is an array with the number of chars in each string (the
string length). If an element in length is negative, its accompanying string is null-
terminated. If length is NULL, all strings in the string argument are considered null-
terminated. The ShaderSource command sets the source code for the shader to
the text strings in the string array. If shader previously had source code loaded into
it, the existing source code is completely replaced. Any length passed in excludes
the null terminator in its count.
     The strings that are loaded into a shader object are expected to form the source
code for a valid shader as defined in the OpenGL Shading Language Specification.
     Once the source code for a shader has been loaded, a shader object can be
compiled with the command

      void CompileShader( uint shader );

Each shader object has a boolean status, COMPILE_STATUS, that is modified as
a result of compilation. This status can be queried with GetShaderiv (see sec-
tion 6.1.15). This status will be set to TRUE if shader was compiled without errors
and is ready for use, and FALSE otherwise. Compilation can fail for a variety of
reasons as listed in the OpenGL Shading Language Specification. If Compile-
Shader failed, any information about a previous compile is lost. Thus a failed
compile does not restore the old state of shader.
    Changing the source code of a shader object with ShaderSource does not
change its compile status or the compiled shader code.
    Each shader object has an information log, which is a text string that is over-
written as a result of compilation. This information log can be queried with Get-
ShaderInfoLog to obtain more information about the compilation attempt (see
section 6.1.15).
    Shader objects can be deleted with the command

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                            79


      void DeleteShader( uint shader );

If shader is not attached to any program object, it is deleted immediately. Oth-
erwise, shader is flagged for deletion and will be deleted when it is no longer
attached to any program object. If an object is flagged for deletion, its boolean
status bit DELETE_STATUS is set to true. The value of DELETE_STATUS can be
queried with GetShaderiv (see section 6.1.15). DeleteShader will silently ignore
the value zero.

2.14.2   Program Objects
The shader objects that are to be used by the programmable stages of the GL are
collected together to form a program object. The programs that are executed by
these programmable stages are called executables. All information necessary for
defining an executable is encapsulated in a program object. A program object is
created with the command

      uint CreateProgram( void );

Program objects are empty when they are created. A non-zero name that can be
used to reference the program object is returned. If an error occurs, 0 will be
returned.
    To attach a shader object to a program object, use the command

      void AttachShader( uint program, uint shader );

The error INVALID_OPERATION is generated if shader is already attached to pro-
gram.
    Shader objects may be attached to program objects before source code has
been loaded into the shader object, or before the shader object has been compiled.
Multiple shader objects of the same type may be attached to a single program
object, and a single shader object may be attached to more than one program object.
    To detach a shader object from a program object, use the command

      void DetachShader( uint program, uint shader );

The error INVALID_OPERATION is generated if shader is not attached to program.
If shader has been flagged for deletion and is not attached to any other program
object, it is deleted.
    In order to use the shader objects contained in a program object, the program
object must be linked. The command

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                80


      void LinkProgram( uint program );

will link the program object named program. Each program object has a boolean
status, LINK_STATUS, that is modified as a result of linking. This status can be
queried with GetProgramiv (see section 6.1.15). This status will be set to TRUE if
a valid executable is created, and FALSE otherwise. Linking can fail for a variety
of reasons as specified in the OpenGL Shading Language Specification. Linking
will also fail if one or more of the shader objects, attached to program are not
compiled successfully, or if more active uniform or active sampler variables are
used in program than allowed (see section 2.14.5). If LinkProgram failed, any
information about a previous link of that program object is lost. Thus, a failed link
does not restore the old state of program.
    Each program object has an information log that is overwritten as a result of a
link operation. This information log can be queried with GetProgramInfoLog to
obtain more information about the link operation or the validation information (see
section 6.1.15).
    If a valid executable is created, it can be made part of the current rendering
state with the command

      void UseProgram( uint program );

This command will install the executable code as part of current rendering state if
the program object program contains valid executable code, i.e. has been linked
successfully. If UseProgram is called with program set to 0, it is as if the GL
had no programmable stages and the fixed-function paths will be used instead.
If program has not been successfully linked, the error INVALID_OPERATION is
generated and the current rendering state is not modified.
    While a program object is in use, applications are free to modify attached
shader objects, compile attached shader objects, attach additional shader objects,
and detach shader objects. These operations do not affect the link status or exe-
cutable code of the program object.
    If the program object that is in use is re-linked successfully, the LinkProgram
command will install the generated executable code as part of the current rendering
state if the specified program object was already in use as a result of a previous call
to UseProgram.
    If that program object that is in use is re-linked unsuccessfully, the link status
will be set to FALSE, but existing executable and associated state will remain part
of the current rendering state until a subsequent call to UseProgram removes it
from use. After such a program is removed from use, it can not be made part of the
current rendering state until it is successfully re-linked.
    Program objects can be deleted with the command

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                  81


      void DeleteProgram( uint program );

If program is not the current program for any GL context, it is deleted immediately.
Otherwise, program is flagged for deletion and will be deleted when it is no longer
the current program for any context. When a program object is deleted, all shader
objects attached to it are detached. DeleteProgram will silently ignore the value
zero.

2.14.3    Vertex Attributes
Vertex shaders can access built-in vertex attribute variables corresponding to the
per-vertex state set by commands such as Vertex, Normal, and Color. Vertex
shaders can also define named attribute variables, which are bound to the generic
vertex attributes that are set by VertexAttrib*. This binding can be specified by
the application before the program is linked, or automatically assigned by the GL
when the program is linked.
     When an attribute variable declared as a float, vec2, vec3 or vec4 is bound
to a generic attribute index i, its value(s) are taken from the x, (x, y), (x, y, z), or
(x, y, z, w) components, respectively, of the generic attribute i. When an attribute
variable is declared as a mat2, mat3x2 or mat4x2, its matrix columns are taken
from the (x, y) components of generic attributes i and i + 1 (mat2), from attributes
i through i + 2 (mat3x2), or from attributes i through i + 3 (mat4x2). When an
attribute variable is declared as a mat2x3, mat3 or mat4x3, its matrix columns
are taken from the (x, y, z) components of generic attributes i and i + 1 (mat2x3),
from attributes i through i + 2 (mat3), or from attributes i through i + 3 (mat4x3).
When an attribute variable is declared as a mat2x4, mat3x4 or mat4, its matrix
columns are taken from the (x, y, z, w) components of generic attributes i and i+1
(mat2x4), from attributes i through i + 2 (mat3x4), or from attributes i through
i + 3 (mat4).
     An attribute variable (either conventional or generic) is considered active if it is
determined by the compiler and linker that the attribute may be accessed when the
shader is executed. Attribute variables that are declared in a vertex shader but never
used will not count against the limit. In cases where the compiler and linker cannot
make a conclusive determination, an attribute will be considered active. A program
object will fail to link if the sum of the active generic and active conventional
attributes exceeds MAX_VERTEX_ATTRIBS.
     To determine the set of active vertex attributes used by a program, and to de-
termine their types, use the command:

      void GetActiveAttrib( uint program, uint index,


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              82


          sizei bufSize, sizei *length, int *size, enum *type,
          char *name );

This command provides information about the attribute selected by index. An in-
dex of 0 selects the first active attribute, and an index of ACTIVE_ATTRIBUTES − 1
selects the last active attribute. The value of ACTIVE_ATTRIBUTES can be queried
with GetProgramiv (see section 6.1.15). If index is greater than or equal to
ACTIVE_ATTRIBUTES, the error INVALID_VALUE is generated. Note that index
simply identifies a member in a list of active attributes, and has no relation to the
generic attribute that the corresponding variable is bound to.
     The parameter program is the name of a program object for which the com-
mand LinkProgram has been issued in the past. It is not necessary for program to
have been linked successfully. The link could have failed because the number of
active attributes exceeded the limit.
     The name of the selected attribute is returned as a null-terminated string in
name. The actual number of characters written into name, excluding the null termi-
nator, is returned in length. If length is NULL, no length is returned. The maximum
number of characters that may be written into name, including the null termina-
tor, is specified by bufSize. The returned attribute name can be the name of a
generic attribute or a conventional attribute (which begin with the prefix "gl_",
see the OpenGL Shading Language specification for a complete list). The length
of the longest attribute name in program is given by ACTIVE_ATTRIBUTE_MAX_-
LENGTH, which can be queried with GetProgramiv (see section 6.1.15).
     For the selected attribute, the type of the attribute is returned into type.
The size of the attribute is returned into size. The value in size is in units of
the type returned in type. The type returned can be any of FLOAT, FLOAT_-
VEC2, FLOAT_VEC3, FLOAT_VEC4, FLOAT_MAT2, FLOAT_MAT3, FLOAT_MAT4,
FLOAT_MAT2x3, FLOAT_MAT2x4, FLOAT_MAT3x2, FLOAT_MAT3x4, FLOAT_-
MAT4x2, FLOAT_MAT4x3, INT, INT_VEC2, INT_VEC3, INT_VEC4, UNSIGNED_-
INT, UNSIGNED_INT_VEC2, UNSIGNED_INT_VEC3, or UNSIGNED_INT_VEC4.
     If an error occurred, the return parameters length, size, type and name will be
unmodified.
     This command will return as much information about active attributes as pos-
sible. If no information is available, length will be set to zero and name will be an
empty string. This situation could arise if GetActiveAttrib is issued after a failed
link.
     After a program object has been linked successfully, the bindings of attribute
variable names to indices can be queried. The command

      int GetAttribLocation( uint program, const char *name );


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                 83


returns the generic attribute index that the attribute variable named name was bound
to when the program object named program was last linked. name must be a null-
terminated string. If name is active and is an attribute matrix, GetAttribLocation
returns the index of the first column of that matrix. If program has not been suc-
cessfully linked, the error INVALID_OPERATION is generated. If name is not an
active attribute, if name is a conventional attribute, or if an error occurs, -1 will be
returned.
    The binding of an attribute variable to a generic attribute index can also be
specified explicitly. The command
      void BindAttribLocation( uint program, uint index, const
         char *name );
specifies that the attribute variable named name in program program should be
bound to generic vertex attribute index when the program is next linked. If name
was bound previously, its assigned binding is replaced with index. name must be a
null-terminated string. The error INVALID_VALUE is generated if index is equal or
greater than MAX_VERTEX_ATTRIBS. BindAttribLocation has no effect until the
program is linked. In particular, it doesn’t modify the bindings of active attribute
variables in a program that has already been linked.
    Built-in attribute variables are automatically bound to conventional attributes,
and can not have an assigned binding. The error INVALID_OPERATION is gener-
ated if name starts with the reserved "gl_" prefix.
    When a program is linked, any active attributes without a binding specified
through BindAttribLocation will automatically be bound to vertex attributes by
the GL. Such bindings can be queried using the command GetAttribLocation.
LinkProgram will fail if the assigned binding of an active attribute variable would
cause the GL to reference a non-existent generic attribute (one greater than or equal
to MAX_VERTEX_ATTRIBS). LinkProgram will fail if the attribute bindings as-
signed by BindAttribLocation do not leave not enough space to assign a location
for an active matrix attribute, which requires multiple contiguous generic attributes.
LinkProgram will also fail if the vertex shaders used in the program object contain
assignments (not removed during pre-processing) to an attribute variable bound to
generic attribute zero and to the conventional vertex position (gl_Vertex).
    BindAttribLocation may be issued before any vertex shader objects are at-
tached to a program object. Hence it is allowed to bind any name (except a name
starting with "gl_") to an index, including a name that is never used as an at-
tribute in any vertex shader object. Assigned bindings for attribute variables that
do not exist or are not active are ignored.
    The values of generic attributes sent to generic attribute index i are part of
current state, just like the conventional attributes. If a new program object has

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              84


been made active, then these values will be tracked by the GL in such a way that
the same values will be observed by attributes in the new program object that are
also bound to index i.
    It is possible for an application to bind more than one attribute name to the
same location. This is referred to as aliasing. This will only work if only one of
the aliased attributes is active in the executable program, or if no path through the
shader consumes more than one attribute of a set of attributes aliased to the same
location. A link error can occur if the linker determines that every path through the
shader consumes multiple aliased attributes, but implementations are not required
to generate an error in this case. The compiler and linker are allowed to assume that
no aliasing is done, and may employ optimizations that work only in the absence
of aliasing. It is not possible to alias generic attributes with conventional ones.

2.14.4   Uniform Variables
Shaders can declare named uniform variables, as described in the OpenGL Shading
Language Specification. Values for these uniforms are constant over a primitive,
and typically they are constant across many primitives. Uniforms are program
object-specific state. They retain their values once loaded, and their values are
restored whenever a program object is used, as long as the program object has not
been re-linked. A uniform is considered active if it is determined by the compiler
and linker that the uniform will actually be accessed when the executable code
is executed. In cases where the compiler and linker cannot make a conclusive
determination, the uniform will be considered active.
    Sets of uniforms can be grouped into uniform blocks. The values of each uni-
form in such a set are extracted from the data store of a buffer object corresponding
to the uniform block. OpenGL Shading Language syntax serves to delimit named
blocks of uniforms that can be backed by a buffer object. These are referred to
as named uniform blocks, and are assigned a uniform block index. Uniforms that
are declared outside of a named uniform block are said to be part of the default
uniform block. Default uniform blocks have no name or uniform block index. Like
uniforms, uniform blocks can be active or inactive. Active uniform blocks are those
that contain active uniforms after a program has been compiled and linked.
    The amount of storage available for uniform variables in the default uniform
block accessed by a vertex shader is specified by the value of the implementation-
dependent constant MAX_VERTEX_UNIFORM_COMPONENTS. The total amount of
combined storage available for uniform variables in all uniform blocks accessed
by a vertex shader (including the default uniform block) is specified by the value
of the implementation-dependent constant MAX_COMBINED_VERTEX_UNIFORM_-
COMPONENTS. These values represent the numbers of individual floating-point,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                               85


integer, or boolean values that can be held in uniform variable storage for a vertex
shader. A link error is generated if an attempt is made to utilize more than the space
available for vertex shader uniform variables.
    When a program is successfully linked, all active uniforms belonging to the
program object’s default uniform block are initialized as defined by the version of
the OpenGL Shading Language used to compile the program. A successful link
will also generate a location for each active uniform in the default uniform block.
The values of active uniforms in the default uniform block can be changed using
this location and the appropriate Uniform* command (see below). These locations
are invalidated and new ones assigned after each successful re-link.
    Similarly, when a program is successfully linked, all active uniforms belong-
ing to the program’s named uniform blocks are assigned offsets (and strides for
array and matrix type uniforms) within the uniform block according to layout rules
described below. Uniform buffer objects provide the storage for named uniform
blocks, so the values of active uniforms in named uniform blocks may be changed
by modifying the contents of the buffer object using commands such as Buffer-
Data, BufferSubData, MapBuffer, and UnmapBuffer. Uniforms in a named
uniform block are not assigned a location and may be be modified using the Uni-
form* commands. The offsets and strides of all active uniforms belonging to
named uniform blocks of a program object are invalidated and new ones assigned
after each successful re-link.
    To find the location within a program object of an active uniform variable as-
sociated with the default uniform block, use the command
      int GetUniformLocation( uint program, const
         char *name );
    This command will return the location of uniform variable name if it is as-
sociated with the default uniform block. name must be a null-terminated string,
without white space. The value -1 will be returned if if name starts with the re-
served prefix "gl_", if name does not correspond to an active uniform variable
name in program, or if name is associated with a named uniform block.
    If program has not been successfully linked, the error INVALID_OPERATION
is generated. After a program is linked, the location of a uniform variable will not
change, unless the program is re-linked.
    A valid name cannot be a structure, an array of structures, or any portion of
a single vector or a matrix. In order to identify a valid name, the "." (dot) and
"[]" operators can be used in name to specify a member of a structure or element
of an array.
    The first element of a uniform array is identified using the name of the uniform
array appended with "[0]". Except if the last part of the string name indicates a

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             86


uniform array, then the location of the first element of that array can be retrieved
by either using the name of the uniform array, or the name of the uniform array
appended with "[0]".
    Named uniform blocks, like uniforms, are identified by name strings. Uniform
block indices corresponding to uniform block names can be queried by calling

      uint GetUniformBlockIndex( uint program, const
         char *uniformBlockName );

program is the name of a program object for which the command LinkProgram
has been issued in the past. It is not necessary for program to have been linked
successfully. The link could have failed because the number of active uniforms
exceeded the limit.
    uniformBlockName must contain a null-terminated string specifying the name
of a uniform block.
    GetUniformBlockIndex returns the uniform block index for the uniform block
named uniformBlockName of program. If uniformBlockName does not identify an
active uniform block of program, or an error occurred, then INVALID_INDEX is
returned. The indices of the active uniform blocks of a program are assigned in
consecutive order, beginning with zero.
    An active uniform block’s name string can be queried from its uniform block
index by calling

      void GetActiveUniformBlockName( uint program,
         uint uniformBlockIndex, sizei bufSize, sizei *length,
         char *uniformBlockName );

program is the name of a program object for which the command LinkProgram
has been issued in the past. It is not necessary for program to have been linked
successfully. The link could have failed because the number of active uniforms
exceeded the limit.
    uniformBlockIndex must be an active uniform block index of program, in the
range zero to the value of ACTIVE_UNIFORM_BLOCKS - 1. The value of ACTIVE_-
UNIFORM_BLOCKS can be queried with GetProgramiv (see section 6.1.15). If
uniformBlockIndex is greater than or equal to the value of ACTIVE_UNIFORM_-
BLOCKS, the error INVALID_VALUE is generated.
    The string name of the uniform block identified by uniformBlockIndex is re-
turned into uniformBlockName. The name is null-terminated. The actual number
of characters written into uniformBlockName, excluding the null terminator, is re-
turned in length. If length is NULL, no length is returned.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              87


    bufSize contains the maximum number of characters (including the null termi-
nator) that will be written back to uniformBlockName.
    If an error occurs, nothing will be written to uniformBlockName or length.
    Information about an active uniform block can be queried by calling

      void GetActiveUniformBlockiv( uint program,
         uint uniformBlockIndex, enum pname, int *params );

program is the name of a program object for which the command LinkProgram
has been issued in the past. It is not necessary for program to have been linked
successfully. The link could have failed because the number of active uniforms
exceeded the limit.
    uniformBlockIndex is an active uniform block index of program. If uniform-
BlockIndex is greater than or equal to the value of ACTIVE_UNIFORM_BLOCKS, or
is not the index of an active uniform block in program, the error INVALID_VALUE
is generated.
    If no error occurs, the uniform block parameter(s) specified by pname are re-
turned in params. Otherwise, nothing will be written to params.
    If pname is UNIFORM_BLOCK_BINDING, then the index of the uniform buffer
binding point last selected by the uniform block specified by uniformBlockIndex
for program is returned. If no uniform block has been previously specified, zero is
returned.
    If pname is UNIFORM_BLOCK_DATA_SIZE, then the implementation-
dependent minimum total buffer object size, in basic machine units, required to
hold all active uniforms in the uniform block identified by uniformBlockIndex is
returned. It is neither guaranteed nor expected that a given implementation will
arrange uniform values as tightly packed in a buffer object. The exception to this is
the std140 uniform block layout, which guarantees specific packing behavior and
does not require the application to query for offsets and strides. In this case the
minimum size may still be queried, even though it is determined in advance based
only on the uniform block declaration (see “Standard Uniform Block Layout” in
section 2.14.4).
    The total amount of buffer object storage available for any given uniform block
is subject to an implementation-dependent limit. The maximum amount of avail-
able space, in basic machine units, can be queried by calling GetIntegerv with
the constant MAX_UNIFORM_BLOCK_SIZE. If the amount of storage required for a
uniform block exceeds this limit, a program may fail to link.
    If pname is UNIFORM_BLOCK_NAME_LENGTH, then the total length (includ-
ing the null terminator) of the name of the uniform block identified by uniform-
BlockIndex is returned.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             88


     If pname is UNIFORM_BLOCK_ACTIVE_UNIFORMS, then the number of active
uniforms in the uniform block identified by uniformBlockIndex is returned.
     If pname is UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES, then a list of the
active uniform indices for the uniform block identified by uniformBlockIndex is
returned. The number of elements that will be written to params is the value of
UNIFORM_BLOCK_ACTIVE_UNIFORMS for uniformBlockIndex.
     If pname is       UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER or
UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER, then a boolean value
indicating whether the uniform block identified by uniformBlockIndex is refer-
enced by the vertex or fragment programming stages of program, respectively, is
returned.
     Each active uniform, whether in a named uniform block or in the default block,
is assigned an index when a program is linked. Indices are assigned in consecutive
order, beginning with zero. The indices assigned to a set of uniforms in a program
may be queried by calling

      void GetUniformIndices( uint program,
         sizei uniformCount, const char **uniformNames,
         uint *uniformIndices );

program is the name of a program object for which the command LinkProgram
has been issued in the past. It is not necessary for program to have been linked
successfully. The link could have failed because the number of active uniforms
exceeded the limit.
    uniformCount indicates both the number of elements in the array of names
uniformNames and the number of indices that may be written to uniformIndices.
    uniformNames contains a list of uniformCount name strings identifying the uni-
form names to be queried for indices. For each name string in uniformNames, the
index assigned to the active uniform of that name will be written to the correspond-
ing element of uniformIndices. If a string in uniformNames is not the name of an
active uniform, the value INVALID_INDEX will be written to the corresponding
element of uniformIndices.
    If an error occurs, nothing is written to uniformIndices.
    The name of an active uniform may be queried from the corresponding uniform
index by calling

      void GetActiveUniformName( uint program,
         uint uniformIndex, sizei bufSize, sizei *length,
         char *uniformName );



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             89


program is the name of a program object for which the command LinkProgram
has been issued in the past. It is not necessary for program to have been linked
successfully. The link could have failed because the number of active uniforms
exceeded the limit.
     uniformIndex must be an active uniform index of the program program, in
the range zero to the value of ACTIVE_UNIFORMS - 1. The value of ACTIVE_-
UNIFORMS can be queried with GetProgramiv. If uniformIndex is greater than or
equal to the value of ACTIVE_UNIFORMS, the error INVALID_VALUE is generated.
     The name of the uniform identified by uniformIndex is returned as a null-
terminated string in uniformName. The actual number of characters written into
uniformName, excluding the null terminator, is returned in length. If length is
NULL, no length is returned. The maximum number of characters that may be writ-
ten into uniformName, including the null terminator, is specified by bufSize. The
returned uniform name can be the name of built-in uniform state as well. The com-
plete list of built-in uniform state is described in section 7.5 of the OpenGL Shad-
ing Language specification. The length of the longest uniform name in program
is given by the value of ACTIVE_UNIFORM_MAX_LENGTH, which can be queried
with GetProgramiv.
     If GetActiveUniformName is not successful, nothing is written to length or
uniformName.
     Each uniform variable, declared in a shader, is broken down into one or more
strings using the "." (dot) and "[]" operators, if necessary, to the point that it
is legal to pass each string back into GetUniformLocation, for default uniform
block uniform names, or GetUniformIndices, for named uniform block uniform
names.
     Information about active uniforms can be obtained by calling either

        void GetActiveUniform( uint program, uint index,
          sizei bufSize, sizei *length, int *size, enum *type,
           char *name );

   or

        void GetActiveUniformsiv( uint program,
           sizei uniformCount, const uint *uniformIndices,
           enum pname, int *params );

program is the name of a program object for which the command LinkProgram
has been issued in the past. It is not necessary for program to have been linked
successfully. The link could have failed because the number of active uniforms
exceeded the limit.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                 90


     These commands provide information about the uniform or uniforms selected
by index or uniformIndices, respectively. In GetActiveUniform, an index of 0
selects the first active uniform, and an index of the value of ACTIVE_UNIFORMS
- 1 selects the last active uniform. In GetActiveUniformsiv, uniformIndices is an
array of such active uniform indices. If any index is greater than or equal to the
value of ACTIVE_UNIFORMS, the error INVALID_VALUE is generated.
     For the selected uniform, GetActiveUniform returns the uniform name as a
null-terminated string in name. The actual number of characters written into name,
excluding the null terminator, is returned in length. If length is NULL, no length
is returned. The maximum number of characters that may be written into name,
including the null terminator, is specified by bufSize. The returned uniform name
can be the name of built-in uniform state as well. The complete list of built-in
uniform state is described in section 7.5 of the OpenGL Shading Language specifi-
cation. The length of the longest uniform name in program is given by ACTIVE_-
UNIFORM_MAX_LENGTH.
     Each uniform variable, declared in a shader, is broken down into one or more
strings using the "." (dot) and "[]" operators, if necessary, to the point that it is
legal to pass each string back into GetUniformLocation, for default uniform block
uniform names, or GetUniformIndices, for named uniform block uniform names.
     For the selected uniform, GetActiveUniform returns the type of the uniform
into type and the size of the uniform is into size. The value in size is in units of the
uniform type, which can be any of the type name tokens in table 2.13, correspond-
ing to OpenGL Shading Language type keywords also shown in that table.
     If one or more elements of an array are active, GetActiveUniform will return
the name of the array in name, subject to the restrictions listed above. The type of
the array is returned in type. The size parameter contains the highest array element
index used, plus one. The compiler or linker determines the highest index used.
There will be only one active uniform reported by the GL per uniform array.
     GetActiveUniform will return as much information about active uniforms as
possible. If no information is available, length will be set to zero and name will be
an empty string. This situation could arise if GetActiveUniform is issued after a
failed link.
     If an error occurs, nothing is written to length, size, type, or name.
     For GetActiveUniformsiv, uniformCount indicates both the number of ele-
ments in the array of indices uniformIndices and the number of parameters written
to params upon successful return. pname identifies a property of each uniform in
uniformIndices that should be written into the corresponding element of params.
If an error occurs, nothing will be written to params.
     If pname is UNIFORM_TYPE, then an array identifying the types of the uniforms
specified by the corresponding array of uniformIndices is returned. The returned

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                  91




 Type Name Token        Keyword          Type Name Token                    Keyword
 FLOAT                  float            SAMPLER_1D                         sampler1D
 FLOAT_VEC2             vec2             SAMPLER_2D                         sampler2D
 FLOAT_VEC3             vec3             SAMPLER_3D                         sampler3D
 FLOAT_VEC4             vec4             SAMPLER_CUBE                       samplerCube
 INT                    int              SAMPLER_1D_SHADOW                  sampler1DShadow
 INT_VEC2               ivec2            SAMPLER_2D_SHADOW                  sampler2DShadow
 INT_VEC3               ivec3            SAMPLER_1D_ARRAY                   sampler1DArray
 INT_VEC4               ivec4            SAMPLER_2D_ARRAY                   sampler2DArray
 UNSIGNED_INT           unsigned int     SAMPLER_1D_ARRAY_SHADOW            sampler1DArraySha
 UNSIGNED_INT_VEC2      uvec2            SAMPLER_2D_ARRAY_SHADOW            sampler2DArraySha
 UNSIGNED_INT_VEC3      uvec3            SAMPLER_CUBE_SHADOW                samplerCubeShadow
 UNSIGNED_INT_VEC4      uvec4            SAMPLER_2D_RECT                    sampler2DRect
 BOOL                   bool             SAMPLER_2D_RECT_SHADOW             sampler2DRectShad
 BOOL_VEC2              bvec2            INT_SAMPLER_1D                     isampler1D
 BOOL_VEC3              bvec3            INT_SAMPLER_2D                     isampler2D
 BOOL_VEC4              bvec4            INT_SAMPLER_3D                     isampler3D
 FLOAT_MAT2             mat2             INT_SAMPLER_CUBE                   isamplerCube
 FLOAT_MAT3             mat3             INT_SAMPLER_1D_ARRAY               isampler1DArray
 FLOAT_MAT4             mat4             INT_SAMPLER_2D_ARRAY               isampler2DArray
 FLOAT_MAT2x3           mat2x3           UNSIGNED_INT_SAMPLER_1D            usampler1D
 FLOAT_MAT2x4           mat2x4           UNSIGNED_INT_SAMPLER_2D            usampler2D
 FLOAT_MAT3x2           mat3x2           UNSIGNED_INT_SAMPLER_3D            usampler3D
 FLOAT_MAT3x4           mat3x4           UNSIGNED_INT_SAMPLER_CUBE          usamplerCube
 FLOAT_MAT4x2           mat4x2           UNSIGNED_INT_SAMPLER_1D_ARRAY      usampler1DArray
 FLOAT_MAT4x3           mat4x3           UNSIGNED_INT_SAMPLER_2D_ARRAY      usampler2DArray

Table 2.13: OpenGL Shading Language type tokens returned by GetActiveUni-
form and GetActiveUniformsiv, and corresponding shading language keywords
declaring each such type.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                    92


types can be any of the values in table 2.13.
     If pname is UNIFORM_SIZE, then an array identifying the size of the uniforms
specified by the corresponding array of uniformIndices is returned. The sizes re-
turned are in units of the type returned by a query of UNIFORM_TYPE. For active
uniforms that are arrays, the size is the number of active elements in the array; for
all other uniforms, the size is one.
     If pname is UNIFORM_NAME_LENGTH, then an array identifying the length,
including the terminating null character, of the uniform name strings specified by
the corresponding array of uniformIndices is returned.
     If pname is UNIFORM_BLOCK_INDEX, then an array identifying the uniform
block index of each of the uniforms specified by the corresponding array of unifor-
mIndices is returned. The index of a uniform associated with the default uniform
block is -1.
     If pname is UNIFORM_OFFSET, then an array of uniform buffer offsets is re-
turned. For uniforms in a named uniform block, the returned value will be its offset,
in basic machine units, relative to the beginning of the uniform block in the buffer
object data store. For uniforms in the default uniform block, -1 will be returned.
     If pname is UNIFORM_ARRAY_STRIDE, then an array identifying the stride
between elements, in basic machine units, of each of the uniforms specified by
the corresponding array of uniformIndices is returned. The stride of a uniform
associated with the default uniform block is -1. Note that this information only
makes sense for uniforms that are arrays. For uniforms that are not arrays, but are
declared in a named uniform block, an array stride of zero is returned.
     If pname is UNIFORM_MATRIX_STRIDE, then an array identifying the stride
between columns of a column-major matrix or rows of a row-major matrix, in ba-
sic machine units, of each of the uniforms specified by the corresponding array of
uniformIndices is returned. The matrix stride of a uniform associated with the de-
fault uniform block is -1. Note that this information only makes sense for uniforms
that are matrices. For uniforms that are not matrices, but are declared in a named
uniform block, a matrix stride of zero is returned.
     If pname is UNIFORM_IS_ROW_MAJOR, then an array identifying whether each
of the uniforms specified by the corresponding array of uniformIndices is a row-
major matrix or not is returned. A value of one indicates a row-major matrix, and
a value of zero indicates a column-major matrix, a matrix in the default uniform
block, or a non-matrix.

Loading Uniform Variables In The Default Uniform Block
   To load values into the uniform variables of the default uniform block of the
program object that is currently in use, use the commands


                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                93


      void Uniform{1234}{if}( int location, T value );
      void Uniform{1234}{if}v( int location, sizei count,
         T value );
      void Uniform{1,2,3,4}ui( int location, T value );
      void Uniform{1,2,3,4}uiv( int location, sizei count,
         T value );
      void UniformMatrix{234}fv( int location, sizei count,
         boolean transpose, const float *value );
      void UniformMatrix{2x3,3x2,2x4,4x2,3x4,4x3}fv(
         int location, sizei count, boolean transpose, const
         float *value );

The given values are loaded into the default uniform block uniform variable loca-
tion identified by location.
    The Uniform*f{v} commands will load count sets of one to four floating-point
values into a uniform location defined as a float, a floating-point vector, an array of
floats, or an array of floating-point vectors.
    The Uniform*i{v} commands will load count sets of one to four integer val-
ues into a uniform location defined as a sampler, an integer, an integer vector, an
array of samplers, an array of integers, or an array of integer vectors. Only the
Uniform1i{v} commands can be used to load sampler values (see below).
    The Uniform*ui{v} commands will load count sets of one to four unsigned
integer values into a uniform location defined as a unsigned integer, an unsigned
integer vector, an array of unsigned integers or an array of unsigned integer vectors.
    The UniformMatrix{234}fv commands will load count 2 × 2, 3 × 3, or 4 × 4
matrices (corresponding to 2, 3, or 4 in the command name) of floating-point values
into a uniform location defined as a matrix or an array of matrices. If transpose
is FALSE, the matrix is specified in column major order, otherwise in row major
order.
    The UniformMatrix{2x3,3x2,2x4,4x2,3x4,4x3}fv commands will load count
2×3, 3×2, 2×4, 4×2, 3×4, or 4×3 matrices (corresponding to the numbers in the
command name) of floating-point values into a uniform location defined as a matrix
or an array of matrices. The first number in the command name is the number of
columns; the second is the number of rows. For example, UniformMatrix2x4fv
is used to load a matrix consisting of two columns and four rows. If transpose
is FALSE, the matrix is specified in column major order, otherwise in row major
order.
    When loading values for a uniform declared as a boolean, a boolean vector,
an array of booleans, or an array of boolean vectors, the Uniform*i{v}, Uni-
form*ui{v}, and Uniform*f{v} set of commands can be used to load boolean

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                            94


values. Type conversion is done by the GL. The uniform is set to FALSE if the
input value is 0 or 0.0f, and set to TRUE otherwise. The Uniform* command used
must match the size of the uniform, as declared in the shader. For example, to
load a uniform declared as a bvec2, any of the Uniform2{if ui}* commands may
be used. An INVALID_OPERATION error will be generated if an attempt is made
to use a non-matching Uniform* command. In this example using Uniform1iv
would generate an error.
    For all other uniform types the Uniform* command used must match the size
and type of the uniform, as declared in the shader. No type conversions are
done. For example, to load a uniform declared as a vec4, Uniform4f{v} must
be used. To load a 3x3 matrix, UniformMatrix3fv must be used. An INVALID_-
OPERATION error will be generated if an attempt is made to use a non-matching
Uniform* command. In this example, using Uniform4i{v} would generate an
error.
    When loading N elements starting at an arbitrary position k in a uniform de-
clared as an array, elements k through k + N − 1 in the array will be replaced
with the new values. Values for any array element that exceeds the highest array
element index used, as reported by GetActiveUniform, will be ignored by the GL.
    If the value of location is -1, the Uniform* commands will silently ignore the
data passed in, and the current uniform values will not be changed.
    If any of the following conditions occur, an INVALID_OPERATION error is
generated by the Uniform* commands, and no uniform values are changed:

   • if the size indicated in the name of the Uniform* command used does not
     match the size of the uniform declared in the shader,

   • if the uniform declared in the shader is not of type boolean and the type
     indicated in the name of the Uniform* command used does not match the
     type of the uniform,

   • if count is greater than one, and the uniform declared in the shader is not an
     array variable,

   • if no variable with a location of location exists in the program object cur-
     rently in use and location is not -1, or

   • if there is no program object currently in use.

Uniform Blocks
The values of uniforms arranged in named uniform blocks are extracted from buffer
object storage. The mechanisms for placing individual uniforms in a buffer object

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                           95


and connecting a uniform block to an individual buffer object are described below.
    There is a set of implementation-dependent maximums for the number of ac-
tive uniform blocks used by each shader (vertex and fragment). If the number of
uniform blocks used by any shader in the program exceeds its corresponding limit,
the program will fail to link. The limits for vertex and fragment shaders can be
obtained by calling GetIntegerv with pname values of MAX_VERTEX_UNIFORM_-
BLOCKS and MAX_FRAGMENT_UNIFORM_BLOCKS, respectively.
    Additionally, there is an implementation-dependent limit on the sum of the
number of active uniform blocks used by each shader of a program. If a uniform
block is used by multiple shaders, each such use counts separately against this
combined limit. The combined uniform block use limit can be obtained by calling
GetIntegerv with a pname of MAX_COMBINED_UNIFORM_BLOCKS.
    When a named uniform block is declared by multiple shaders in a program, it
must be declared identically in each shader. The uniforms within the block must
be declared with the same names and types, and in the same order. If a program
contains multiple shaders with different declarations for the same named uniform
block differs between shader, the program will fail to link.

Uniform Buffer Object Storage
When stored in buffer objects associated with uniform blocks, uniforms are repre-
sented in memory as follows:

   • Members of type bool are extracted from a buffer object by reading a single
     uint-typed value at the specified offset. All non-zero values correspond to
     true, and zero corresponds to false.

   • Members of type int are extracted from a buffer object by reading a single
     int-typed value at the specified offset.

   • Members of type uint are extracted from a buffer object by reading a single
     uint-typed value at the specified offset.

   • Members of type float are extracted from a buffer object by reading a
     single float-typed value at the specified offset.

   • Vectors with N elements with basic data types of bool, int, uint, or
     float are extracted as N values in consecutive memory locations begin-
     ning at the specified offset, with components stored in order with the first
     (X) component at the lowest offset. The GL data type used for component
     extraction is derived according to the rules for scalar members above.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                96


   • Column-major matrices with C columns and R rows (using the type
     matCxR, or simply matC if C = R) are treated as an array of C floating-
     point column vectors, each consisting of R components. The column vec-
     tors will be stored in order, with column zero at the lowest offset. The dif-
     ference in offsets between consecutive columns of the matrix will be re-
     ferred to as the column stride, and is constant across the matrix. The column
     stride, UNIFORM_MATRIX_STRIDE, is an implementation-dependent value
     and may be queried after a program is linked.

   • Row-major matrices with C columns and R rows (using the type matCxR,
     or simply matC if C==R) are treated as an array of R floating-point row
     vectors, each consisting of C components. The row vectors will be stored in
     order, with row zero at the lowest offset. The difference in offsets between
     consecutive rows of the matrix will be referred to as the row stride, and is
     constant across the matrix. The row stride, UNIFORM_MATRIX_STRIDE, is
     an implementation-dependent value and may be queried after a program is
     linked.

   • Arrays of scalars, vectors, and matrices are stored in memory by element
     order, with array member zero at the lowest offset. The difference in offsets
     between each pair of elements in the array in basic machine units is referred
     to as the array stride, and is constant across the entire array. The array stride,
     UNIFORM_ARRAY_STRIDE, is an implementation-dependent value and may
     be queried after a program is linked.

Standard Uniform Block Layout
By default, uniforms contained within a uniform block are extracted from buffer
storage in an implementation-dependent manner. Applications may query the off-
sets assigned to uniforms inside uniform blocks with query functions provided by
the GL.
    The layout qualifier provides shaders with control of the layout of uniforms
within a uniform block. When the std140 layout is specified, the offset of each
uniform in a uniform block can be derived from the definition of the uniform block
by applying the set of rules described below.
    If a uniform block is declared in multiple shaders linked together into a single
program, the link will fail unless the uniform block declaration, including layout
qualifier, are identical in all such shaders.
    When using the std140 storage layout, structures will be laid out in buffer
storage with its members stored in monotonically increasing order based on their
location in the declaration. A structure and each structure member have a base

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              97


offset and a base alignment, from which an aligned offset is computed by rounding
the base offset up to a multiple of the base alignment. The base offset of the first
member of a structure is taken from the aligned offset of the structure itself. The
base offset of all other structure members is derived by taking the offset of the
last basic machine unit consumed by the previous member and adding one. Each
structure member is stored in memory at its aligned offset. The members of a top-
level uniform block are laid out in buffer storage by treating the uniform block as
a structure with a base offset of zero.

   1. If the member is a scalar consuming N basic machine units, the base align-
      ment is N .

   2. If the member is a two- or four-component vector with components consum-
      ing N basic machine units, the base alignment is 2N or 4N , respectively.

   3. If the member is a three-component vector with components consuming N
      basic machine units, the base alignment is 4N .

   4. If the member is an array of scalars or vectors, the base alignment and array
      stride are set to match the base alignment of a single array element, according
      to rules (1), (2), and (3), and rounded up to the base alignment of a vec4. The
      array may have padding at the end; the base offset of the member following
      the array is rounded up to the next multiple of the base alignment.

   5. If the member is a column-major matrix with C columns and R rows, the
      matrix is stored identically to an array of C column vectors with R compo-
      nents each, according to rule (4).

   6. If the member is an array of S column-major matrices with C columns and
      R rows, the matrix is stored identically to a row of S × C column vectors
      with R components each, according to rule (4).

   7. If the member is a row-major matrix with C columns and R rows, the matrix
      is stored identically to an array of R row vectors with C components each,
      according to rule (4).

   8. If the member is an array of S row-major matrices with C columns and R
      rows, the matrix is stored identically to a row of S × R row vectors with C
      components each, according to rule (4).

   9. If the member is a structure, the base alignment of the structure is N , where
      N is the largest base alignment value of any of its members, and rounded


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              98


      up to the base alignment of a vec4. The individual members of this sub-
      structure are then assigned offsets by applying this set of rules recursively,
      where the base offset of the first member of the sub-structure is equal to the
      aligned offset of the structure. The structure may have padding at the end;
      the base offset of the member following the sub-structure is rounded up to
      the next multiple of the base alignment of the structure.

 10. If the member is an array of S structures, the S elements of the array are laid
     out in order, according to rule (9).

Uniform Buffer Object Bindings
The value an active uniform inside a named uniform block is extracted from the
data store of a buffer object bound to one of an array of uniform buffer binding
points. The number of binding points can be queried using GetIntegerv with the
constant MAX_UNIFORM_BUFFER_BINDINGS.
    Buffer objects are bound to uniform block binding points by calling one of the
commands

      void BindBufferRange( enum target, uint index,
         uint buffer, intptr offset, sizeiptr size );
      void BindBufferBase( enum target, uint index, uint buffer );

with target set to UNIFORM_BUFFER. There is an array of buffer object binding
points with which uniform blocks can be associated via UniformBlockBinding,
plus a single general binding point that can be used by other buffer object manip-
ulation functions (e.g. BindBuffer, MapBuffer). Both commands bind the buffer
object named by buffer to the general binding point, and additionally bind the buffer
object to the binding point in the array given by index. The error INVALID_VALUE
is generated if index is greater than or equal to the value of MAX_UNIFORM_-
BUFFER_BINDINGS.
     For BindBufferRange, offset specifies a starting offset into the buffer object
buffer, and size specifies the amount of data that can be read from the buffer ob-
ject while used as the storage for a uniform block. Both offset and size are in
basic machine units. The error INVALID_VALUE is generated if the value of size
is less than or equal to zero, if offset + size is greater than the value of BUFFER_-
SIZE, or if offset is not a multiple of the implementation-dependent required align-
ment (UNIFORM_BUFFER_OFFSET_ALIGNMENT). BindBufferBase is equivalent
to calling BindBufferRange with offset zero and size equal to the size of buffer.
     Each of a program’s active uniform blocks has a corresponding uniform buffer
object binding point. This binding point can be assigned by calling:

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                               99


      void UniformBlockBinding( uint program,
         uint uniformBlockIndex, uint uniformBlockBinding );

program is a name of a program object for which the command LinkProgram has
been issued in the past.
    uniformBlockIndex must be an active uniform block index of the program pro-
gram. Otherwise, INVALID_VALUE is generated.
    uniformBlockBinding must be less than MAX_UNIFORM_BUFFER_BINDINGS.
Otherwise, INVALID_VALUE is generated.
    If successful, UniformBlockBinding specifies that program will use the data
store of the buffer object bound to the binding point uniformBlockBinding to extract
the values of the uniforms in the uniform block identified by uniformBlockIndex.
    When executing shaders that access uniform blocks, the binding point corre-
sponding to each active uniform block must be populated with a buffer object with
a size no smaller than the minimum required size of the uniform block (the value
of UNIFORM_BLOCK_DATA_SIZE). For binding points populated by BindBuffer-
Range, the size in question is the value of the size parameter. If any active uniform
block is not backed by a sufficiently large buffer object, the results of shader ex-
ecution are undefined, and may result in GL interruption or termination. Shaders
may be executed to process the primitives and vertices specified between Begin
and End, or by vertex array commands (see section 2.8). Shaders may also be
executed as a result of DrawPixels, Bitmap, or RasterPos* commands.
    When a program object is linked or re-linked, the uniform buffer object binding
point assigned to each of its active uniform blocks is reset to zero.

2.14.5    Samplers
Samplers are special uniforms used in the OpenGL Shading Language to identify
the texture object used for each texture lookup. The value of a sampler indicates
the texture image unit being accessed. Setting a sampler’s value to i selects texture
image unit number i. The values of i range from zero to the implementation-
dependent maximum supported number of texture image units.
    The type of the sampler identifies the target on the texture image unit. The
texture object bound to that texture image unit’s target is then used for the texture
lookup. For example, a variable of type sampler2D selects target TEXTURE_2D
on its texture image unit. Binding of texture objects to targets is done as usual with
BindTexture. Selecting the texture image unit to bind to is done as usual with
ActiveTexture.
    The location of a sampler needs to be queried with GetUniformLocation, just
like any uniform variable. Sampler values need to be set by calling Uniform1i{v}.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              100


Loading samplers with any of the other Uniform* entry points is not allowed and
will result in an INVALID_OPERATION error.
    It is not allowed to have variables of different sampler types pointing to the
same texture image unit within a program object. This situation can only be de-
tected at the next rendering command issued, and an INVALID_OPERATION error
will then be generated.
    Active samplers are samplers actually being used in a program object. The
LinkProgram command determines if a sampler is active or not. The LinkPro-
gram command will attempt to determine if the active samplers in the shader(s)
contained in the program object exceed the maximum allowable limits. If it de-
termines that the count of active samplers exceeds the allowable limits, then the
link fails (these limits can be different for different types of shaders). Each active
sampler variable counts against the limit, even if multiple samplers refer to the
same texture image unit. If this cannot be determined at link time, for example if
the program object only contains a vertex shader, then it will be determined at the
next rendering command issued, and an INVALID_OPERATION error will then be
generated.

2.14.6    Varying Variables
A vertex shader may define one or more varying variables (see the OpenGL Shad-
ing Language specification). These values are expected to be interpolated across
the primitive being rendered. The OpenGL Shading Language specification defines
a set of built-in varying variables for vertex shaders that correspond to the values
required for the fixed-function processing that occurs after vertex processing.
    The number of interpolators available for processing varying variables is
given by the value of the implementation-dependent constant MAX_VARYING_-
COMPONENTS. This value represents the number of individual scalar numeric val-
ues that can be interpolated; varying variables declared as vectors, matrices, and
arrays will all consume multiple interpolators. When a program is linked, all com-
ponents of any varying variable written by a vertex shader, read by a fragment
shader, or used for transform feedback will count against this limit. The trans-
formed vertex position (gl_Position) is not a varying variable and does not
count against this limit. A program whose shaders access more than the value
of MAX_VARYING_COMPONENTS components worth of varying variables may fail
to link, unless device-dependent optimizations are able to make the program fit
within available hardware resources.
    Each program object can specify a set of one or more varying variables to be
recorded in transform feedback mode with the command



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             101


      void TransformFeedbackVaryings( uint program,
         sizei count, const char **varyings, enum bufferMode );

     program specifies the program object. count specifies the number of vary-
ing variables used for transform feedback. varyings is an array of count zero-
terminated strings specifying the names of the varying variables to use for trans-
form feedback. The varying variables specified in varyings can be either built-in
varying variables (beginning with "gl_") or user-defined ones. Varying vari-
ables are written out in the order they appear in the array varyings. bufferMode is
either INTERLEAVED_ATTRIBS or SEPARATE_ATTRIBS, and identifies the mode
used to capture the varying variables when transform feedback is active. The er-
ror INVALID_VALUE is generated if program is not the name of a program object,
or if bufferMode is SEPARATE_ATTRIBS and count is greater than the value of
the implementation-dependent limit MAX_TRANSFORM_FEEDBACK_SEPARATE_-
ATTRIBS.
     The state set by TransformFeedbackVaryings has no effect on the execu-
tion of the program until program is subsequently linked. When LinkProgram is
called, the program is linked so that the values of the specified varying variables
for the vertices of each primitive generated by the GL are written to a single buffer
object (if the buffer mode is INTERLEAVED_ATTRIBS) or multiple buffer objects
(if the buffer mode is SEPARATE_ATTRIBS). A program will fail to link if:

   • the count specified by TransformFeedbackVaryings is non-zero, but the
     program object has no vertex shader;

   • any variable name specified in the varyings array is not declared as an output
     in the vertex shader.

   • any two entries in the varyings array specify the same varying variable;

   • the total number of components to capture in any varying variable in varyings
     is greater than the constant MAX_TRANSFORM_FEEDBACK_SEPARATE_-
     COMPONENTS and the buffer mode is SEPARATE_ATTRIBS; or

   • the total number of components to capture is greater than the constant
     MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS and the buffer
     mode is INTERLEAVED_ATTRIBS.

    To determine the set of varying variables in a linked program object that will
be captured in transform feedback mode, the command:



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             102


      void GetTransformFeedbackVarying( uint program,
         uint index, sizei bufSize, sizei *length, sizei *size,
         enum *type, char *name );

provides information about the varying variable selected by index. An index of 0
selects the first varying variable specified in the varyings array of TransformFeed-
backVaryings, and an index of TRANSFORM_FEEDBACK_VARYINGS-1 selects the
last such varying variable. The value of TRANSFORM_FEEDBACK_VARYINGS can
be queried with GetProgramiv (see section 6.1.15). If index is greater than or
equal to TRANSFORM_FEEDBACK_VARYINGS, the error INVALID_VALUE is gen-
erated. The parameter program is the name of a program object for which the
command LinkProgram has been issued in the past. If program has not been
linked, the error INVALID_OPERATION is generated. If a new set of varying
variables is specified by TransformFeedbackVaryings after a program object has
been linked, the information returned by GetTransformFeedbackVarying will
not reflect those variables until the program is re-linked.
     The name of the selected varying is returned as a null-terminated string in
name. The actual number of characters written into name, excluding the null termi-
nator, is returned in length. If length is NULL, no length is returned. The maximum
number of characters that may be written into name, including the null termina-
tor, is specified by bufSize. The returned varying name can be the name of a user
defined varying variable or the name of a built-in varying (which begin with the
prefix gl_, see the OpenGL Shading Language specification for a complete list).
  The length of the longest varying name in program is given by TRANSFORM_-
FEEDBACK_VARYING_MAX_LENGTH, which can be queried with GetProgramiv
(see section 6.1.15).
     For the selected varying variable, its type is returned into type. The size of
the varying is returned into size. The value in size is in units of the type returned
in type. The type returned can be any of the scalar, vector, or matrix attribute
types returned by GetActiveAttrib. If an error occurred, the return parameters
length, size, type and name will be unmodified. This command will return as much
information about the varying variables as possible. If no information is available,
length will be set to zero and name will be an empty string. This situation could
arise if GetTransformFeedbackVarying is called after a failed link.

2.14.7   Shader Execution
If a successfully linked program object that contains a vertex shader is made current
by calling UseProgram, the executable version of the vertex shader is used to
process incoming vertex values rather than the fixed-function vertex processing


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                            103


described in sections 2.15 through 2.10 . In particular,

   • The model-view and projection matrices are not applied to vertex coordi-
     nates (section 2.15).

   • The texture matrices are not applied to texture coordinates (section 2.12.1).

   • Normals are not transformed to eye coordinates, and are not rescaled or nor-
     malized (section 2.12.2).

   • Normalization of AUTO_NORMAL evaluated normals is not performed. (sec-
     tion 5.1).

   • Texture coordinates are not generated automatically (section 2.12.3).

   • Per vertex lighting is not performed (section 2.13.1).

   • Color material computations are not performed (section 2.13.3).

   • Color index lighting is not performed (section 2.13.5).

   • All of the above applies when setting the current raster position (sec-
     tion 2.22).

   The following operations are applied to vertex values that are the result of
executing the vertex shader:

   • Color clamping or masking (section 2.13.6).

   • Perspective division on clip coordinates (section 2.15).

   • Viewport mapping, including depth range scaling (section 2.15.1).

   • Clipping, including client-defined clip planes (section 2.20).

   • Front face determination (section 2.13.1).

   • Flat-shading (section 2.13.7).

   • Color, texture coordinate, fog, point-size and generic attribute clipping (sec-
     tion 2.20.1).

   • Final color processing (section 2.21.

    There are several special considerations for vertex shader execution described
in the following sections.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                                 104


Shader Only Texturing
This section describes texture functionality that is only accessible through vertex or
fragment shaders. Also refer to section 3.9 and to the OpenGL Shading Language
Specification, section 8.7.
     Texel Fetches
     The OpenGL Shading Language texel fetch functions provide the ability to
extract a single texel from a specified texture image. The integer coordinates passed
to the texel fetch functions are used directly as the texel coordinates (i, j, k) into the
texture image. This in turn means the texture image is point-sampled (no filtering
is performed).
     The level of detail accessed is computed by adding the specified level-of-detail
parameter lod to the base level of the texture, levelbase .
     The texel fetch functions can not perform depth comparisons or access cube
maps. Unlike filtered texel accesses, texel fetches do not support LOD clamping or
any texture wrap mode, and require a mipmapped minification filter to access any
level of detail other than the base level.
     The results of the texel fetch are undefined if any of the following conditions
hold:

    • the computed LOD is less than the texture’s base level (levelbase ) or greater
      than the maximum level (levelmax )

    • the computed LOD is not the texture’s base level and the texture’s minifica-
      tion filter is NEAREST or LINEAR

    • the layer specified for array textures is negative or greater than the number
      of layers in the array texture,

    • the texel coordinates (i, j, k) refer to a border texel outside the defined ex-
      tents of the specified LOD, where any of

                           i < −bs                      i ≥ ws − bs
                          j < −bs                       j ≥ hs − bs
                          k < −bs                       k ≥ ds − bs

      and the size parameters ws , hs , ds , and bs refer to the width, height, depth,
      and border size of the image, as in equations 3.17

    • the texture being accessed is not complete (or cube complete for cubemaps).




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                               105


    Texture Size Query
    The OpenGL Shading Language texture size functions provide the ability to
query the size of a texture image. The LOD value lod passed in as an argument
to the texture size functions is added to the levelbase of the texture to determine
a texture image level. The dimensions of that image level, excluding a possible
border, are then returned. If the computed texture image level is outside the range
[levelbase , levelmax ], the results are undefined. When querying the size of an array
texture, both the dimensions and the layer index are returned.

Texture Access
Vertex shaders have the ability to do a lookup into a texture map. The maxi-
mum number of texture image units available to a vertex shader is the value of
the implementation-dependent constant MAX_VERTEX_TEXTURE_IMAGE_UNITS.
The maximum number of texture image units available to a fragment shader is the
value of MAX_TEXTURE_IMAGE_UNITS. Both the vertex shader and fragment pro-
cessing combined cannot use more than the value of MAX_COMBINED_TEXTURE_-
IMAGE_UNITS texture image units. If both the vertex shader and the fragment
processing stage access the same texture image unit, then that counts as using two
texture image units against the MAX_COMBINED_TEXTURE_IMAGE_UNITS limit.
     When a texture lookup is performed in a vertex shader, the filtered texture value
τ is computed in the manner described in sections 3.9.8 and 3.9.9, and converted
to a texture source color Cs according to table 3.25 (section 3.9.14). A four-
component vector (Rs , Gs , Bs , As ) is returned to the vertex shader. Texture lookup
functions (see section 8.7 of the OpenGL Shading Language Specification) may
return floating-point, signed, or unsigned integer values depending on the function
and the internal format of the texture.
     In a vertex shader, it is not possible to perform automatic level-of-detail calcu-
lations using partial derivatives of the texture coordinates with respect to window
coordinates as described in section 3.9.8. Hence, there is no automatic selection of
an image array level. Minification or magnification of a texture map is controlled
by a level-of-detail value optionally passed as an argument in the texture lookup
functions. If the texture lookup function supplies an explicit level-of-detail value l,
then the pre-bias level-of-detail value λbase (x, y) = l (replacing equation 3.18). If
the texture lookup function does not supply an explicit level-of-detail value, then
λbase (x, y) = 0. The scale factor ρ(x, y) and its approximation function f (x, y)
(see equation 3.22) are ignored.
     Texture lookups involving textures with depth component data can either re-
turn the depth data directly or return the results of a comparison with a refer-
ence depth value specified in the coordinates passed to the texture lookup func-


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             106


tion, as described in section 3.9.15. The comparison operation is requested in
the shader by using any of the shadow sampler types (sampler1DShadow,
sampler2DShadow, or sampler2DRectShadow), and in the texture using the
TEXTURE_COMPARE_MODE parameter. These requests must be consistent; the re-
sults of a texture lookup are undefined if:

   • The sampler used in a texture lookup function is not one of the shadow
     sampler types, the texture object’s internal format is DEPTH_COMPONENT
     or DEPTH_STENCIL, and the TEXTURE_COMPARE_MODE is not NONE.

   • The sampler used in a texture lookup function is one of the shadow sam-
     pler types, the texture object’s internal format is DEPTH_COMPONENT or
     DEPTH_STENCIL, and the TEXTURE_COMPARE_MODE is NONE.

   • The sampler used in a texture lookup function is one of the shadow sampler
     types, and the texture object’s internal format is not DEPTH_COMPONENT or
     DEPTH_STENCIL.

    The stencil index texture internal component is ignored if the base internal
format is DEPTH_STENCIL.
    If a vertex shader uses a sampler where the associated texture object is not com-
plete, as defined in section 3.9.11, the texture image unit will return (R, G, B, A)
= (0, 0, 0, 1).

Shader Inputs
Besides having access to vertex attributes and uniform variables, vertex shaders
can access the read-only built-in variables gl_VertexID and gl_InstanceID
    gl_VertexID holds the integer index i explicitly passed to ArrayElement to
specify the vertex, or implicitly passed by DrawArrays or one of the other drawing
commands defined in section 2.8.1. The value of gl_VertexID is defined if and
only if:

   • the vertex comes from a vertex array command that specifies a com-
     plete primitive (DrawArrays, MultiDrawArrays, DrawElements, Mul-
     tiDrawElements, or DrawRangeElements)

   • all enabled vertex arrays have non-zero buffer object bindings, and

   • the vertex does not come from a display list, even if the display list was
     compiled using one of the vertex array commands described above with data
     sourced from buffer objects.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                              107


    gl_InstanceID holds the integer index of the current primitive in an in-
stanced draw call (see section 2.8.1).
    Section 7.1 of the OpenGL Shading Language Specification also describes
these variables.

Shader Outputs
A vertex shader can write to built-in as well as user-defined varying variables.
These values are expected to be interpolated across the primitive it outputs, un-
less they are specified to be flat shaded. Refer to section 2.13.7 and the OpenGL
Shading Language specification sections 4.3.6, 7.1 and 7.6 for more detail.
    The built-in output variables gl_FrontColor, gl_BackColor, gl_-
FrontSecondaryColor, and gl_BackSecondaryColor hold the front and
back colors for the primary and secondary colors for the current vertex.
    The built-in output variable gl_TexCoord[] is an array and holds the set of
texture coordinates for the current vertex.
    The built-in output variable gl_FogFragCoord is used as the c value de-
scribed in section 3.11.
    The built-in special variable gl_Position is intended to hold the homoge-
neous vertex position. Writing gl_Position is optional.
    The built-in special variables gl_ClipVertex and gl_ClipDistance re-
spectively hold the vertex coordinate and clip distance(s) used in the clipping stage,
as described in section 2.20. If clipping is enabled, only one of gl_ClipVertex
and gl_ClipDistance should be written.
    The built in special variable gl_PointSize, if written, holds the size of the
point to be rasterized, measured in pixels.

Position Invariance
If a vertex shader uses the built-in function ftransform to generate a vertex posi-
tion, then this generally guarantees that the transformed position will be the same
whether using this vertex shader or the fixed-function pipeline. This allows for cor-
rect multi-pass rendering algorithms, where some passes use fixed-function vertex
transformation and other passes use a vertex shader. If a vertex shader does not use
ftransform to generate a position, transformed positions are not guaranteed to
match, even if the sequence of instructions used to compute the position match the
sequence of transformations described in section 2.15.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                             108


Validation
It is not always possible to determine at link time if a program object actually will
execute. Therefore validation is done when the first rendering command is issued,
to determine if the currently active program object can be executed. If it cannot be
executed then no fragments will be rendered, and the error INVALID_OPERATION
will be generated.
     This error is generated by Begin, RasterPos, or any command that performs
an implicit Begin if:

   • any two active samplers in the current program object are of different types,
     but refer to the same texture image unit,

   • any active sampler in the current program object refers to a texture image
     unit where fixed-function fragment processing accesses a texture target that
     does not match the sampler type, or

   • the sum of the number of active samplers in the program and the number of
     texture image units enabled for fixed-function fragment processing exceeds
     the combined limit on the total number of texture image units allowed.

    Fixed-function fragment processing operations will be performed if the pro-
gram object in use has no fragment shader.
    The INVALID_OPERATION error reported by these rendering commands may
not provide enough information to find out why the currently active program object
would not execute. No information at all is available about a program object that
would still execute, but is inefficient or suboptimal given the current GL state. As
a development aid, use the command

      void ValidateProgram( uint program );

to validate the program object program against the current GL state. Each program
object has a boolean status, VALIDATE_STATUS, that is modified as a result of
validation. This status can be queried with GetProgramiv (see section 6.1.15).
If validation succeeded this status will be set to TRUE, otherwise it will be set to
FALSE. If validation succeeded the program object is guaranteed to execute, given
the current GL state. If validation failed, the program object is guaranteed to not
execute, given the current GL state.
    ValidateProgram will check for all the conditions that could lead to an
INVALID_OPERATION error when rendering commands are issued, and may check
for other conditions as well. For example, it could give a hint on how to optimize
some piece of shader code. The information log of program is overwritten with

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                           109


information on the results of the validation, which could be an empty string. The
results written to the information log are typically only useful during application
development; an application should not expect different GL implementations to
produce identical information.
    A shader should not fail to compile, and a program object should not fail to
link due to lack of instruction space or lack of temporary variables. Implementa-
tions should ensure that all valid shaders and program objects may be successfully
compiled, linked and executed.

Undefined Behavior
When using array or matrix variables in a shader, it is possible to access a vari-
able with an index computed at run time that is outside the declared extent of the
variable. Such out-of-bounds reads will return undefined values; out-of-bounds
writes will have undefined results and could corrupt other variables used by shader
or the GL. The level of protection provided against such errors in the shader is
implementation-dependent.

2.14.8   Required State
The GL maintains state to indicate which shader and program object names are in
use. Initially, no shader or program objects exist, and no names are in use.
    The state required per shader object consists of:

   • An unsigned integer specifying the shader object name.

   • An integer holding the value of SHADER_TYPE.

   • A boolean holding the delete status, initially FALSE.

   • A boolean holding the status of the last compile, initially FALSE.

   • An array of type char containing the information log, initially empty.

   • An integer holding the length of the information log.

   • An array of type char containing the concatenated shader string, initially
     empty.

   • An integer holding the length of the concatenated shader string.

The state required per program object consists of:



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.14. VERTEX SHADERS                                                            110


   • An unsigned integer indicating the program object name.

   • A boolean holding the delete status, initially FALSE.

   • A boolean holding the status of the last link attempt, initially FALSE.

   • A boolean holding the status of the last validation attempt, initally FALSE.

   • An integer holding the number of attached shader objects.

   • A list of unsigned integers to keep track of the names of the shader objects
     attached.

   • An array of type char containing the information log, initially empty.

   • An integer holding the length of the information log.

   • An integer holding the number of active uniforms.

   • For each active uniform, three integers, holding its location, size, and type,
     and an array of type char holding its name.

   • An array holding the values of each active uniform.

   • An integer holding the number of active attributes.

   • For each active attribute, three integers holding its location, size, and type,
     and an array of type char holding its name.

Additional state required to support vertex shaders consists of:

   • A bit indicating whether or not vertex program two-sided color mode is en-
     abled, initially disabled.

   • A bit indicating whether or not vertex program point size mode (sec-
     tion 3.4.1) is enabled, initially disabled.

Additionally, one unsigned integer is required to hold the name of the current pro-
gram object, if any.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.15. COORDINATE TRANSFORMATIONS                                                  111


2.15     Coordinate Transformations
Clip coordinates for a vertex result from fixed-function transformation of the vertex
coordinates or from vertex shader execution, which yields a vertex coordinate gl_-
Position. Perspective division on clip coordinates yields normalized device
coordinates, followed by a viewport transformation to convert these coordinates
into window coordinates.                         
                                                   xc
                                                 yc 
    If a vertex in clip coordinates is given by 
                                                 zc 
                                                      

                                                  wc
    then the vertex’s normalized device coordinates are
                                             xc 
                                   xd           wc
                                 yd  = P  yc  .
                                                wc
                                                zc
                                   zd           wc


2.15.1    Controlling the Viewport
The viewport transformation is determined by the viewport’s width and height in
pixels, px and py , respectively,
                         and its center (ox , oy ) (also in pixels). The vertex’s
                         xw
window coordinates, yw  , are given by
                       
                         zw
                                 px             
                            xw          2 xd + ox
                            yw  =  py yd + oy  .
                                        2
                                     f −n      n+f
                             zw        2 zd + 2

The factor and offset applied to zd encoded by n and f are set using

       void DepthRange( clampd n, clampd f );

zw is represented as either fixed- or floating-point depending on whether the frame-
buffer’s depth buffer uses a fixed- or floating-point representation. If the depth
buffer uses fixed-point, we assume that it represents each value k/(2m − 1), where
k ∈ {0, 1, . . . , 2m − 1}, as k (e.g. 1.0 is represented in binary as a string of all
ones). The parameters n and f are clamped to the range [0, 1], as are all arguments
of type clampd or clampf.
    Viewport transformation parameters are specified using

       void Viewport( int x, int y, sizei w, sizei h );

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.16. ASYNCHRONOUS QUERIES                                                        112


where x and y give the x and y window coordinates of the viewport’s lower left
corner and w and h give the viewport’s width and height, respectively. The viewport
parameters shown in the above equations are found from these values as

                                    ox = x + w2
                                    oy = y + h2
                                      px = w
                                      py = h.

    Viewport width and height are clamped to implementation-dependent maxi-
mums when specified. The maximum width and height may be found by issuing
an appropriate Get command (see chapter 6). The maximum viewport dimensions
must be greater than or equal to the larger of the visible dimensions of the display
being rendered to (if a display exists), and the largest renderbuffer image which
can be successfully created and attached to a framebuffer object (see chapter 4).
INVALID_VALUE is generated if either w or h is negative.
    The state required to implement the viewport transformation is four integers
and two clamped floating-point values. In the initial state, w and h are set to the
width and height, respectively, of the window into which the GL is to do its ren-
dering. If the default framebuffer is bound but no default framebuffer is associated
with the GL context (see chapter 4), then w and h are initially set to zero. ox , oy ,
n, and f are set to w2 , h2 , 0.0, and 1.0, respectively.


2.16     Asynchronous Queries
Asynchronous queries provide a mechanism to return information about the pro-
cessing of a sequence of GL commands. There are two query types supported by
the GL. Transform feedback queries (see section 2.18) return information on the
number of vertices and primitives processed by the GL and written to one or more
buffer objects. Occlusion queries (see section 4.1.7) count the number of fragments
or samples that pass the depth test.
    The results of asynchronous queries are not returned by the GL immediately
after the completion of the last command in the set; subsequent commands can
be processed while the query results are not complete. When available, the query
results are stored in an associated query object. The commands described in sec-
tion 6.1.12 provide mechanisms to determine when query results are available and
return the actual results of the query. The name space for query objects is the
unsigned integers, with zero reserved by the GL.
    Each type of query supported by the GL has an active query object name. If
the active query object name for a query type is non-zero, the GL is currently

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.16. ASYNCHRONOUS QUERIES                                                         113


tracking the information corresponding to that query type and the query results
will be written into the corresponding query object. If the active query object for a
query type name is zero, no such information is being tracked.
    A query object is created and made active by calling

      void BeginQuery( enum target, uint id );

target indicates the type of query to be performed; valid values of target are defined
in subsequent sections. If id is an unused query object name, the name is marked
as used and associated with a new query object of the type specified by target.
Otherwise id must be the name of an existing query object of that type.
    In a deprecated context, BeginQuery fails and an INVALID_OPERATION error
is generated if id is not a name returned from a previous call to GenQueries, or if
such a name has since been deleted with DeleteQueries.
    BeginQuery sets the active query object name for the query type given by
target to id. If BeginQuery is called with an id of zero, if the active query object
name for target is non-zero, if id is the name of an existing query object whose
type does not match target, if id is the active query object name for any query type,
or if id is the active query object for condtional rendering (see section 2.17), the
error INVALID_OPERATION is generated.
    The command

      void EndQuery( enum target );

marks the end of the sequence of commands to be tracked for the query type given
by target. The active query object for target is updated to indicate that query results
are not available, and the active query object name for target is reset to zero. When
the commands issued prior to EndQuery have completed and a final query result
is available, the query object active when EndQuery is called is updated by the
GL. The query object is updated to indicate that the query results are available and
to contain the query result. If the active query object name for target is zero when
EndQuery is called, the error INVALID_OPERATION is generated.
    The command

      void GenQueries( sizei n, uint *ids );

returns n previously unused query object names in ids. These names are marked
as used, but no object is associated with them until the first time they are used by
BeginQuery.
    Query objects are deleted by calling


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.17. CONDITIONAL RENDERING                                                      114


       void DeleteQueries( sizei n, const uint *ids );

ids contains n names of query objects to be deleted. After a query object is deleted,
its name is again unused. Unused names in ids are silently ignored.
     Query objects contain two pieces of state: a single bit indicating whether a
query result is available, and an integer containing the query result value. The
number of bits used to represent the query result is implementation-dependent. In
the initial state of a query object, the result is available and its value is zero.
     The necessary state for each query type is an unsigned integer holding the
active query object name (zero if no query object is active), and any state necessary
to keep the current results of an asynchronous query in progress.


2.17     Conditional Rendering
Conditional rendering can be used to discard rendering commands based on the
result of an occlusion query. Conditional rendering is started and stopped using the
commands

       void BeginConditionalRender( uint id, enum mode );
       void EndConditionalRender( void );

id specifies the name of an occlusion query object whose results are used to deter-
mine if the rendering commands are discarded. If the result (SAMPLES_PASSED)
of the query is zero, all rendering commands between BeginConditionalRender
and the corresponding EndConditionalRender are discarded. In this case, Begin,
End, all vertex array commands (see section 2.8) performing an implicit Begin
and End, DrawPixels (see section 3.7.5), Bitmap (see section 3.8), Accum (see
section 4.2.4), EvalMesh1 and EvalMesh2 (see section 5.1), and CopyPixels (see
section 4.3.3), as well as Clear and ClearBuffer* (see section 4.2.3), have no
effect. The effect of commands setting current vertex state, such as Color or Ver-
texAttrib, are undefined. If the result of the occlusion query is non-zero, such
commands are not discarded.
    mode specifies how BeginConditionalRender interprets the results of the oc-
clusion query given by id. If mode is QUERY_WAIT, the GL waits for the results of
the query to be available and then uses the results to determine if subsquent render-
ing commands are discarded. If mode is QUERY_NO_WAIT, the GL may choose to
unconditionally execute the subsequent rendering commands without waiting for
the query to complete.
    If mode is QUERY_BY_REGION_WAIT, the GL will also wait for occlusion
query results and discard rendering commands if the result of the occlusion query is

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.18. TRANSFORM FEEDBACK                                                        115


zero. If the query result is non-zero, subsequent rendering commands are executed,
but the GL may discard the results of the commands for any region of the frame-
buffer that did not contribute to the sample count in the specified occlusion query.
Any such discarding is done in an implementation-dependent manner, but the ren-
dering command results may not be discarded for any samples that contributed
to the occlusion query sample count. If mode is QUERY_BY_REGION_NO_WAIT,
the GL operates as in QUERY_BY_REGION_WAIT, but may choose to uncondition-
ally execute the subsequent rendering commands without waiting for the query to
complete.
    If BeginConditionalRender is called while conditional rendering is in
progress, or if EndConditionalRender is called while conditional rendering is not
in progress, the error INVALID_OPERATION is generated. The error INVALID_-
VALUE is generated if id is not the name of an existing query object. The error
INVALID_OPERATION is generated if id is the name of a query object with a target
other than SAMPLES_PASSED, or id is the name of a query currently in progress.


2.18     Transform Feedback
In transform feedback mode, attributes of the vertices of transformed primitives
processed by a vertex shader are written out to one or more buffer objects. The
vertices are fed back after vertex color clamping, but before clipping. The trans-
formed vertices may be optionally discarded after being stored into one or more
buffer objects, or they can be passed on down to the clipping stage for further
processing. The set of attributes captured is determined when a program is linked.
    Transform feedback is started and finished by calling

       void BeginTransformFeedback( enum primitiveMode );

   and

       void EndTransformFeedback( void );

respectively. Transform feedback is said to be active after a call to BeginTrans-
formFeedback and inactive after a call to EndTransformFeedback. primitive-
Mode is one of TRIANGLES, LINES, or POINTS, and specifies the output type of
primitives that will be recorded into the buffer objects bound for transform feed-
back (see below). primitiveMode restricts the primitive types that may be rendered
while transform feedback is active, as shown in table 2.14.
    Transform feedback commands must be paired; the error INVALID_-
OPERATION is generated by BeginTransformFeedback if transform feedback is
active, and by EndTransformFeedback if transform feedback is inactive.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.18. TRANSFORM FEEDBACK                                                          116


    Transform Feedback      Allowed render primitive
    primitiveMode           (Begin) modes
    POINTS                  POINTS
    LINES                   LINES, LINE_LOOP, LINE_STRIP
    TRIANGLES               TRIANGLES, TRIANGLE_STRIP, TRIANGLE_FAN
                            QUADS, QUAD_STRIP, POLYGON

Table 2.14: Legal combinations of the transform feedback primitive mode, as
passed to BeginTransformFeedback, and the current primitive mode.



    Transform feedback mode captures the values of varying variables written by
an active vertex shader. The error INVALID_OPERATION is generated by Begin-
TransformFeedback if no vertex shader is active.
    When transform feedback is active, all geometric primitives generated must be
compatible with the value of primitiveMode passed to BeginTransformFeedback.
The error INVALID_OPERATION is generated by Begin or any operation that im-
plicitly calls Begin (such as DrawElements) if mode is not one of the allowed
modes in table 2.14.
    Buffer objects are made to be targets of transform feedback by calling one of
the commands

      void BindBufferRange( enum target, uint index,
         uint buffer, intptr offset, sizeiptr size );
      void BindBufferBase( enum target, uint index, uint buffer );

with target set to TRANSFORM_FEEDBACK_BUFFER. There is an array of buffer
object binding points that are used while transform feedback is active, plus a sin-
gle general binding point that can be used by other buffer object manipulation
functions (e.g., BindBuffer, MapBuffer). Both commands bind the buffer object
named by buffer to the general binding point, and additionally bind the buffer ob-
ject to the binding point in the array given by index. The error INVALID_VALUE
is generated if index is greater than or equal to the value of MAX_TRANSFORM_-
FEEDBACK_SEPARATE_ATTRIBS.
    For BindBufferRange, offset specifies a starting offset into the buffer object
buffer, and size specifies the amount of data that can be written to the buffer object
while transform feedback mode is active. Both offset and size are in basic machine
units. The error INVALID_VALUE is generated if the value of size is less than
or equal to zero, if offset + size is greater than the value of BUFFER_SIZE, or if
either offset or size are not a multiple of 4. BindBufferBase is equivalent to calling

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.18. TRANSFORM FEEDBACK                                                           117


BindBufferRange with offset zero and size equal to the size of buffer, rounded
down to the nearest multiple of 4.
    When an individual point, line, or triangle primitive reaches the transform feed-
back stage while transform feedback is active, the values of the specified varying
variables of the vertex are appended to the buffer objects bound to the transform
feedback binding points. The attributes of the first vertex received after Begin-
TransformFeedback are written at the starting offsets of the bound buffer objects
set by BindBufferRange, and subsequent vertex attributes are appended to the
buffer object. When capturing line and triangle primitives, all attributes of the first
vertex are written first, followed by attributes of the subsequent vertices. When
writing varying variables that are arrays, individual array elements are written in
order. For multi-component varying variables or varying array elements, the indi-
vidual components are written in order. The value for any attribute specified to be
streamed to a buffer object but not actually written by a vertex shader is undefined.
    When quads and polygons are provided to transform feedback with a primitive
mode of TRIANGLES, they will be tessellated and recorded as triangles (the order of
tessellation within a primitive is undefined). Individual lines or triangles of a strip
or fan primitive will be extracted and recorded separately. Incomplete primitives
are not recorded.
    Transform feedback can operate in either INTERLEAVED_ATTRIBS or
SEPARATE_ATTRIBS mode. In INTERLEAVED_ATTRIBS mode, the values of one
or more varyings are written, interleaved, into the buffer object bound to the first
transform feedback binding point (index = 0). If more than one varying variable is
written, they will be recorded in the order specified by TransformFeedbackVary-
ings (see section 2.14.6). In SEPARATE_ATTRIBS mode, the first varying variable
specified by TransformFeedbackVaryings is written to the first transform feed-
back binding point; subsequent varying variables are written to the subsequent
transform feedback binding points. The total number of variables that may be cap-
tured in separate mode is given by MAX_TRANSFORM_FEEDBACK_SEPARATE_-
ATTRIBS.
    If recording the vertices of a primitive to the buffer objects being used for trans-
form feedback purposes would result in either exceeding the limits of any buffer
object’s size, or in exceeding the end position offset + size − 1, as set by Bind-
BufferRange, then no vertices of that primitive are recorded in any buffer object,
and the counter corresponding to the asynchronous query target TRANSFORM_-
FEEDBACK_PRIMITIVES_WRITTEN (see section 2.19) is not incremented.
    In either separate or interleaved modes, all transform feedback binding points
that will be written to must have buffer objects bound when BeginTransformFeed-
back is called. The error INVALID_OPERATION is generated by BeginTrans-
formFeedback if any binding point used in transform feedback mode does not

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.19. PRIMITIVE QUERIES                                                           118


have a buffer object bound. In interleaved mode, only the first buffer object bind-
ing point is ever written to. The error INVALID_OPERATION is also generated
by BeginTransformFeedback if no binding points would be used, either because
no program object is active or because the active program object has specified no
varying variables to record.
    While transform feedback is active, the set of attached buffer objects and the set
of varying variables captured may not be changed. If transform feedback is active,
the error INVALID_OPERATION is generated by UseProgram, by LinkProgram
if program is the currently active program object, and by BindBufferRange or
BindBufferBase if target is TRANSFORM_FEEDBACK_BUFFER.
    Buffers should not be bound or in use for both transform feedback and other
purposes in the GL. Specifically, if a buffer object is simultaneously bound to a
transform feedback buffer binding point and elsewhere in the GL, any writes to
or reads from the buffer generate undefined values. Examples of such bindings
include DrawPixels and ReadPixels to a pixel buffer object binding point and
client access to a buffer mapped with MapBuffer.
    However, if a buffer object is written and read sequentially by transform feed-
back and other mechanisms, it is the responsibility of the GL to ensure that data
are accessed consistently, even if the implementation performs the operations in a
pipelined manner. For example, MapBuffer may need to block pending the com-
pletion of a previous transform feedback operation.


2.19     Primitive Queries
Primitive queries use query objects to track the number of primitives generated by
the GL and to track the number of primitives written to transform feedback buffers.
    When BeginQuery is called with a target of PRIMITIVES_GENERATED, the
primitives-generated count maintained by the GL is set to zero. When the generated
primitive query is active, the primitives-generated count is incremented every time
a primitive reaches the “Discarding Primitives Before Rasterization” stage (see
section 3.1) immediately before rasterization.
    When BeginQuery is called with a target of TRANSFORM_FEEDBACK_-
PRIMITIVES_WRITTEN, the transform-feedback-primitives-written count main-
tained by the GL is set to zero. When the transform feedback primitive written
query is active, the transform-feedback-primitives-written count is incremented ev-
ery time a primitive is recorded into a buffer object. If transform feedback is not
active, this counter is not incremented. If the primitive does not fit in the buffer
object, the counter is not incremented.
    These two queries can be used together to determine if all primitives have been


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.20. PRIMITIVE CLIPPING                                                          119


written to the bound feedback buffers; if both queries are run simultaneously and
the query results are equal, all primitives have been written to the buffer(s). If the
number of primitives written is less than the number of primitives generated, the
buffer is full.


2.20     Primitive Clipping
    Primitives are clipped to the clip volume. In clip coordinates, the view volume
is defined by
                                  −wc ≤ xc ≤ wc
                                  −wc ≤ yc ≤ wc
                                  −wc ≤ zc ≤ wc .
This view volume may be further restricted by as many as n client-defined clip
planes to generate the clip volume. Each client-defined plane specifies a half-
space. (n is an implementation-dependent maximum that must be at least 6.)
The clip volume is the intersection of all such half-spaces with the view volume (if
no client-defined clip planes are enabled, the clip volume is the view volume).
    A client-defined clip plane is specified with
       void ClipPlane( enum p, double eqn[4] );

The value of the first argument, p, is a symbolic constant, CLIP_PLANEi, where i is
an integer between 0 and n − 1, indicating one of n client-defined clip planes. eqn
is an array of four double-precision floating-point values. These are the coefficients
of a plane equation in object coordinates: p1 , p2 , p3 , and p4 (in that order). The
inverse of the current model-view matrix is applied to these coefficients, at the time
they are specified, yielding

                    p1 p2 p3 p4 = p1 p2 p3 p4 M −1

(where M is the current model-view matrix; the resulting plane equation is unde-
fined if M is singular and may be inaccurate if M is poorly-conditioned) to obtain
the plane equation coefficients in eye coordinates. All points with eye coordinates
                   T
  xe ye ze we that satisfy
                                              
                                                xe
                                              ye 
                           p1 p2 p3 p4       ze  ≥ 0
                                                   

                                               we
lie in the half-space defined by the plane; points that do not satisfy this condition
do not lie in the half-space.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.20. PRIMITIVE CLIPPING                                                           120

                                                                        T
     When a vertex shader is active, the vector xe ye ze we is no longer
computed. Instead, the value of the gl_ClipVertex built-in variable is used in
its place. If gl_ClipVertex is not written by the vertex shader, its value is un-
defined, which implies that the results of clipping to any client-defined clip planes
are also undefined. The user must ensure that the clip vertex and client-defined clip
planes are defined in the same coordinate space.
     A vertex shader may, instead of writing to gl_ClipVertex write a single clip
distance for each supported clip plane to elements of the gl_ClipDistance[]
array. The half-space corresponding to clip plane n is then given by the set of
points satisfying the inequality

                                     cn (P ) ≥ 0,
    where cn (P ) is the value of clip distance n at point P . For point primitives,
cn (P ) is simply the clip distance for the vertex in question. For line and triangle
primitives, per-vertex clip distances are interpolated using a weighted mean, with
weights derived according to the algorithms described in sections 3.5 and 3.6.
    Client-defined clip planes are enabled with the generic Enable command and
disabled with the Disable command. The value of the argument to either com-
mand is CLIP_DISTANCEi where i is an integer between 0 and n − 1; specifying a
value of i enables or disables the plane equation with index i. The constants obey
CLIP_DISTANCEi = CLIP_DISTANCE0 + i.
    If the primitive under consideration is a point, then clipping passes it un-
changed if it lies within the clip volume; otherwise, it is discarded.
    If the primitive is a line segment, then clipping does nothing to it if it lies
entirely within the clip volume, and discards it if it lies entirely outside the volume.
    If part of the line segment lies in the volume and part lies outside, then the
line segment is clipped and new vertex coordinates are computed for one or both
vertices. A clipped line segment endpoint lies on both the original line segment
and the boundary of the clip volume.
    This clipping produces a value, 0 ≤ t ≤ 1, for each clipped vertex. If the
coordinates of a clipped vertex are P and the original vertices’ coordinates are P1
and P2 , then t is given by

                               P = tP1 + (1 − t)P2 .

The value of t is used to clip color, secondary color, texture coordinate, fog coor-
dinate, and vertex shader varying variables as described in section 2.20.1.
    If the primitive is a polygon, then it is passed if every one of its edges lies
entirely inside the clip volume and either clipped or discarded otherwise. Polygon
clipping may cause polygon edges to be clipped, but because polygon connectivity

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.20. PRIMITIVE CLIPPING                                                           121


must be maintained, these clipped edges are connected by new edges that lie along
the clip volume’s boundary. Thus, clipping may require the introduction of new
vertices into a polygon. Edge flags are associated with these vertices so that edges
introduced by clipping are flagged as boundary (edge flag TRUE), and so that orig-
inal edges of the polygon that become cut off at these vertices retain their original
flags.
     If it happens that a polygon intersects an edge of the clip volume’s boundary,
then the clipped polygon must include a point on this boundary edge. This point
must lie in the intersection of the boundary edge and the convex hull of the vertices
of the original polygon. We impose this requirement because the polygon may not
be exactly planar.
     Primitives rendered with user-defined clip planes must satisfy a complementar-
ity criterion. Suppose a single clip plane with coefficients p1 p2 p3 p4 (or a
number of similarly specified clip planes) is enabled and a series of primitives are
drawn. Next, suppose that the original clip plane is respecified with coefficients
  −p1 −p2 −p3 −p4 (and correspondingly for any other clip planes) and the
primitives are drawn again (and the GL is otherwise in the same state). In this
case, primitives must not be missing any pixels, nor may any pixels be drawn twice
in regions where those primitives are cut by the clip planes.
     The state required for clipping is at least 8 bits indicating which of the client-
defined plane equations are enabled, and at least 8 corresponding sets of plane
equations (each consisting of four double-precision floating-point coefficients) In
the initial state, all plane equations are disabled and all client-defined plane equa-
tion coefficients are zero.


2.20.1    Color and Associated Data Clipping
    After lighting, clamping or masking and possible flatshading, colors are
clipped. Those colors associated with a vertex that lies within the clip volume
are unaffected by clipping. If a primitive is clipped, however, the colors assigned
to vertices produced by clipping are clipped.
    Let the colors assigned to the two vertices P1 and P2 of an unclipped edge be
c1 and c2 . The value of t (section 2.20) for a clipped point P is used to obtain the
color associated with P as

                                c = tc1 + (1 − t)c2 .
(For a color index color, multiplying a color by a scalar means multiplying the
index by the scalar. For an RGBA color, it means multiplying each of R, G, B,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.21. FINAL COLOR PROCESSING                                                      122


and A by the scalar. Both primary and secondary colors are treated in the same
fashion.)
     Polygon clipping may create a clipped vertex along an edge of the clip volume’s
boundary. This situation is handled by noting that polygon clipping proceeds by
clipping against one plane of the clip volume’s boundary at a time. Color clipping
is done in the same way, so that clipped points always occur at the intersection of
polygon edges (possibly already clipped) with the clip volume’s boundary.
     Texture and fog coordinates, vertex shader varying variables (section 2.14.6),
and point sizes computed on a per vertex basis must also be clipped when a prim-
itive is clipped. The method is exactly analogous to that used for color clipping.

    For vertex shader varying variables specified to be interpolated without per-
spective correction (using the noperspective qualifier), the value of t used to
obtain the varying value associated with P will be adjusted to produce results that
vary linearly in screen space.
    Varying outputs of integer or unsigned integer type must always be declared
with the flat qualifier. Since such varyings are constant over the primitive being
rasterized (see sections 3.5.1 and 3.6.1), no interpolation is performed.
2.21     Final Color Processing
In RGBA mode with vertex color clamping disabled, the floating- point RGBA
components are not modified.
     In RGBA mode with vertex color clamping enabled, each color component
may be converted to a signed or unsigned normalized fixed-point value as described
in equations 2.4 and 2.6 (depending on the framebuffer format).
     GL implementations are not required to convert clamped color components to
fixed-point.
     Because a number of the form k/(2m − 1) may not be represented exactly as
a limited-precision floating-point quantity, we place a further requirement on the
fixed-point conversion of RGBA components. Suppose that lighting is disabled, the
color associated with a vertex has not been clipped, and one of Colorub, Colorus,
or Colorui was used to specify that color. When these conditions are satisfied, an
RGBA component must convert to a value that matches the component as specified
in the Color command: if m is less than the number of bits b with which the
component was specified, then the converted value must equal the most significant
m bits of the specified value; otherwise, the most significant b bits of the converted
value must equal the specified value.
     A color index is converted (by rounding to nearest) to a fixed-point value with
at least as many bits as there are in the color index portion of the framebuffer.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.22. CURRENT RASTER POSITION                                                      123


2.22     Current Raster Position
The current raster position is used by commands that directly affect pixels in the
framebuffer. These commands, which bypass vertex transformation and primitive
assembly, are described in the next chapter. The current raster position, however,
shares some of the characteristics of a vertex.
    The current raster position is set using one of the commands
       void RasterPos{234}{sifd}( T coords );
       void RasterPos{234}{sifd}v( T coords );
RasterPos4 takes four values indicating x, y, z, and w. RasterPos3 (or Raster-
Pos2) is analogous, but sets only x, y, and z with w implicitly set to 1 (or only x
and y with z implicitly set to 0 and w implicitly set to 1).
    Gets of CURRENT_RASTER_TEXTURE_COORDS are affected by the setting of
the state ACTIVE_TEXTURE.
    The coordinates are treated as if they were specified in a Vertex command. If
a vertex shader is active, this vertex shader is executed using the x, y, z, and w
coordinates as the object coordinates of the vertex. Otherwise, the x, y, z, and
w coordinates are transformed by the current model-view and projection matri-
ces. These coordinates, along with current values, are used to generate primary
and secondary colors and texture coordinates just as is done for a vertex. The col-
ors and texture coordinates so produced replace the colors and texture coordinates
stored in the current raster position’s associated data. If a vertex shader is active
then the current raster distance is set to the value of the shader built in varying
gl_FogFragCoord. Otherwise, if the value of the fog source (see section 3.11)
is FOG_COORD, then the current raster distance is set to the value of the current
fog coordinate. Otherwise, the current raster distance is set to the distance from
the origin of the eye coordinate system to the vertex as transformed by only the
current model-view matrix. This distance may be approximated as discussed in
section 3.11.
    Since vertex shaders may be executed when the raster position is set, any at-
tributes not written by the shader will result in undefined state in the current raster
position. Vertex shaders should output all varying variables that would be used
when rasterizing pixel primitives using the current raster position.
    The transformed coordinates are passed to clipping as if they represented a
point. If the “point” is not culled, then the projection to window coordinates is
computed (section 2.15) and saved as the current raster position, and the valid bit
is set. If the “point” is culled, the current raster position and its associated data
become indeterminate and the valid bit is cleared. Figure 2.10 summarizes the
behavior of the current raster position.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.22. CURRENT RASTER POSITION                                                          124




                                                               Valid
    Rasterpos In                  Clip         Project
                                                                 Raster
                           Vertex/Normal                        Position
      Current              Transformation
      Normal

                                                                 Raster
      Current                       Lighting                    Distance
      Color &
      Materials
                                                               Associated
                                                 Texture          Data
     Current                 Texgen              Matrix 0
     Texture                                                                Current
    Coord Set 0                                                              Raster
                                                                            Position
                                                 Texture
     Current                 Texgen              Matrix 1
     Texture
    Coord Set 1

                                                 Texture
     Current                 Texgen              Matrix 2
     Texture
    Coord Set 2

                                                 Texture
     Current                 Texgen              Matrix 3
     Texture
    Coord Set 3




  Figure 2.10. The current raster position and how it is set. Four texture units are
  shown; however, multitexturing may support a different number of units depending
  on the implementation.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
2.22. CURRENT RASTER POSITION                                                      125


   Alternately, the current raster position may be set by one of the WindowPos
commands:
      void WindowPos{23}{ifds}( T coords );
      void WindowPos{23}{ifds}v( const T coords );
    WindowPos3 takes three values indicating x, y and z, while WindowPos2
takes two values indicating x and y with z implicitly set to 0. The current raster
position, (xw , yw , zw , wc ), is defined by:

                                       xw = x
                                  yw = y
                            
                            n,
                                          z≤0
                        zw = f,            z≥1
                            
                             n + z(f − n), otherwise
                            

                                        wc = 1
where n and f are the values passed to DepthRange (see section 2.15.1).
     Lighting, texture coordinate generation and transformation, and clipping are
not performed by the WindowPos functions. Instead, in RGBA mode, the current
raster color and secondary color are obtained from the current color and secondary
color, respectively. If vertex color clamping is enabled, the current raster color and
secondary color are clamped to [0, 1]. In color index mode, the current raster color
index is set to the current color index. The current raster texture coordinates are set
to the current texture coordinates, and the valid bit is set.
     If the value of the fog source is FOG_COORD_SRC, then the current raster dis-
tance is set to the value of the current fog coordinate. Otherwise, the raster distance
is set to 0.
     The current raster position requires six single-precision floating-point values
for its xw , yw , and zw window coordinates, its wc clip coordinate, its raster distance
(used as the fog coordinate in raster processing), a single valid bit, four floating-
point values to store the current RGBA color, four floating-point values to store the
current RGBA secondary color, one floating-point value to store the current color
index, and 4 floating-point values for texture coordinates for each texture unit. In
the initial state, the coordinates and texture coordinates are all (0, 0, 0, 1), the eye
coordinate distance is 0, the fog coordinate is 0, the valid bit is set, the associated
RGBA color is (1, 1, 1, 1), the associated RGBA secondary color is (0, 0, 0, 1), and
the associated color index color is 1. In RGBA mode, the associated color index
always has its initial value; in color index mode, the RGBA color and secondary
color always maintain their initial values.

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Chapter 3

Rasterization

Rasterization is the process by which a primitive is converted to a two-dimensional
image. Each point of this image contains such information as color and depth.
Thus, rasterizing a primitive consists of two parts. The first is to determine which
squares of an integer grid in window coordinates are occupied by the primitive. The
second is assigning a depth value and one or more color values to each such square.
The results of this process are passed on to the next stage of the GL (per-fragment
operations), which uses the information to update the appropriate locations in the
framebuffer. Figure 3.1 diagrams the rasterization process. The color values as-
signed to a fragment are initially determined by the rasterization operations (sec-
tions 3.4 through 3.8) and modified by either the execution of the texturing, color
sum, and fog operations defined in sections 3.9, 3.10, and 3.11, or by a fragment
shader as defined in section 3.12. The final depth value is initially determined by
the rasterization operations and may be modified or replaced by a fragment shader.
The results from rasterizing a point, line, polygon, pixel rectangle or bitmap can
be routed through a fragment shader.
     A grid square along with its parameters of assigned colors, z (depth), fog coor-
dinate, and texture coordinates is called a fragment; the parameters are collectively
dubbed the fragment’s associated data. A fragment is located by its lower left cor-
ner, which lies on integer grid coordinates. Rasterization operations also refer to a
fragment’s center, which is offset by (1/2, 1/2) from its lower left corner (and so
lies on half-integer coordinates).
     Grid squares need not actually be square in the GL. Rasterization rules are not
affected by the actual aspect ratio of the grid squares. Display of non-square grids,
however, will cause rasterized points and line segments to appear fatter in one
direction than the other. We assume that fragments are square, since it simplifies
antialiasing and texturing.


                                        126
                                                                                    127




                                             FRAGMENT_PROGRAM enable




                                Point
                             Rasterization




             From                Line
           Primitive         Rasterization
           Assembly                                                    Fragment
                                                       Texturing       Program



                               Polygon
                             Rasterization


                                                       Color Sum

                                 Pixel
           DrawPixels         Rectangle
                             Rasterization




             Bitmap            Bitmap                    Fog
                             Rasterization                              Fragments




Figure 3.1. Rasterization.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.1. DISCARDING PRIMITIVES BEFORE RASTERIZATION                                    128


    Several factors affect rasterization. Primitives may be discarded before ras-
terization. Lines and polygons may be stippled. Points may be given differing
diameters and line segments differing widths. A point, line segment, or polygon
may be antialiased.


3.1    Discarding Primitives Before Rasterization
Primitives can be optionally discarded before rasterization by calling Enable and
Disable with RASTERIZER_DISCARD. When enabled, primitives are discarded im-
mediately before the rasterization stage, but after the optional transform feedback
stage (see section 2.18). When disabled, primitives are passed through to the ras-
terization stage to be processed normally. When enabled, RASTERIZER_DISCARD
also causes the Accum, Bitmap, CopyPixels, DrawPixels, Clear, and Clear-
Buffer* commands to be ignored.


3.2    Invariance
Consider a primitive p obtained by translating a primitive p through an offset (x, y)
in window coordinates, where x and y are integers. As long as neither p nor p is
clipped, it must be the case that each fragment f produced from p is identical to
a corresponding fragment f from p except that the center of f is offset by (x, y)
from the center of f .


3.3    Antialiasing
Antialiasing of a point, line, or polygon is effected in one of two ways depending
on whether the GL is in RGBA or color index mode.
     In RGBA mode, the R, G, and B values of the rasterized fragment are left
unaffected, but the A value is multiplied by a floating-point value in the range
[0, 1] that describes a fragment’s screen pixel coverage. The per-fragment stage of
the GL can be set up to use the A value to blend the incoming fragment with the
corresponding pixel already present in the framebuffer.
     In color index mode, the least significant b bits (to the left of the binary point)
of the color index are used for antialiasing; b = min{4, m}, where m is the number
of bits in the color index portion of the framebuffer. The antialiasing process sets
these b bits based on the fragment’s coverage value: the bits are set to zero for no
coverage and to all ones for complete coverage.



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.3. ANTIALIASING                                                                129


     The details of how antialiased fragment coverage values are computed are dif-
ficult to specify in general. The reason is that high-quality antialiasing may take
into account perceptual issues as well as characteristics of the monitor on which
the contents of the framebuffer are displayed. Such details cannot be addressed
within the scope of this document. Further, the coverage value computed for a
fragment of some primitive may depend on the primitive’s relationship to a num-
ber of grid squares neighboring the one corresponding to the fragment, and not just
on the fragment’s grid square. Another consideration is that accurate calculation
of coverage values may be computationally expensive; consequently we allow a
given GL implementation to approximate true coverage values by using a fast but
not entirely accurate coverage computation.
     In light of these considerations, we chose to specify the behavior of exact an-
tialiasing in the prototypical case that each displayed pixel is a perfect square of
uniform intensity. The square is called a fragment square and has lower left corner
(x, y) and upper right corner (x+1, y +1). We recognize that this simple box filter
may not produce the most favorable antialiasing results, but it provides a simple,
well-defined model.
     A GL implementation may use other methods to perform antialiasing, subject
to the following conditions:

   1. If f1 and f2 are two fragments, and the portion of f1 covered by some prim-
      itive is a subset of the corresponding portion of f2 covered by the primitive,
      then the coverage computed for f1 must be less than or equal to that com-
      puted for f2 .

   2. The coverage computation for a fragment f must be local: it may depend
      only on f ’s relationship to the boundary of the primitive being rasterized. It
      may not depend on f ’s x and y coordinates.

Another property that is desirable, but not required, is:

   3. The sum of the coverage values for all fragments produced by rasterizing a
      particular primitive must be constant, independent of any rigid motions in
      window coordinates, as long as none of those fragments lies along window
      edges.

In some implementations, varying degrees of antialiasing quality may be obtained
by providing GL hints (section 5.6), allowing a user to make an image quality
versus speed tradeoff.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.3. ANTIALIASING                                                                130


3.3.1   Multisampling
Multisampling is a mechanism to antialias all GL primitives: points, lines, poly-
gons, bitmaps, and images. The technique is to sample all primitives multiple times
at each pixel. The color sample values are resolved to a single, displayable color
each time a pixel is updated, so the antialiasing appears to be automatic at the
application level. Because each sample includes color, depth, and stencil informa-
tion, the color (including texture operation), depth, and stencil functions perform
equivalently to the single-sample mode.
    An additional buffer, called the multisample buffer, is added to the framebuffer.
Pixel sample values, including color, depth, and stencil values, are stored in this
buffer. Samples contain separate color values for each fragment color. When
the framebuffer includes a multisample buffer, it does not include depth or sten-
cil buffers, even if the multisample buffer does not store depth or stencil values.
Color buffers do coexist with the multisample buffer, however.
    Multisample antialiasing is most valuable for rendering polygons, because it
requires no sorting for hidden surface elimination, and it correctly handles adjacent
polygons, object silhouettes, and even intersecting polygons. If only points or
lines are being rendered, the “smooth” antialiasing mechanism provided by the
base GL may result in a higher quality image. This mechanism is designed to
allow multisample and smooth antialiasing techniques to be alternated during the
rendering of a single scene.
    If the value of SAMPLE_BUFFERS is one, the rasterization of all primitives
is changed, and is referred to as multisample rasterization. Otherwise, primitive
rasterization is referred to as single-sample rasterization. The value of SAMPLE_-
BUFFERS is queried by calling GetIntegerv with pname set to SAMPLE_BUFFERS.
    During multisample rendering the contents of a pixel fragment are changed
in two ways. First, each fragment includes a coverage value with SAMPLES bits.
The value of SAMPLES is an implementation-dependent constant, and is queried by
calling GetIntegerv with pname set to SAMPLES.
    Second, each fragment includes SAMPLES depth values, color values, and sets
of texture coordinates, instead of the single depth value, color value, and set of
texture coordinates that is maintained in single-sample rendering mode. An imple-
mentation may choose to assign the same color value and the same set of texture
coordinates to more than one sample. The location for evaluating the color value
and the set of texture coordinates can be anywhere within the pixel including the
fragment center or any of the sample locations. The color value and the set of tex-
ture coordinates need not be evaluated at the same location. Each pixel fragment
thus consists of integer x and y grid coordinates, SAMPLES color and depth values,
SAMPLES sets of texture coordinates, and a coverage value with a maximum of


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                        131


SAMPLES bits.
    Multisample rasterization is enabled or disabled by calling Enable or Disable
with the symbolic constant MULTISAMPLE.
    If MULTISAMPLE is disabled, multisample rasterization of all primitives is
equivalent to single-sample (fragment-center) rasterization, except that the frag-
ment coverage value is set to full coverage. The color and depth values and the
sets of texture coordinates may all be set to the values that would have been as-
signed by single-sample rasterization, or they may be assigned as described below
for multisample rasterization.
    If MULTISAMPLE is enabled, multisample rasterization of all primitives differs
substantially from single-sample rasterization. It is understood that each pixel in
the framebuffer has SAMPLES locations associated with it. These locations are
exact positions, rather than regions or areas, and each is referred to as a sample
point. The sample points associated with a pixel may be located inside or outside
of the unit square that is considered to bound the pixel. Furthermore, the relative
locations of sample points may be identical for each pixel in the framebuffer, or
they may differ.
    If the sample locations differ per pixel, they should be aligned to window, not
screen, boundaries. Otherwise rendering results will be window-position specific.
The invariance requirement described in section 3.2 is relaxed for all multisample
rasterization, because the sample locations may be a function of pixel location.
    It is not possible to query the actual sample locations of a pixel.


3.4    Points
If a vertex shader is not active, then the rasterization of points is controlled with

      void PointSize( float size );

size specifies the requested size of a point. The default value is 1.0. A value less
than or equal to zero results in the error INVALID_VALUE.
    The requested point size is multiplied with a distance attenuation factor,
clamped to a specified point size range, and further clamped to the implementation-
dependent point size range to produce the derived point size:

                                                            1
           derived size = clamp size ×
                                                    a + b ∗ d + c ∗ d2
where d is the eye-coordinate distance from the eye, (0, 0, 0, 1) in eye coordinates,
to the vertex, and a, b, and c are distance attenuation function coefficients.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                        132


     If multisampling is not enabled, the derived size is passed on to rasterization as
the point width.
     If a vertex shader is active and vertex program point size mode is enabled, then
the derived point size is taken from the (potentially clipped) shader built-in gl_-
PointSize and clamped to the implementation-dependent point size range. If the
value written to gl_PointSize is less than or equal to zero, results are undefined.
If a vertex shader is active and vertex program point size mode is disabled, then the
derived point size is taken from the point size state as specified by the PointSize
command. In this case no distance attenuation is performed. Vertex program point
size mode is enabled and disabled by calling Enable or Disable with the symbolic
value VERTEX_PROGRAM_POINT_SIZE.
     If multisampling is enabled, an implementation may optionally fade the point
alpha (see section 3.14) instead of allowing the point width to go below a given
threshold. In this case, the width of the rasterized point is

                          derived size derived size ≥ threshold
            width =                                                              (3.1)
                          threshold    otherwise
and the fade factor is computed as follows:

                         1                    derived size ≥ threshold
             f ade =         derived size 2                                      (3.2)
                              threshold       otherwise
    The distance attenuation function coefficients a, b, and c, the bounds of the first
point size range clamp, and the point fade threshold are specified with

      void PointParameter{if}( enum pname, T param );
      void PointParameter{if}v( enum pname, const T params );

    If pname is POINT_SIZE_MIN or POINT_SIZE_MAX, then param specifies,
or params points to the lower or upper bound respectively to which the derived
point size is clamped. If the lower bound is greater than the upper bound, the point
size after clamping is undefined. If pname is POINT_DISTANCE_ATTENUATION,
then params points to the coefficients a, b, and c.          If pname is POINT_-
FADE_THRESHOLD_SIZE, then param specifies, or params points to the point fade
threshold. Values of POINT_SIZE_MIN, POINT_SIZE_MAX, or POINT_FADE_-
THRESHOLD_SIZE less than zero result in the error INVALID_VALUE.
    Point antialiasing is enabled or disabled by calling Enable or Disable with the
symbolic constant POINT_SMOOTH. The default state is for point antialiasing to be
disabled.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                        133


    Point sprites are enabled or disabled by calling Enable or Disable with the
symbolic constant POINT_SPRITE. The default state is for point sprites to be dis-
abled. When point sprites are enabled, the state of the point antialiasing enable is
ignored. In a deprecated context, point sprites are always enabled.
    The point sprite texture coordinate replacement mode is set with one of the
TexEnv* commands described in section 3.9.14, where target is POINT_SPRITE
and pname is COORD_REPLACE. The possible values for param are FALSE and
TRUE. The default value for each texture coordinate set is for point sprite texture
coordinate replacement to be disabled.
    The point sprite texture coordinate origin is set with the PointParame-
ter* commands where pname is POINT_SPRITE_COORD_ORIGIN and param is
LOWER_LEFT or UPPER_LEFT. The default value is UPPER_LEFT.


3.4.1   Basic Point Rasterization
In the default state, a point is rasterized by truncating its xw and yw coordinates
(recall that the subscripts indicate that these are x and y window coordinates) to
integers. This (x, y) address, along with data derived from the data associated
with the vertex corresponding to the point, is sent as a single fragment to the per-
fragment stage of the GL.
     The effect of a point width other than 1.0 depends on the state of point antialias-
ing and point sprites. If antialiasing and point sprites are disabled, the actual width
is determined by rounding the supplied width to the nearest integer, then clamp-
ing it to the implementation-dependent maximum non-antialiased point width.
This implementation-dependent value must be no less than the implementation-
dependent maximum antialiased point width, rounded to the nearest integer value,
and in any event no less than 1. If rounding the specified width results in the value
0, then it is as if the value were 1. If the resulting width is odd, then the point
                                         1      1
                          (x, y) = ( xw + , yw + )
                                         2      2
is computed from the vertex’s xw and yw , and a square grid of the odd width cen-
tered at (x, y) defines the centers of the rasterized fragments (recall that fragment
centers lie at half-integer window coordinate values). If the width is even, then the
center point is
                                             1           1
                           (x, y) = ( xw + , yw + );
                                             2           2
the rasterized fragment centers are the half-integer window coordinate values
within the square of the even width centered on (x, y). See figure 3.2.



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                                      134




                                               5.5

                                               4.5
                               




                               




                                               3.5               ¡    ¡    ¡




                                                                 ¡    ¡    ¡




                                               2.5

                                               1.5

                                               0.5

       0.5   1.5   2.5       3.5   4.5   5.5         0.5   1.5       2.5       3.5   4.5   5.5

              Odd Width                                     Even Width


  Figure 3.2. Rasterization of non-antialiased wide points. The crosses show fragment
  centers produced by rasterization for any point that lies within the shaded region.
  The dotted grid lines lie on half-integer coordinates.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                                                        135




                       6.0



                       5.0
                                                                                                    




                                                                                                    




                                                                                                    




                       4.0
                                                                                                    




                                                                                                    




                                                                                                    




                                                                                                    




                       3.0
                                                                                                    




                                                                                                    




                                                                                                    




                                                                                                    




                       2.0
                                                                                                    




                                                                                                    




                                                                                                    




                                                                                                    




                       1.0
                                                                                                    




                       0.0
                             0.0       1.0               2.0               3.0               4.0       5.0   6.0




  Figure 3.3. Rasterization of antialiased wide points. The black dot indicates the
  point to be rasterized. The shaded region has the specified width. The X marks
  indicate those fragment centers produced by rasterization. A fragment’s computed
  coverage value is based on the portion of the shaded region that covers the corre-
  sponding fragment square. Solid lines lie on integer coordinates.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                        136


    All fragments produced in rasterizing a non-antialiased point are assigned the
same associated data, which are those of the vertex corresponding to the point.
    If antialiasing is enabled and point sprites are disabled, then point rasterization
produces a fragment for each fragment square that intersects the region lying within
the circle having diameter equal to the current point width and centered at the
point’s (xw , yw ) (figure 3.3). The coverage value for each fragment is the window
coordinate area of the intersection of the circular region with the corresponding
fragment square (but see section 3.3). This value is saved and used in the final
step of rasterization (section 3.13). The data associated with each fragment are
otherwise the data associated with the point being rasterized.
    Not all widths need be supported when point antialiasing is on, but the width
1.0 must be provided. If an unsupported width is requested, the nearest supported
width is used instead. The range of supported widths and the width of evenly-
spaced gradations within that range are implementation-dependent. The range and
gradations may be obtained using the query mechanism described in chapter 6. If,
for instance, the width range is from 0.1 to 2.0 and the gradation width is 0.1, then
the widths 0.1, 0.2, . . . , 1.9, 2.0 are supported.
    If point sprites are enabled, then point rasterization produces a fragment for
each framebuffer pixel whose center lies inside a square centered at the point’s
(xw , yw ), with side length equal to the current point size.
    All fragments produced in rasterizing a point sprite are assigned the same as-
sociated data, which are those of the vertex corresponding to the point. However,
the fragment shader builtin gl_PointCoord contains point sprite texture coordi-
nates. Additionally, for each texture coordinate set where COORD_REPLACE is
TRUE, these texture coordinates are replaced with point sprite texture coordinates.
  The s point sprite texture coordinate varies from 0 to 1 across the point hori-
zontally left-to-right. If POINT_SPRITE_COORD_ORIGIN is LOWER_LEFT, the t
coordinate varies from 0 to 1 vertically bottom-to-top. Otherwise if the point sprite
texture coordinate origin is UPPER_LEFT, the t coordinate varies from 0 to 1 verti-
cally top-to-bottom. The r and q coordinates are replaced with the constants 0 and
1, respectively.
    The following formula is used to evaluate the s and t point sprite texture coor-
dinates:

                                   1   xf + 21 − xw
                              s=     +                                           (3.3)
                                   2       size




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.4. POINTS                                                                        137



        
            1       (yf + 12 −yw )
                +                    , POINT_SPRITE_COORD_ORIGIN = LOWER_LEFT
        
  t=        2           size
            1       (yf + 12 −yw )
        
            2   −         , POINT_SPRITE_COORD_ORIGIN = UPPER_LEFT
                        size
                                                                             (3.4)
where size is the point’s size, xf and yf are the (integral) window coordinates of
the fragment, and xw and yw are the exact, unrounded window coordinates of the
vertex for the point.
    The widths supported for point sprites must be a superset of those supported
for antialiased points. There is no requirement that these widths must be equally
spaced. If an unsupported width is requested, the nearest supported width is used
instead.

3.4.2   Point Rasterization State
The state required to control point rasterization consists of the floating-point point
width, two floating-point values specifying the minimum and maximum point size,
three floating-point values specifying the distance attenuation coefficients, a bit in-
dicating whether or not antialiasing is enabled, a bit indicating whether or not point
sprites are enabled, a bit for the point sprite texture coordinate replacement mode
for each texture coordinate set, a bit indicating whether or not vertex program
point size mode is enabled, a bit for the point sprite texture coordinate origin, and
a floating-point value specifying the point fade threshold size.

3.4.3   Point Multisample Rasterization
If MULTISAMPLE is enabled, and the value of SAMPLE_BUFFERS is one, then points
are rasterized using the following algorithm, regardless of whether point antialias-
ing (POINT_SMOOTH) is enabled or disabled. Point rasterization produces a frag-
ment for each framebuffer pixel with one or more sample points that intersect a
region centered at the point’s (xw , yw ). This region is a circle having diameter
equal to the current point width if POINT_SPRITE is disabled, or a square with
side equal to the current point width if POINT_SPRITE is enabled. Coverage bits
that correspond to sample points that intersect the region are 1, other coverage bits
are 0. All data associated with each sample for the fragment are the data associ-
ated with the point being rasterized, with the exception of texture coordinates when
POINT_SPRITE is enabled; these texture coordinates are computed as described in
section 3.4 .
    Point size range and number of gradations are equivalent to those supported for
antialiased points when POINT_SPRITE is disabled. The set of point sizes sup-

                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                                 138


ported is equivalent to those for point sprites without multisample when POINT_-
SPRITE is enabled.


3.5     Line Segments
A line segment results from a line strip Begin/End object, a line loop, or a se-
ries of separate line segments. Line segment rasterization is controlled by several
variables. Line width, which may be set by calling

        void LineWidth( float width );

with an appropriate positive floating-point width, controls the width of rasterized
line segments. The default width is 1.0. Values less than or equal to 0.0 generate
the error INVALID_VALUE. Antialiasing is controlled with Enable and Disable us-
ing the symbolic constant LINE_SMOOTH. Finally, line segments may be stippled.
Stippling is controlled by a GL command that sets a stipple pattern (see below).

3.5.1    Basic Line Segment Rasterization
Line segment rasterization begins by characterizing the segment as either x-major
or y-major. x-major line segments have slope in the closed interval [−1, 1]; all
other line segments are y-major (slope is determined by the segment’s endpoints).
We shall specify rasterization only for x-major segments except in cases where the
modifications for y-major segments are not self-evident.
    Ideally, the GL uses a “diamond-exit” rule to determine those fragments that
are produced by rasterizing a line segment. For each fragment f with center at win-
dow coordinates xf and yf , define a diamond-shaped region that is the intersection
of four half planes:

                   Rf = { (x, y) | |x − xf | + |y − yf | < 1/2.}

    Essentially, a line segment starting at pa and ending at pb produces those frag-
ments f for which the segment intersects Rf , except if pb is contained in Rf . See
figure 3.4.
    To avoid difficulties when an endpoint lies on a boundary of Rf we (in princi-
ple) perturb the supplied endpoints by a tiny amount. Let pa and pb have window
coordinates (xa , ya ) and (xb , yb ), respectively. Obtain the perturbed endpoints pa
given by (xa , ya ) − ( , 2 ) and pb given by (xb , yb ) − ( , 2 ). Rasterizing the line
segment starting at pa and ending at pb produces those fragments f for which the
segment starting at pa and ending on pb intersects Rf , except if pb is contained in


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                                                                          139


                        ©   ©   ©   ©      ©                                          $      $   $   $   $




                        ©   ©   ©   ©      ©                                          $      $   $   $   $




                        ©   ©   ©   ©      ©                                          $      $   $   $   $




                        ©   ©   ©   ©      ©                                          $      $   $   $   $




                        ¨   ¨   ¨   ¨      ¨                                          #      #   #   #   #




                        ¨   ¨   ¨   ¨      ¨                                          #      #   #   #   #




                        ¨   ¨   ¨   ¨      ¨                                          #      #   #   #   #




                        ¨   ¨   ¨   ¨      ¨                                          #      #   #   #   #




                        §   §   §   §      §            ¡      ¡   ¡   ¡      ¡            "      "   "   "   "




                        §   §   §   §      §            ¡      ¡   ¡   ¡      ¡            "      "   "   "   "




                        §   §   §   §      §            ¡      ¡   ¡   ¡      ¡            "      "   "   "   "




                        §   §   §   §      §            ¡      ¡   ¡   ¡      ¡            "      "   "   "   "




                        ¦   ¦   ¦   ¦       ¦               ¢       ¢   ¢   ¢      ¢            !      !   !   !   !




                        ¦   ¦   ¦   ¦       ¦               ¢       ¢   ¢   ¢      ¢            !      !   !   !   !




                        ¦   ¦   ¦   ¦       ¦               ¢       ¢   ¢   ¢      ¢            !      !   !   !   !




                        ¦   ¦   ¦   ¦       ¦               ¢       ¢   ¢   ¢      ¢            !      !   !   !   !




                        ¥   ¥   ¥   ¥   ¤   ¥   ¤   ¤   ¤   £   ¤   £   £   £      £                




                        ¥   ¥   ¥   ¥   ¤   ¥   ¤   ¤   ¤   £   ¤   £   £   £      £                




                        ¥   ¥   ¥   ¥   ¤   ¥   ¤   ¤   ¤   £   ¤   £   £   £      £                




                        ¥   ¥   ¥   ¥   ¤   ¥   ¤   ¤   ¤   £   ¤   £   £   £      £                




   Figure 3.4. Visualization of Bresenham’s algorithm. A portion of a line segment is
   shown. A diamond shaped region of height 1 is placed around each fragment center;
   those regions that the line segment exits cause rasterization to produce correspond-
   ing fragments.




Rf . is chosen to be so small that rasterizing the line segment produces the same
fragments when δ is substituted for for any 0 < δ ≤ .
    When pa and pb lie on fragment centers, this characterization of fragments
reduces to Bresenham’s algorithm with one modification: lines produced in this
description are “half-open,” meaning that the final fragment (corresponding to pb )
is not drawn. This means that when rasterizing a series of connected line segments,
shared endpoints will be produced only once rather than twice (as would occur with
Bresenham’s algorithm).
    Because the initial and final conditions of the diamond-exit rule may be difficult
to implement, other line segment rasterization algorithms are allowed, subject to
the following rules:

   1. The coordinates of a fragment produced by the algorithm may not deviate by
      more than one unit in either x or y window coordinates from a corresponding
      fragment produced by the diamond-exit rule.

   2. The total number of fragments produced by the algorithm may differ from
      that produced by the diamond-exit rule by no more than one.

   3. For an x-major line, no two fragments may be produced that lie in the same


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                              140


      window-coordinate column (for a y-major line, no two fragments may ap-
      pear in the same row).

   4. If two line segments share a common endpoint, and both segments are either
      x-major (both left-to-right or both right-to-left) or y-major (both bottom-to-
      top or both top-to-bottom), then rasterizing both segments may not produce
      duplicate fragments, nor may any fragments be omitted so as to interrupt
      continuity of the connected segments.

    Next we must specify how the data associated with each rasterized fragment
are obtained. Let the window coordinates of a produced fragment center be given
by pr = (xd , yd ) and let pa = (xa , ya ) and pb = (xb , yb ). Set

                                (pr − pa ) · (pb − pa )
                           t=                           .                      (3.5)
                                      pb − pa 2
(Note that t = 0 at pa and t = 1 at pb .) The value of an associated datum f for
the fragment, whether it be primary or secondary R, G, B, or A (in RGBA mode)
or a color index (in color index mode), the fog coordinate, an s, t, r, or q texture
coordinate, or the clip w coordinate, is found as

                                (1 − t)fa /wa + tfb /wb
                           f=                                                  (3.6)
                                  (1 − t)/wa + t/wb
where fa and fb are the data associated with the starting and ending endpoints of
the segment, respectively; wa and wb are the clip w coordinates of the starting and
ending endpoints of the segments, respectively. However, depth values for lines
must be interpolated by
                               z = (1 − t)za + tzb                             (3.7)
where za and zb are the depth values of the starting and ending endpoints of the
segment, respectively.
    When using a vertex shader, the noperspective and flat keywords used
to declare varying shader outputs affect how they are interpolated. When neither
keyword is specified, interpolation is performed as described in equation 3.6. When
the noperspective keyword is specified, interpolation is performed in the same
fashion as for depth values, as described in equation 3.7. When the flat keyword
is specified, no interpolation is performed, and varying outputs are taken from the
corresponding generic attribute value of the last (highest numbered) vertex trans-
ferred to the GL corresponding to that primitive.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                                 141


3.5.2    Other Line Segment Features
We have just described the rasterization of non-antialiased line segments of width
one using the default line stipple of F F F F16 . We now describe the rasterization
of line segments for general values of the line segment rasterization parameters.

Line Stipple
The command

        void LineStipple( int factor, ushort pattern );

defines a line stipple. pattern is an unsigned short integer. The line stipple is taken
from the lowest order 16 bits of pattern. It determines those fragments that are to
be drawn when the line is rasterized. factor is a count that is used to modify the
effective line stipple by causing each bit in pattern to be used factor times. factor
is clamped to the range [1, 256]. Line stippling may be enabled or disabled using
Enable or Disable with the constant LINE_STIPPLE. When disabled, it is as if the
line stipple has its default value.
     Line stippling masks certain fragments that are produced by rasterization so
that they are not sent to the per-fragment stage of the GL. The masking is achieved
using three parameters: the 16-bit line stipple p, the line repeat count r, and an
integer stipple counter s. Let

                                 b = s/r mod 16,

Then a fragment is produced if the bth bit of p is 1, and not produced otherwise.
The bits of p are numbered with 0 being the least significant and 15 being the
most significant. The initial value of s is zero; s is incremented after production
of each fragment of a line segment (fragments are produced in order, beginning at
the starting point and working towards the ending point). s is reset to 0 whenever
a Begin occurs, and before every line segment in a group of independent segments
(as specified when Begin is invoked with LINES).
    If the line segment has been clipped, then the value of s at the beginning of the
line segment is indeterminate.

Wide Lines
The actual width of non-antialiased lines is determined by rounding the supplied
width to the nearest integer, then clamping it to the implementation-dependent
maximum non-antialiased line width. This implementation-dependent value must
be no less than the implementation-dependent maximum antialiased line width,

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                                   142




                     width = 2                              width = 3




   Figure 3.5. Rasterization of non-antialiased wide lines. x-major line segments are
   shown. The heavy line segment is the one specified to be rasterized; the light seg-
   ment is the offset segment used for rasterization. x marks indicate the fragment
   centers produced by rasterization.




rounded to the nearest integer value, and in any event no less than 1. If rounding
the specified width results in the value 0, then it is as if the value were 1.
     Non-antialiased line segments of width other than one are rasterized by off-
setting them in the minor direction (for an x-major line, the minor direction is
y, and for a y-major line, the minor direction is x) and replicating fragments in
the minor direction (see figure 3.5). Let w be the width rounded to the nearest
integer (if w = 0, then it is as if w = 1). If the line segment has endpoints
given by (x0 , y0 ) and (x1 , y1 ) in window coordinates, the segment with endpoints
(x0 , y0 − (w − 1)/2) and (x1 , y1 − (w − 1)/2) is rasterized, but instead of a single
fragment, a column of fragments of height w (a row of fragments of length w for
a y-major segment) is produced at each x (y for y-major) location. The lowest
fragment of this column is the fragment that would be produced by rasterizing the
segment of width 1 with the modified coordinates. The whole column is not pro-
duced if the stipple bit for the column’s x location is zero; otherwise, the whole
column is produced.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                                                        143




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




                                                                                                       




   Figure 3.6. The region used in rasterizing and finding corresponding coverage val-
   ues for an antialiased line segment (an x-major line segment is shown).




Antialiasing
Rasterized antialiased line segments produce fragments whose fragment squares
intersect a rectangle centered on the line segment. Two of the edges are parallel to
the specified line segment; each is at a distance of one-half the current width from
that segment: one above the segment and one below it. The other two edges pass
through the line endpoints and are perpendicular to the direction of the specified
line segment. Coverage values are computed for each fragment by computing the
area of the intersection of the rectangle with the fragment square (see figure 3.6;
see also section 3.3). Equation 3.6 is used to compute associated data values just as
with non-antialiased lines; equation 3.5 is used to find the value of t for each frag-
ment whose square is intersected by the line segment’s rectangle. Not all widths
need be supported for line segment antialiasing, but width 1.0 antialiased segments
must be provided. As with the point width, a GL implementation may be queried
for the range and number of gradations of available antialiased line widths.
    For purposes of antialiasing, a stippled line is considered to be a sequence of
contiguous rectangles centered on the line segment. Each rectangle has width equal
to the current line width and length equal to 1 pixel (except the last, which may be
shorter). These rectangles are numbered from 0 to n, starting with the rectangle
incident on the starting endpoint of the segment. Each of these rectangles is ei-
ther eliminated or produced according to the procedure given under Line Stipple,
above, where “fragment” is replaced with “rectangle.” Each rectangle so produced


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.5. LINE SEGMENTS                                                                 144


is rasterized as if it were an antialiased polygon, described below (but culling, non-
default settings of PolygonMode, and polygon stippling are not applied).

3.5.3   Line Rasterization State
The state required for line rasterization consists of the floating-point line width, a
bit indicating whether line antialiasing is on or off, a 16-bit line stipple, the line
stipple repeat count, and a bit indicating whether stippling is enabled or disabled.
In addition, during rasterization an integer stipple counter must be maintained to
implement line stippling. The initial value of the line width is 1.0. The initial
state of line segment antialiasing is disabled. The initial value of the line stipple is
F F F F16 (a stipple of all ones). The initial value of the line stipple repeat count is
one. The initial state of line stippling is disabled.

3.5.4   Line Multisample Rasterization
If MULTISAMPLE is enabled, and the value of SAMPLE_BUFFERS is one, then lines
are rasterized using the following algorithm, regardless of whether line antialiasing
(LINE_SMOOTH) is enabled or disabled. Line rasterization produces a fragment for
each framebuffer pixel with one or more sample points that intersect the rectangular
region that is described in the Antialiasing portion of section 3.5.2 (Other Line
Segment Features). If line stippling is enabled, the rectangular region is subdivided
into adjacent unit-length rectangles, with some rectangles eliminated according to
the procedure given in section 3.5.2, where “fragment” is replaced by “rectangle”.

     Coverage bits that correspond to sample points that intersect a retained rectan-
gle are 1, other coverage bits are 0. Each color, depth, and set of texture coordinates
is produced by substituting the corresponding sample location into equation 3.5,
then using the result to evaluate equation 3.7. An implementation may choose to
assign the same color value and the same set of texture coordinates to more than
one sample by evaluating equation 3.5 at any location within the pixel including
the fragment center or any one of the sample locations, then substituting into equa-
tion 3.6. The color value and the set of texture coordinates need not be evaluated
at the same location.
     Line width range and number of gradations are equivalent to those supported
for antialiased lines.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.6. POLYGONS                                                                      145


3.6     Polygons
A polygon results from a triangle arising from a triangle strip, triangle fan, or series
of separate triangles, a polygon Begin/End object, or a quadrilateral arising from a
quadrilateral strip, series of separate quadrilaterals, or Rect command. Like points
and line segments, polygon rasterization is controlled by several variables. Poly-
gon antialiasing is controlled with Enable and Disable with the symbolic constant
POLYGON_SMOOTH. The analog to line segment stippling for polygons is polygon
stippling, described below.

3.6.1    Basic Polygon Rasterization
The first step of polygon rasterization is to determine if the polygon is back-facing
or front-facing. This determination is made based on the sign of the (clipped or
unclipped) polygon’s area computed in window coordinates. One way to compute
this area is
                                   n−1
                               1
                            a=            xiw yw
                                               i⊕1    i⊕1 i
                                                   − xw  yw                       (3.8)
                               2
                                    i=0

    where xiw and ywi are the x and y window coordinates of the ith vertex of

the n-vertex polygon (vertices are numbered starting at zero for purposes of this
computation) and i⊕1 is (i+1) mod n. The interpretation of the sign of this value
is controlled with

        void FrontFace( enum dir );

     Setting dir to CCW (corresponding to counter-clockwise orientation of the pro-
jected polygon in window coordinates) uses a as computed above. Setting dir to
CW (corresponding to clockwise orientation) indicates that the sign of a should be
reversed prior to use. Front face determination requires one bit of state, and is
initially set to CCW.
     If the sign of a (including the possible reversal of this sign as determined by
FrontFace) is positive, the polygon is front-facing; otherwise, it is back-facing.
This determination is used in conjunction with the CullFace enable bit and mode
value to decide whether or not a particular polygon is rasterized. The CullFace
mode is set by calling

        void CullFace( enum mode );




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.6. POLYGONS                                                                        146


mode is a symbolic constant: one of FRONT, BACK or FRONT_AND_BACK. Culling
is enabled or disabled with Enable or Disable using the symbolic constant CULL_-
FACE. Front-facing polygons are rasterized if either culling is disabled or the Cull-
Face mode is BACK while back-facing polygons are rasterized only if either culling
is disabled or the CullFace mode is FRONT. The initial setting of the CullFace
mode is BACK. Initially, culling is disabled.
    The rule for determining which fragments are produced by polygon rasteriza-
tion is called point sampling. The two-dimensional projection obtained by taking
the x and y window coordinates of the polygon’s vertices is formed. Fragment
centers that lie inside of this polygon are produced by rasterization. Special treat-
ment is given to a fragment whose center lies on a polygon boundary edge. In
such a case we require that if two polygons lie on either side of a common edge
(with identical endpoints) on which a fragment center lies, then exactly one of the
polygons results in the production of the fragment during rasterization.
    As for the data associated with each fragment produced by rasterizing a poly-
gon, we begin by specifying how these values are produced for fragments in a
triangle. Define barycentric coordinates for a triangle. Barycentric coordinates are
a set of three numbers, a, b, and c, each in the range [0, 1], with a + b + c = 1.
These coordinates uniquely specify any point p within the triangle or on the trian-
gle’s boundary as
                                 p = apa + bpb + cpc ,
where pa , pb , and pc are the vertices of the triangle. a, b, and c can be found as
                    A(ppb pc )              A(ppa pc )            A(ppa pb )
              a=                 ,     b=                ,   c=                ,
                    A(pa pb pc )            A(pa pb pc )          A(pa pb pc )
where A(lmn) denotes the area in window coordinates of the triangle with vertices
l, m, and n.
    Denote an associated datum at pa , pb , or pc as fa , fb , or fc , respectively. Then
the value f of a datum at a fragment produced by rasterizing a triangle is given by

                              afa /wa + bfb /wb + cfc /wc
                          f=                                                  (3.9)
                                 a/wa + b/wb + c/wc
where wa , wb and wc are the clip w coordinates of pa , pb , and pc , respectively.
a, b, and c are the barycentric coordinates of the fragment for which the data are
produced. a, b, and c must correspond precisely to the exact coordinates of the
center of the fragment. Another way of saying this is that the data associated with
a fragment must be sampled at the fragment’s center. However, depth values for
polygons must be interpolated by
                                     z = aza + bzb + czc                           (3.10)

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.6. POLYGONS                                                                     147


where za , zb , and zc are the depth values of pa , pb , and pc , respectively.
    When using a vertex shader, the noperspective and flat keywords used
to declare varying shader outputs affect how they are interpolated. When nei-
ther keyword is specified, interpolation is performed as described in equation 3.9.
When the noperspective keyword is specified, interpolation is performed in
the same fashion as for depth values, as described in equation 3.10. When the
flat keyword is specified, no interpolation is performed, and varying outputs are
taken from the corresponding generic attribute value of the last (highest numbered)
vertex transferred to the GL corresponding to that primitive.
    For a polygon with more than three edges, we require only that a convex
combination of the values of the datum at the polygon’s vertices can be used to
obtain the value assigned to each fragment produced by the rasterization algorithm.
That is, it must be the case that at every fragment
                                          n
                                    f=         ai fi
                                         i=1

where n is the number of vertices in the polygon, fi is the value of the f at vertex
i; for each i 0 ≤ ai ≤ 1 and ni=1 ai = 1. The values of the ai may differ from
fragment to fragment, but at vertex i, aj = 0, j = i and ai = 1.
     One algorithm that achieves the required behavior is to triangulate a polygon
(without adding any vertices) and then treat each triangle individually as already
discussed. A scan-line rasterizer that linearly interpolates data along each edge
and then linearly interpolates data across each horizontal span from edge to edge
also satisfies the restrictions (in this case, the numerator and denominator of equa-
tion 3.9 should be iterated independently and a division performed for each frag-
ment).

3.6.2    Stippling
Polygon stippling works much the same way as line stippling, masking out certain
fragments produced by rasterization so that they are not sent to the next stage of
the GL. This is the case regardless of the state of polygon antialiasing. Stippling is
controlled with

        void PolygonStipple( ubyte *pattern );

pattern is a pointer to memory into which a 32 × 32 pattern is packed. The pattern
is unpacked from memory according to the procedure given in section 3.7.5 for
DrawPixels; it is as if the height and width passed to that command were both equal
to 32, the type were BITMAP, and the format were COLOR_INDEX. The unpacked

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.6. POLYGONS                                                                     148


values (before any conversion or arithmetic would have been performed) form a
stipple pattern of zeros and ones.
    If xw and yw are the window coordinates of a rasterized polygon fragment,
then that fragment is sent to the next stage of the GL if and only if the bit of the
pattern (xw mod 32, yw mod 32) is 1.
    Polygon stippling may be enabled or disabled with Enable or Disable using the
constant POLYGON_STIPPLE. When disabled, it is as if the stipple pattern were all
ones.

3.6.3    Antialiasing
Polygon antialiasing rasterizes a polygon by producing a fragment wherever the
interior of the polygon intersects that fragment’s square. A coverage value is com-
puted at each such fragment, and this value is saved to be applied as described
in section 3.13. An associated datum is assigned to a fragment by integrating the
datum’s value over the region of the intersection of the fragment square with the
polygon’s interior and dividing this integrated value by the area of the intersection.
For a fragment square lying entirely within the polygon, the value of a datum at the
fragment’s center may be used instead of integrating the value across the fragment.
    Polygon stippling operates in the same way whether polygon antialiasing is
enabled or not. The polygon point sampling rule defined in section 3.6.1, however,
is not enforced for antialiased polygons.

3.6.4    Options Controlling Polygon Rasterization
The interpretation of polygons for rasterization is controlled using

        void PolygonMode( enum face, enum mode );

face is one of FRONT, BACK, or FRONT_AND_BACK, indicating that the rasterizing
method described by mode respectively replaces the rasterizing method for front-
facing polygons, back-facing polygons, or both front- and back-facing polygons.
mode is one of the symbolic constants POINT, LINE, or FILL. Calling Polygon-
Mode with POINT causes certain vertices of a polygon to be treated, for rasteriza-
tion purposes, just as if they were enclosed within a Begin(POINTS) and End pair.
The vertices selected for this treatment are those that have been tagged as having a
polygon boundary edge beginning on them (see section 2.6.2). LINE causes edges
that are tagged as boundary to be rasterized as line segments. (The line stipple
counter is reset at the beginning of the first rasterized edge of the polygon, but not
for subsequent edges.) FILL is the default mode of polygon rasterization, cor-
responding to the description in sections 3.6.1, 3.6.2, and 3.6.3. Note that these

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.6. POLYGONS                                                                     149


modes affect only the final rasterization of polygons: in particular, a polygon’s ver-
tices are lit, and the polygon is clipped and possibly culled before these modes are
applied.
     Polygon antialiasing applies only to the FILL state of PolygonMode. For
POINT or LINE, point antialiasing or line segment antialiasing, respectively, ap-
ply.

3.6.5    Depth Offset
The depth values of all fragments generated by the rasterization of a polygon may
be offset by a single value that is computed for that polygon. The function that
determines this value is specified by calling

        void PolygonOffset( float factor, float units );

factor scales the maximum depth slope of the polygon, and units scales an
implementation-dependent constant that relates to the usable resolution of the
depth buffer. The resulting values are summed to produce the polygon offset value.
Both factor and units may be either positive or negative.
    The maximum depth slope m of a triangle is
                                            2             2
                                     ∂zw            ∂zw
                           m=                   +                              (3.11)
                                     ∂xw            ∂yw

where (xw , yw , zw ) is a point on the triangle. m may be approximated as
                                         ∂zw   ∂zw
                           m = max           ,            .                    (3.12)
                                         ∂xw   ∂yw
If the polygon has more than three vertices, one or more values of m may be used
during rasterization. Each may take any value in the range [min,max], where min
and max are the smallest and largest values obtained by evaluating equation 3.11
or equation 3.12 for the triangles formed by all three-vertex combinations.
     The minimum resolvable difference r is an implementation-dependent param-
eter that depends on the depth buffer representation. It is the smallest difference in
window coordinate z values that is guaranteed to remain distinct throughout poly-
gon rasterization and in the depth buffer. All pairs of fragments generated by the
rasterization of two polygons with otherwise identical vertices, but zw values that
differ by r, will have distinct depth values.
     For fixed-point depth buffer representations, r is constant throughout the range
of the entire depth buffer. For floating-point depth buffers, there is no single min-
imum resolvable difference. In this case, the minimum resolvable difference for a

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.6. POLYGONS                                                                     150


given polygon is dependent on the maximum exponent, e, in the range of z values
spanned by the primitive. If n is the number of bits in the floating-point mantissa,
the minimum resolvable difference, r, for the given primitive is defined as

                                     r = 2e−n .
    The offset value o for a polygon is

                          o = m × f actor + r × units.                         (3.13)

m is computed as described above. If the depth buffer uses a fixed-point represen-
tation, m is a function of depth values in the range [0, 1], and o is applied to depth
values in the same range.
     Boolean state values POLYGON_OFFSET_POINT, POLYGON_OFFSET_LINE,
and POLYGON_OFFSET_FILL determine whether o is applied during the rasteriza-
tion of polygons in POINT, LINE, and FILL modes. These boolean state values are
enabled and disabled as argument values to the commands Enable and Disable.
If POLYGON_OFFSET_POINT is enabled, o is added to the depth value of each
fragment produced by the rasterization of a polygon in POINT mode. Likewise,
if POLYGON_OFFSET_LINE or POLYGON_OFFSET_FILL is enabled, o is added to
the depth value of each fragment produced by the rasterization of a polygon in
LINE or FILL modes, respectively.
     For fixed-point depth buffers, fragment depth values are always limited to the
range [0, 1], either by clamping after offset addition is performed (preferred), or by
clamping the vertex values used in the rasterization of the polygon. Fragment depth
values are clamped even when the depth buffer uses a floating-point representation.

3.6.6   Polygon Multisample Rasterization
If MULTISAMPLE is enabled and the value of SAMPLE_BUFFERS is one, then poly-
gons are rasterized using the following algorithm, regardless of whether polygon
antialiasing (POLYGON_SMOOTH) is enabled or disabled. Polygon rasterization pro-
duces a fragment for each framebuffer pixel with one or more sample points that
satisfy the point sampling criteria described in section 3.6.1, including the special
treatment for sample points that lie on a polygon boundary edge. If a polygon
is culled, based on its orientation and the CullFace mode, then no fragments are
produced during rasterization. Fragments are culled by the polygon stipple just as
they are for aliased and antialiased polygons.
    Coverage bits that correspond to sample points that satisfy the point sampling
criteria are 1, other coverage bits are 0. Each associated datum is produced as
described in section 3.6.1, but using the corresponding sample location instead of

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                 151


the fragment center. An implementation may choose to assign the same associated
data values to more than one sample by barycentric evaluation using any location
within the pixel including the fragment center or one of the sample locations. The
color value and the set of texture coordinates need not be evaluated at the same
location.
    When using a vertex shader, the noperspective and flat keywords affect
how varying shader outputs are interpolated, as described in the OpenGL Shading
Language Specification.
    The rasterization described above applies only to the FILL state of Polygon-
Mode. For POINT and LINE, the rasterizations described in sections 3.4.3 (Point
Multisample Rasterization) and 3.5.4 (Line Multisample Rasterization) apply.

3.6.7    Polygon Rasterization State
The state required for polygon rasterization consists of a polygon stipple pattern,
whether stippling is enabled or disabled, the current state of polygon antialiasing
(enabled or disabled), the current values of the PolygonMode setting for each of
front- and back-facing polygons, whether point, line, and fill mode polygon offsets
are enabled or disabled, and the factor and bias values of the polygon offset equa-
tion. The initial stipple pattern is all ones; initially stippling is disabled. The initial
setting of polygon antialiasing is disabled. The initial state for PolygonMode is
FILL for both front- and back-facing polygons. The initial polygon offset factor
and bias values are both 0; initially polygon offset is disabled for all modes.


3.7     Pixel Rectangles
Rectangles of color, depth, and certain other values may be specified to the GL
using TexImage*D (see section 3.9.1) or converted to fragments using the Draw-
Pixels command (described in section 3.7.5) Some of the parameters and opera-
tions governing the operation of these commands are shared by CopyPixels (used
to copy pixels from one framebuffer location to another) and ReadPixels (used
to obtain pixel values from the framebuffer); the discussion of CopyPixels and
ReadPixels, however, is deferred until chapter 4 after the framebuffer has been
discussed in detail. Nevertheless, we note in this section when parameters and
state pertaining to these commands also pertain to CopyPixels or ReadPixels.
    A number of parameters control the encoding of pixels in buffer object or client
memory (for reading and writing) and how pixels are processed before being placed
in or after being read from the framebuffer (for reading, writing, and copying).
These parameters are set with three commands: PixelStore, PixelTransfer, and


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            152


        Parameter Name                Type      Initial Value   Valid Range
        UNPACK_SWAP_BYTES            boolean       FALSE        TRUE/FALSE
        UNPACK_LSB_FIRST             boolean       FALSE        TRUE/FALSE
        UNPACK_ROW_LENGTH            integer          0           [0, ∞)
        UNPACK_SKIP_ROWS             integer          0           [0, ∞)
        UNPACK_SKIP_PIXELS           integer          0           [0, ∞)
        UNPACK_ALIGNMENT             integer          4           1,2,4,8
        UNPACK_IMAGE_HEIGHT          integer          0           [0, ∞)
        UNPACK_SKIP_IMAGES           integer          0           [0, ∞)

Table 3.1: PixelStore parameters pertaining to one or more of DrawPixels, Col-
orTable, ColorSubTable, ConvolutionFilter1D, ConvolutionFilter2D, Separa-
bleFilter2D, PolygonStipple, TexImage1D, TexImage2D, TexImage3D, Tex-
SubImage1D, TexSubImage2D, and TexSubImage3D.



PixelMap.

3.7.1    Pixel Storage Modes and Pixel Buffer Objects
Pixel storage modes affect the operation of TexImage*D, TexSubImage*D,
DrawPixels, and ReadPixels (as well as other commands; see sections 3.6.2
and 3.8) when one of these commands is issued. This may differ from the time
that the command is executed if the command is placed in a display list (see sec-
tion 5.4). Pixel storage modes are set with

        void PixelStore{if}( enum pname, T param );

pname is a symbolic constant indicating a parameter to be set, and param is the
value to set it to. Table 3.1 summarizes the pixel storage parameters, their types,
their initial values, and their allowable ranges. Setting a parameter to a value out-
side the given range results in the error INVALID_VALUE.
     The version of PixelStore that takes a floating-point value may be used to
set any type of parameter; if the parameter is boolean, then it is set to FALSE if
the passed value is 0.0 and TRUE otherwise, while if the parameter is an integer,
then the passed value is rounded to the nearest integer. The integer version of
the command may also be used to set any type of parameter; if the parameter is
boolean, then it is set to FALSE if the passed value is 0 and TRUE otherwise, while
if the parameter is a floating-point value, then the passed value is converted to
floating-point.

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                           153


    In addition to storing pixel data in client memory, pixel data may also be
stored in buffer objects (described in section 2.9). The current pixel unpack and
pack buffer objects are designated by the PIXEL_UNPACK_BUFFER and PIXEL_-
PACK_BUFFER targets respectively.
    Initially, zero is bound for the PIXEL_UNPACK_BUFFER, indicating that im-
age specification commands such as DrawPixels source their pixels from client
memory pointer parameters. However, if a non-zero buffer object is bound as the
current pixel unpack buffer, then the pointer parameter is treated as an offset into
the designated buffer object.

3.7.2   The Imaging Subset
Some pixel transfer and per-fragment operations are only made available in GL
implementations which incorporate the optional imaging subset. The imaging sub-
set includes both new commands, and new enumerants allowed as parameters to
existing commands. If the subset is supported, all of these calls and enumerants
must be implemented as described later in the GL specification. If the subset is
not supported, calling any unsupported command generates the error INVALID_-
OPERATION, and using any of the new enumerants generates the error INVALID_-
ENUM.
    The individual operations available only in the imaging subset are described in
section 3.7.3. Imaging subset operations include:
   1. Color tables, including all commands and enumerants described in sub-
      sections Color Table Specification, Alternate Color Table Specification
      Commands, Color Table State and Proxy State, Color Table Lookup,
      Post Convolution Color Table Lookup, and Post Color Matrix Color Ta-
      ble Lookup, as well as the query commands described in section 6.1.7.
   2. Convolution, including all commands and enumerants described in sub-
      sections Convolution Filter Specification, Alternate Convolution Filter
      Specification Commands, and Convolution, as well as the query com-
      mands described in section 6.1.8.
   3. Color matrix, including all commands and enumerants described in subsec-
      tions Color Matrix Specification and Color Matrix Transformation, as
      well as the simple query commands described in section 6.1.6.
   4. Histogram and minmax, including all commands and enumerants described
      in subsections Histogram Table Specification, Histogram State and
      Proxy State, Histogram, Minmax Table Specification, and Minmax, as
      well as the query commands described in section 6.1.9 and section 6.1.10.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            154


   Parameter Name                         Type      Initial Value   Valid Range
   MAP_COLOR                             boolean       FALSE        TRUE/FALSE
   MAP_STENCIL                           boolean       FALSE        TRUE/FALSE
   INDEX_SHIFT                           integer          0          (−∞, ∞)
   INDEX_OFFSET                          integer          0          (−∞, ∞)
   x_SCALE                                float          1.0         (−∞, ∞)
   DEPTH_SCALE                            float          1.0         (−∞, ∞)
   x_BIAS                                 float          0.0         (−∞, ∞)
   DEPTH_BIAS                             float          0.0         (−∞, ∞)
   POST_CONVOLUTION_x_SCALE               float          1.0         (−∞, ∞)
   POST_CONVOLUTION_x_BIAS                float          0.0         (−∞, ∞)
   POST_COLOR_MATRIX_x_SCALE              float          1.0         (−∞, ∞)
   POST_COLOR_MATRIX_x_BIAS               float          0.0         (−∞, ∞)

    Table 3.2: PixelTransfer parameters. x is RED, GREEN, BLUE, or ALPHA.


    The imaging subset is supported only if the EXTENSIONS string includes
the substring ”GL_ARB_imaging” Querying EXTENSIONS is described in sec-
tion 6.1.4.
    If the imaging subset is not supported, the related pixel transfer operations are
not performed; pixels are passed unchanged to the next operation.

3.7.3    Pixel Transfer Modes
Pixel transfer modes affect the operation of DrawPixels (section 3.7.5), ReadPix-
els (section 4.3.2), and CopyPixels (section 4.3.3) at the time when one of these
commands is executed (which may differ from the time the command is issued).
Some pixel transfer modes are set with

        void PixelTransfer{if}( enum param, T value );

param is a symbolic constant indicating a parameter to be set, and value is the value
to set it to. Table 3.2 summarizes the pixel transfer parameters that are set with
PixelTransfer, their types, their initial values, and their allowable ranges. Setting
a parameter to a value outside the given range results in the error INVALID_-
VALUE. The same versions of the command exist as for PixelStore, and the same
rules apply to accepting and converting passed values to set parameters.
    The pixel map lookup tables are set with

        void PixelMap{ui us f}v( enum map, sizei size, T values );

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                155


    Map Name                   Address         Value      Init. Size   Init. Value
    PIXEL_MAP_I_TO_I           color idx     color idx         1           0.0
    PIXEL_MAP_S_TO_S          stencil idx   stencil idx        1             0
    PIXEL_MAP_I_TO_R           color idx        R              1           0.0
    PIXEL_MAP_I_TO_G           color idx        G              1           0.0
    PIXEL_MAP_I_TO_B           color idx        B              1           0.0
    PIXEL_MAP_I_TO_A           color idx        A              1           0.0
    PIXEL_MAP_R_TO_R              R             R              1           0.0
    PIXEL_MAP_G_TO_G              G             G              1           0.0
    PIXEL_MAP_B_TO_B              B             B              1           0.0
    PIXEL_MAP_A_TO_A              A             A              1           0.0

                         Table 3.3: PixelMap parameters.



map is a symbolic map name, indicating the map to set, size indicates the size of
the map, and values refers to an array of size map values.
     The entries of a table may be specified using one of three types: single-
precision floating-point, unsigned short integer, or unsigned integer, depending on
which of the three versions of PixelMap is called. A table entry is converted to
the appropriate type when it is specified. An entry giving a color component value
is converted as described in equation 2.1 and then clamped to the range [0, 1].
An entry giving a color index value is converted from an unsigned short integer or
unsigned integer to floating-point. An entry giving a stencil index is converted
from single-precision floating-point to an integer by rounding to nearest. The var-
ious tables and their initial sizes and entries are summarized in table 3.3. A table
that takes an index as an address must have size = 2n or the error INVALID_-
VALUE results. The maximum allowable size of each table is specified by the
implementation-dependent value MAX_PIXEL_MAP_TABLE, but must be at least
32 (a single maximum applies to all tables). The error INVALID_VALUE is gener-
ated if a size larger than the implemented maximum, or less than one, is given to
PixelMap.
     If a pixel unpack buffer is bound (as indicated by a non-zero value of PIXEL_-
UNPACK_BUFFER_BINDING), values is an offset into the pixel unpack buffer; oth-
erwise, values is a pointer to client memory. All pixel storage and pixel transfer
modes are ignored when specifying a pixel map. n machine units are read where n
is the size of the pixel map times the size of a float, uint, or ushort datum in
basic machine units, depending on the respective PixelMap version. If a pixel un-
pack buffer object is bound and data + n is greater than the size of the pixel buffer,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                          156


            Table Name                                          Type
            COLOR_TABLE                                        regular
            POST_CONVOLUTION_COLOR_TABLE
            POST_COLOR_MATRIX_COLOR_TABLE
            PROXY_COLOR_TABLE                                   proxy
            PROXY_POST_CONVOLUTION_COLOR_TABLE
            PROXY_POST_COLOR_MATRIX_COLOR_TABLE

Table 3.4: Color table names. Regular tables have associated image data. Proxy
tables have no image data, and are used only to determine if an image can be loaded
into the corresponding regular table.



an INVALID_OPERATION error results. If a pixel unpack buffer object is bound
and values is not evenly divisible by the number of basic machine units needed to
store in memory a float, uint, or ushort datum depending on their respective
PixelMap version, an INVALID_OPERATION error results.

Color Table Specification
Color lookup tables are specified with

      void ColorTable( enum target, enum internalformat,
         sizei width, enum format, enum type, void *data );

target must be one of the regular color table names listed in table 3.4 to define
the table. A proxy table name is a special case discussed later in this section.
width, format, type, and data specify an image in memory with the same mean-
ing and allowed values as the corresponding arguments to DrawPixels (see sec-
tion 3.7.5), with height taken to be 1. The maximum allowable width of a ta-
ble is implementation-dependent, but must be at least 32. The formats COLOR_-
INDEX, DEPTH_COMPONENT, DEPTH_STENCIL, and STENCIL_INDEX and the
type BITMAP are not allowed.
     The specified image is taken from memory and processed just as if DrawPixels
were called, stopping after the final expansion to RGBA. The R, G, B, and A com-
ponents of each pixel are then scaled by the four COLOR_TABLE_SCALE param-
eters and biased by the four COLOR_TABLE_BIAS parameters. These parameters
are set by calling ColorTableParameterfv as described below. If fragment color
clamping is enabled or internalformat is fixed-point, components are clamped to
[0, 1]. Otherwise, components are not modified.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                          157


    Components are then selected from the resulting R, G, B, and A values to
obtain a table with the base internal format specified by (or derived from) inter-
nalformat, in the same manner as for textures (section 3.9.1). internalformat must
be one of the formats in table 3.16 or tables 3.17- 3.19, with the exception of the
RED, RG, DEPTH_COMPONENT, and DEPTH_STENCIL base and sized internal for-
mats in those tables, all sized internal formats with non-fixed internal data types
(see section 3.9), and sized internal format RGB9_E5.
    The color lookup table is redefined to have width entries, each with the speci-
fied internal format. The table is formed with indices 0 through width − 1. Table
location i is specified by the ith image pixel, counting from zero.
    The error INVALID_VALUE is generated if width is not zero or a non-negative
power of two. The error TABLE_TOO_LARGE is generated if the specified color
lookup table is too large for the implementation.
    The scale and bias parameters for a table are specified by calling

      void ColorTableParameter{if}v( enum target, enum pname,
         T params );

target must be a regular color table name. pname is one of COLOR_TABLE_SCALE
or COLOR_TABLE_BIAS. params points to an array of four values: red, green, blue,
and alpha, in that order.
    A GL implementation may vary its allocation of internal component resolution
based on any ColorTable parameter, but the allocation must not be a function of
any other factor, and cannot be changed once it is established. Allocations must
be invariant; the same allocation must be made each time a color table is specified
with the same parameter values. These allocation rules also apply to proxy color
tables, which are described later in this section.

Alternate Color Table Specification Commands
Color tables may also be specified using image data taken directly from the frame-
buffer, and portions of existing tables may be respecified.
    The command

      void CopyColorTable( enum target, enum internalformat,
         int x, int y, sizei width );

defines a color table in exactly the manner of ColorTable, except that table data
are taken from the framebuffer, rather than from client memory. target must be a
regular color table name. x, y, and width correspond precisely to the corresponding
arguments of CopyPixels (refer to section 4.3.3); they specify the image’s width

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                           158


and the lower left (x, y) coordinates of the framebuffer region to be copied. The
image is taken from the framebuffer exactly as if these arguments were passed to
CopyPixels with argument type set to COLOR and height set to 1, stopping after the
final expansion to RGBA.
    Subsequent processing is identical to that described for ColorTable, begin-
ning with scaling by COLOR_TABLE_SCALE. Parameters target, internalformat and
width are specified using the same values, with the same meanings, as the equiva-
lent arguments of ColorTable. format is taken to be RGBA.
    Two additional commands,

      void ColorSubTable( enum target, sizei start, sizei count,
         enum format, enum type, void *data );
      void CopyColorSubTable( enum target, sizei start, int x,
         int y, sizei count );

respecify only a portion of an existing color table. No change is made to the inter-
nalformat or width parameters of the specified color table, nor is any change made
to table entries outside the specified portion. target must be a regular color table
name.
    ColorSubTable arguments format, type, and data match the corresponding ar-
guments to ColorTable, meaning that they are specified using the same values,
and have the same meanings. Likewise, CopyColorSubTable arguments x, y, and
count match the x, y, and width arguments of CopyColorTable. Both of the Color-
SubTable commands interpret and process pixel groups in exactly the manner of
their ColorTable counterparts, except that the assignment of R, G, B, and A pixel
group values to the color table components is controlled by the internalformat of
the table, not by an argument to the command.
    Arguments start and count of ColorSubTable and CopyColorSubTable spec-
ify a subregion of the color table starting at index start and ending at index
start + count − 1. Counting from zero, the nth pixel group is assigned to the
table entry with index count + n. The error INVALID_VALUE is generated if
start + count > width.
    Calling CopyColorTable or CopyColorSubTable will result in an
INVALID_FRAMEBUFFER_OPERATION error if the object bound to READ_-
FRAMEBUFFER_BINDING is not framebuffer complete (see section 4.4.4).

Color Table State and Proxy State
The state necessary for color tables can be divided into two categories. For each
of the three tables, there is an array of values. Each array has associated with it


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                              159


a width, an integer describing the internal format of the table, six integer values
describing the resolutions of each of the red, green, blue, alpha, luminance, and
intensity components of the table, and two groups of four floating-point numbers to
store the table scale and bias. Each initial array is null (zero width, internal format
RGBA, with zero-sized components). The initial value of the scale parameters is
(1,1,1,1) and the initial value of the bias parameters is (0,0,0,0).
    In addition to the color lookup tables, partially instantiated proxy color lookup
tables are maintained. Each proxy table includes width and internal format state
values, as well as state for the red, green, blue, alpha, luminance, and intensity
component resolutions. Proxy tables do not include image data, nor do they include
scale and bias parameters. When ColorTable is executed with target specified as
one of the proxy color table names listed in table 3.4, the proxy state values of the
table are recomputed and updated. If the table is too large, no error is generated, but
the proxy format, width and component resolutions are set to zero. If the color table
would be accommodated by ColorTable called with target set to the corresponding
regular table name (COLOR_TABLE is the regular name corresponding to PROXY_-
COLOR_TABLE, for example), the proxy state values are set exactly as though the
regular table were being specified. Calling ColorTable with a proxy target has no
effect on the image or state of any actual color table.
    There is no image associated with any of the proxy targets. They cannot be
used as color tables, and they must never be queried using GetColorTable. The
error INVALID_ENUM is generated if this is attempted.

Convolution Filter Specification
A two-dimensional convolution filter image is specified by calling

      void ConvolutionFilter2D( enum target, enum internalformat,
         sizei width, sizei height, enum format, enum type,
         void *data );

target must be CONVOLUTION_2D. width, height, format, type, and data specify an
image in memory with the same meaning and allowed values as the correspond-
ing parameters to DrawPixels. The formats COLOR_INDEX, DEPTH_COMPONENT,
DEPTH_STENCIL, and STENCIL_INDEX and the type BITMAP are not allowed.
    The specified image is extracted from memory and processed just as if
DrawPixels were called, stopping after the final expansion to RGBA. The
R, G, B, and A components of each pixel are then scaled by the four two-
dimensional CONVOLUTION_FILTER_SCALE parameters and biased by the four
two-dimensional CONVOLUTION_FILTER_BIAS parameters. These parameters


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            160


are set by calling ConvolutionParameterfv as described below. No clamping
takes place at any time during this process.
    Components are then selected from the resulting R, G, B, and A values to
obtain a table with the base internal format specified by (or derived from) internal-
format, in the same manner as for textures (section 3.9.1). internalformat accepts
the same values as the corresponding argument of ColorTable.
    The red, green, blue, alpha, luminance, and/or intensity components of the
pixels are stored in floating point, rather than integer format. They form a two-
dimensional image indexed with coordinates i, j such that i increases from left to
right, starting at zero, and j increases from bottom to top, also starting at zero.
Image location i, j is specified by the N th pixel, counting from zero, where

                                N = i + j ∗ width

    The error INVALID_VALUE is generated if width or height is greater than
the maximum supported value. These values are queried with GetConvo-
lutionParameteriv, setting target to CONVOLUTION_2D and pname to MAX_-
CONVOLUTION_WIDTH or MAX_CONVOLUTION_HEIGHT, respectively.
    The scale and bias parameters for a two-dimensional filter are specified by
calling

      void ConvolutionParameter{if}v( enum target, enum pname,
         T params );

with target CONVOLUTION_2D. pname is one of CONVOLUTION_FILTER_SCALE
or CONVOLUTION_FILTER_BIAS. params points to an array of four values: red,
green, blue, and alpha, in that order.
    A one-dimensional convolution filter is defined using

      void ConvolutionFilter1D( enum target, enum internalformat,
         sizei width, enum format, enum type, void *data );

target must be CONVOLUTION_1D. internalformat, width, format, and type have
identical semantics and accept the same values as do their two-dimensional coun-
terparts. data must point to a one-dimensional image, however.
    The image is extracted from memory and processed as if ConvolutionFilter2D
were called with a height of 1, except that it is scaled and biased by the one-
dimensional CONVOLUTION_FILTER_SCALE and CONVOLUTION_FILTER_BIAS
parameters. These parameters are specified exactly as the two-dimensional param-
eters, except that ConvolutionParameterfv is called with target CONVOLUTION_-
1D.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            161


    The image is formed with coordinates i such that i increases from left to right,
starting at zero. Image location i is specified by the ith pixel, counting from zero.
    The error INVALID_VALUE is generated if width is greater than the maximum
supported value. This value is queried using GetConvolutionParameteriv, setting
target to CONVOLUTION_1D and pname to MAX_CONVOLUTION_WIDTH.
    Special facilities are provided for the definition of two-dimensional sepa-
rable filters – filters whose image can be represented as the product of two
one-dimensional images, rather than as full two-dimensional images. A two-
dimensional separable convolution filter is specified with

      void SeparableFilter2D( enum target, enum internalformat,
         sizei width, sizei height, enum format, enum type,
         void *row, void *column );

target must be SEPARABLE_2D. internalformat specifies the formats of the table
entries of the two one-dimensional images that will be retained. row points to a
width pixel wide image of the specified format and type. column points to a height
pixel high image, also of the specified format and type.
    The two images are extracted from memory and processed as if Convolu-
tionFilter1D were called separately for each, except that each image is scaled
and biased by the two-dimensional separable CONVOLUTION_FILTER_SCALE and
CONVOLUTION_FILTER_BIAS parameters. These parameters are specified ex-
actly as the one-dimensional and two-dimensional parameters, except that Con-
volutionParameteriv is called with target SEPARABLE_2D.

Alternate Convolution Filter Specification Commands
One and two-dimensional filters may also be specified using image data taken di-
rectly from the framebuffer.
    The command

      void CopyConvolutionFilter2D( enum target,
         enum internalformat, int x, int y, sizei width,
         sizei height );

defines a two-dimensional filter in exactly the manner of ConvolutionFilter2D,
except that image data are taken from the framebuffer, rather than from client
memory. target must be CONVOLUTION_2D. x, y, width, and height correspond
precisely to the corresponding arguments of CopyPixels (refer to section 4.3.3);
they specify the image’s width and height, and the lower left (x, y) coordinates
of the framebuffer region to be copied. The image is taken from the framebuffer

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            162


exactly as if these arguments were passed to CopyPixels with argument type set to
COLOR, stopping after the final expansion to RGBA.
    Subsequent processing is identical to that described for ConvolutionFilter2D,
beginning with scaling by CONVOLUTION_FILTER_SCALE. Parameters target, in-
ternalformat, width, and height are specified using the same values, with the same
meanings, as the equivalent arguments of ConvolutionFilter2D. format is taken to
be RGBA.
    The command

      void CopyConvolutionFilter1D( enum target,
         enum internalformat, int x, int y, sizei width );

defines a one-dimensional filter in exactly the manner of ConvolutionFilter1D,
except that image data are taken from the framebuffer, rather than from client mem-
ory. target must be CONVOLUTION_1D. x, y, and width correspond precisely to the
corresponding arguments of CopyPixels (refer to section 4.3.3); they specify the
image’s width and the lower left (x, y) coordinates of the framebuffer region to
be copied. The image is taken from the framebuffer exactly as if these arguments
were passed to CopyPixels with argument type set to COLOR and height set to 1,
stopping after the final expansion to RGBA.
    Subsequent processing is identical to that described for ConvolutionFilter1D,
beginning with scaling by CONVOLUTION_FILTER_SCALE. Parameters target, in-
ternalformat, and width are specified using the same values, with the same mean-
ings, as the equivalent arguments of ConvolutionFilter2D. format is taken to be
RGBA.
    Calling CopyConvolutionFilter1D or CopyConvolutionFilter2D will result
in an INVALID_FRAMEBUFFER_OPERATION error if the object bound to READ_-
FRAMEBUFFER_BINDING is not framebuffer complete (see section 4.4.4).

Convolution Filter State
The required state for convolution filters includes a one-dimensional image array,
two one-dimensional image arrays for the separable filter, and a two-dimensional
image array. Each filter has associated with it a width and height (two-dimensional
and separable only), an integer describing the internal format of the filter, and two
groups of four floating-point numbers to store the filter scale and bias.
    Each initial convolution filter is null (zero width and height, internal format
RGBA, with zero-sized components). The initial value of all scale parameters is
(1,1,1,1) and the initial value of all bias parameters is (0,0,0,0).



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             163


Color Matrix Specification
Setting the matrix mode to COLOR causes the matrix operations described in sec-
tion 2.12.1 to apply to the top matrix on the color matrix stack. All matrix opera-
tions have the same effect on the color matrix as they do on the other matrices.

Histogram Table Specification
The histogram table is specified with

      void Histogram( enum target, sizei width,
         enum internalformat, boolean sink );

target must be HISTOGRAM if a histogram table is to be specified. target value
PROXY_HISTOGRAM is a special case discussed later in this section. width speci-
fies the number of entries in the histogram table, and internalformat specifies the
format of each table entry. The maximum allowable width of the histogram table
is implementation-dependent, but must be at least 32. sink specifies whether pixel
groups will be consumed by the histogram operation (TRUE) or passed on to the
minmax operation (FALSE).
     If no error results from the execution of Histogram, the specified histogram
table is redefined to have width entries, each with the specified internal format.
The entries are indexed 0 through width − 1. Each component in each entry is set
to zero. The values in the previous histogram table, if any, are lost.
     The error INVALID_VALUE is generated if width is not zero or a non-negative
power of two. The error TABLE_TOO_LARGE is generated if the specified his-
togram table is too large for the implementation. internalformat accepts the same
values as the corresponding argument of ColorTable, with the exception of the
values 1, 2, 3, and 4.
     A GL implementation may vary its allocation of internal component resolution
based on any Histogram parameter, but the allocation must not be a function of any
other factor, and cannot be changed once it is established. In particular, allocations
must be invariant; the same allocation must be made each time a histogram is
specified with the same parameter values. These allocation rules also apply to the
proxy histogram, which is described later in this section.

Histogram State and Proxy State
The state necessary for histogram operation is an array of values, with which is
associated a width, an integer describing the internal format of the histogram, five
integer values describing the resolutions of each of the red, green, blue, alpha,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             164


and luminance components of the table, and a flag indicating whether or not pixel
groups are consumed by the operation. The initial array is null (zero width, internal
format RGBA, with zero-sized components). The initial value of the flag is false.
    In addition to the histogram table, a partially instantiated proxy histogram table
is maintained. It includes width, internal format, and red, green, blue, alpha, and
luminance component resolutions. The proxy table does not include image data or
the flag. When Histogram is executed with target set to PROXY_HISTOGRAM, the
proxy state values are recomputed and updated. If the histogram array is too large,
no error is generated, but the proxy format, width, and component resolutions are
set to zero. If the histogram table would be accomodated by Histogram called
with target set to HISTOGRAM, the proxy state values are set exactly as though
the actual histogram table were being specified. Calling Histogram with target
PROXY_HISTOGRAM has no effect on the actual histogram table.
    There is no image associated with PROXY_HISTOGRAM. It cannot be used as
a histogram, and its image must never queried using GetHistogram. The error
INVALID_ENUM results if this is attempted.

Minmax Table Specification
The minmax table is specified with

      void Minmax( enum target, enum internalformat,
         boolean sink );

target must be MINMAX. internalformat specifies the format of the table entries.
sink specifies whether pixel groups will be consumed by the minmax operation
(TRUE) or passed on to final conversion (FALSE).
    internalformat accepts the same values as the corresponding argument of Col-
orTable, with the exception of the values 1, 2, 3, and 4, as well as the INTENSITY
base and sized internal formats. The resulting table always has 2 entries, each with
values corresponding only to the components of the internal format.
    The state necessary for minmax operation is a table containing two elements
(the first element stores the minimum values, the second stores the maximum val-
ues), an integer describing the internal format of the table, and a flag indicating
whether or not pixel groups are consumed by the operation. The initial state is
a minimum table entry set to the maximum representable value and a maximum
table entry set to the minimum representable value. Internal format is set to RGBA
and the initial value of the flag is false.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            165


3.7.4   Transfer of Pixel Rectangles
     The process of transferring pixels encoded in buffer object or client memory
is diagrammed in figure 3.7. We describe the stages of this process in the order in
which they occur.
     Commands accepting or returning pixel rectangles take the following argu-
ments (as well as additional arguments specific to their function):
     format is a symbolic constant indicating what the values in memory represent.
     width and height are the width and height, respectively, of the pixel rectangle
to be transferred.
     data refers to the data to be drawn. These data are represented with one of
several GL data types, specified by type. The correspondence between the type
token values and the GL data types they indicate is given in table 3.5.
     Not all combinations of format and type are valid. If type is BITMAP and format
is not COLOR_INDEX or STENCIL_INDEX then the error INVALID_ENUM occurs.
If format is DEPTH_STENCIL and type is not UNSIGNED_INT_24_8 or FLOAT_-
32_UNSIGNED_INT_24_8_REV, then the error INVALID_ENUM occurs. If format
is one of the integer component formats as defined in table 3.6 and type is FLOAT,
the error INVALID_ENUM occurs. Some additional constraints on the combina-
tions of format and type values that are accepted are discussed below. Additional
restrictions may be imposed by specific commands.

Unpacking
Data are taken from the currently bound pixel unpack buffer or client memory as a
sequence of signed or unsigned bytes (GL data types byte and ubyte), signed or
unsigned short integers (GL data types short and ushort), signed or unsigned
integers (GL data types int and uint), or floating point values (GL data types
half and float). These elements are grouped into sets of one, two, three, or
four values, depending on the format, to form a group. Table 3.6 summarizes the
format of groups obtained from memory; it also indicates those formats that yield
indices and those that yield floating-point or integer components.
     If a pixel unpack buffer is bound (as indicated by a non-zero value of PIXEL_-
UNPACK_BUFFER_BINDING), data is an offset into the pixel unpack buffer and
the pixels are unpacked from the buffer relative to this offset; otherwise, data is a
pointer to client memory and the pixels are unpacked from client memory relative
to the pointer. If a pixel unpack buffer object is bound and unpacking the pixel data
according to the process described below would access memory beyond the size of
the pixel unpack buffer’s memory size, an INVALID_OPERATION error results. If a
pixel unpack buffer object is bound and data is not evenly divisible by the number
of basic machine units needed to store in memory the corresponding GL data type

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                                                                                 166



           byte, short, int, or float pixel
        data stream (index or component)
                                                                                                                                               




                                                                                                                                               




                                                                          




                                                                             unpack
                                                                                                                                               




                                                                                                                                               




                                           RGBA, L                                                                                color
                                                                                                                                               




                                                                                                                               




                                                                                                                                  index
                                                                                                                                               




                              




                                 convert
                                                                                                                                               




                              




                                 to float
                                                                




                                                                   Pixel Storage
                                                                                                                                               




                                                                




                                                                    Operations
                                                                                                                                               




                                                                                                                                               




                                                                                                                                               




                              
                              convert
                                                                                                                                               




                          
                             L to RGB
                                                                                                                                               




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡




                                  scale
                                       ¡   ¡   ¡   ¡   ¡   ¡   ¡




                                                                   Pixel Transfer
                                                                    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡




                                                                                                                       shift
                                                                                                                              ¡   ¡   ¡   ¡   ¡   ¡




             ¡




             ¡
                 ¡




                 ¡
                     ¡




                     ¡
                         ¡




                         ¡
                             ¡




                             ¡
                                   ¡   ¡




                                 and bias
                                   ¡   ¡
                                           ¡




                                           ¡
                                               ¡




                                               ¡
                                                   ¡




                                                   ¡
                                                       ¡




                                                       ¡
                                                           ¡




                                                           ¡
                                                               ¡




                                                               ¡
                                                                    Operations
                                                                    ¡




                                                                    ¡
                                                                         ¡




                                                                         ¡
                                                                              ¡




                                                                              ¡
                                                                                  ¡




                                                                                  ¡
                                                                                      ¡




                                                                                      ¡
                                                                                          ¡




                                                                                          ¡
                                                                                               ¡




                                                                                               ¡
                                                                                                   ¡




                                                                                                   ¡
                                                                                                       ¡




                                                                                                       ¡
                                                                                                           ¡




                                                                                                           ¡
                                                                                                               ¡




                                                                                                               ¡
                                                                                                                     ¡    ¡   ¡




                                                                                                                     and offset
                                                                                                                     ¡    ¡   ¡
                                                                                                                                  ¡




                                                                                                                                  ¡
                                                                                                                                      ¡




                                                                                                                                      ¡
                                                                                                                                          ¡




                                                                                                                                          ¡
                                                                                                                                              ¡




                                                                                                                                              ¡
                                                                                                                                                  ¡




                                                                                                                                                  ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡




                         RGBA to RGBA
                         ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡




                                                                    index to RGBA
                                                                    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡




                                                                                                                   index to index
                                                                                                                     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡




                            lookup
                             ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡




                                                                        lookup
                                                                         ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡




                                                                                                                      lookup
                                                                                                                          ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡
                             color table
                             ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡
                               lookup
                                   ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡




                          convolution
                             ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡




                                                                        color table
                                                                         ¡    ¡   ¡   ¡   ¡    ¡   ¡
                                                                                                       post
                                                                                                       ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡




                         scale and bias
                         ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡




                                                                          lookup
                                                                              ¡   ¡   ¡   ¡    ¡
                                                                                                   color matrix
                                                                                                   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




      post                   color table                                histogram
   convolution                 lookup
             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡




                          color matrix
                             ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡




                                                                             minmax
                                                                              ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡




                         scale and bias
                         ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




             ¡   ¡   ¡   ¡   ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡     ¡    ¡   ¡   ¡   ¡   ¡   ¡   ¡




                                  clamp                                    final                                         mask to
                                 to [0,1]                               conversion                                       (2n − 1)

            RGBA pixel                                                                        color index pixel
             data out                                                                             data out




  Figure 3.7. Transfer of pixel rectangles to the GL. Output is RGBA pixels if the GL
  is in RGBA mode, color index pixels otherwise. Operations in dashed boxes may
  be enabledOpenGL
              or disabled.  RGBA
                       3.1 with  GLand  colorcompatibility
                                      ARB      index pixel paths
                                                            - Mayare28,
                                                                     shown;
                                                                        2009depth and
  stencil pixel paths are not shown.
3.7. PIXEL RECTANGLES                                                       167




   type Parameter                             Corresponding       Special
   Token Name                                 GL Data Type     Interpretation
   UNSIGNED_BYTE                                 ubyte              No
   BITMAP                                        ubyte              Yes
   BYTE                                           byte              No
   UNSIGNED_SHORT                               ushort              No
   SHORT                                         short              No
   UNSIGNED_INT                                   uint              No
   INT                                             int              No
   HALF_FLOAT                                     half              No
   FLOAT                                         float              No
   UNSIGNED_BYTE_3_3_2                           ubyte              Yes
   UNSIGNED_BYTE_2_3_3_REV                       ubyte              Yes
   UNSIGNED_SHORT_5_6_5                         ushort              Yes
   UNSIGNED_SHORT_5_6_5_REV                     ushort              Yes
   UNSIGNED_SHORT_4_4_4_4                       ushort              Yes
   UNSIGNED_SHORT_4_4_4_4_REV                   ushort              Yes
   UNSIGNED_SHORT_5_5_5_1                       ushort              Yes
   UNSIGNED_SHORT_1_5_5_5_REV                   ushort              Yes
   UNSIGNED_INT_8_8_8_8                           uint              Yes
   UNSIGNED_INT_8_8_8_8_REV                       uint              Yes
   UNSIGNED_INT_10_10_10_2                        uint              Yes
   UNSIGNED_INT_2_10_10_10_REV                    uint              Yes
   UNSIGNED_INT_24_8                              uint              Yes
   UNSIGNED_INT_10F_11F_11F_REV                   uint              Yes
   UNSIGNED_INT_5_9_9_9_REV                       uint              Yes
   FLOAT_32_UNSIGNED_INT_24_8_REV                  n/a              Yes

Table 3.5: Pixel data type parameter values and the corresponding GL data types.
Refer to table 2.2 for definitions of GL data types. Special interpretations are
described near the end of section 3.8.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                        168




    Format Name            Element Meaning and Order      Target Buffer
    COLOR_INDEX                   Color Index              Color Index
    STENCIL_INDEX                Stencil Index               Stencil
    DEPTH_COMPONENT                  Depth                    Depth
    DEPTH_STENCIL            Depth and Stencil Index     Depth and Stencil
    RED                                 R                     Color
    GREEN                              G                      Color
    BLUE                                B                     Color
    ALPHA                              A                      Color
    RG                                R, G                    Color
    RGB                             R, G, B                   Color
    RGBA                           R, G, B, A                 Color
    BGR                             B, G, R                   Color
    BGRA                           B, G, R, A                 Color
    LUMINANCE                      Luminance                  Color
    LUMINANCE_ALPHA              Luminance, A                 Color
    RED_INTEGER                        iR                     Color
    GREEN_INTEGER                      iG                     Color
    BLUE_INTEGER                       iB                     Color
    ALPHA_INTEGER                      iA                     Color
    RG_INTEGER                       iR, iG                   Color
    RGB_INTEGER                    iR, iG, iB                 Color
    RGBA_INTEGER                 iR, iG, iB, iA               Color
    BGR_INTEGER                    iB, iG, iR                 Color
    BGRA_INTEGER                 iB, iG, iR, iA               Color

Table 3.6: Pixel data formats. The second column gives a description of and the
number and order of elements in a group. Unless specified as an index, formats
yield components. Components are floating-point unless prefixed with the letter
’i’, which indicates they are integer.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                               169


       Element Size      Default Bit Ordering     Modified Bit Ordering
       8 bit             [7..0]                   [7..0]
       16 bit            [15..0]                  [7..0][15..8]
       32 bit            [31..0]                  [7..0][15..8][23..16][31..24]

Table 3.7: Bit ordering modification of elements when UNPACK_SWAP_BYTES is
enabled. These reorderings are defined only when GL data type ubyte has 8 bits,
and then only for GL data types with 8, 16, or 32 bits. Bit 0 is the least significant.



from table 3.5 for the type parameter, an INVALID_OPERATION error results.
     By default the values of each GL data type are interpreted as they would be
specified in the language of the client’s GL binding. If UNPACK_SWAP_BYTES is
enabled, however, then the values are interpreted with the bit orderings modified
as per table 3.7. The modified bit orderings are defined only if the GL data type
ubyte has eight bits, and then for each specific GL data type only if that type is
represented with 8, 16, or 32 bits.
     The groups in memory are treated as being arranged in a rectangle. This rect-
angle consists of a series of rows, with the first element of the first group of the
first row pointed to by data. If the value of UNPACK_ROW_LENGTH is not positive,
then the number of groups in a row is width; otherwise the number of groups is
UNPACK_ROW_LENGTH. If p indicates the location in memory of the first element
of the first row, then the first element of the N th row is indicated by

                                       p + Nk                                     (3.14)
    where N is the row number (counting from zero) and k is defined as

                                   nl              s ≥ a,
                           k=                                                     (3.15)
                                   a/s snl/a       s<a
    where n is the number of elements in a group, l is the number of groups in
the row, a is the value of UNPACK_ALIGNMENT, and s is the size, in units of GL
ubytes, of an element. If the number of bits per element is not 1, 2, 4, or 8 times
the number of bits in a GL ubyte, then k = nl for all values of a.
    There is a mechanism for selecting a sub-rectangle of groups from a
larger containing rectangle. This mechanism relies on three integer parameters:
UNPACK_ROW_LENGTH, UNPACK_SKIP_ROWS, and UNPACK_SKIP_PIXELS. Be-
fore obtaining the first group from memory, the data pointer is advanced by
(UNPACK_SKIP_PIXELS)n + (UNPACK_SKIP_ROWS)k elements. Then width
groups are obtained from contiguous elements in memory (without advancing the


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             170




                                               ROW_LENGTH
                                                                     




                                                                     




                                                                     




                                                                     




                                        
                                           subimage
                                                                     




                                                                     




                 SKIP_PIXELS    




                                
                                    




                                    
                                        




                                        
                                            




                                            
                                                 




                                                 
                                                     




                                                     
                                                         




                                                         
                                                             




                                                             
                                                                 




                                                                 
                                                                     




                                                                     




                                   SKIP_ROWS




   Figure 3.8. Selecting a subimage from an image. The indicated parameter names
   are prefixed by UNPACK_ for DrawPixels and by PACK_ for ReadPixels.




pointer), after which the pointer is advanced by k elements. height sets of width
groups of values are obtained this way. See figure 3.8.

Special Interpretations
    A type matching one of the types in table 3.8 is a special case in which all
the components of each group are packed into a single unsigned byte, unsigned
short, or unsigned int, depending on the type. If type is FLOAT_32_UNSIGNED_-
INT_24_8_REV, the components of each group are contained within two 32-bit
words; the first word contains the float component, and the second word contains
a packed 24-bit unused field, followed by an 8-bit component. The number of
components per packed pixel is fixed by the type, and must match the number of
components per group indicated by the format parameter, as listed in table 3.8.
The error INVALID_OPERATION is generated by any command processing pixel
rectangles if a mismatch occurs.
    Bitfield locations of the first, second, third, and fourth components of each
packed pixel type are illustrated in tables 3.9- 3.12. Each bitfield is interpreted as
an unsigned integer value. If the base GL type is supported with more than the
minimum precision (e.g. a 9-bit byte) the packed components are right-justified in
the pixel.
    Components are normally packed with the first component in the most signif-
icant bits of the bitfield, and successive component occupying progressively less
significant locations. Types whose token names end with _REV reverse the compo-


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                     171




 type Parameter                           GL Data         Number of      Matching
 Token Name                                Type          Components    Pixel Formats
 UNSIGNED_BYTE_3_3_2                      ubyte              3             RGB
 UNSIGNED_BYTE_2_3_3_REV                  ubyte              3             RGB
 UNSIGNED_SHORT_5_6_5                     ushort             3             RGB
 UNSIGNED_SHORT_5_6_5_REV                 ushort             3             RGB
 UNSIGNED_SHORT_4_4_4_4                   ushort             4          RGBA,BGRA
 UNSIGNED_SHORT_4_4_4_4_REV               ushort             4          RGBA,BGRA
 UNSIGNED_SHORT_5_5_5_1                   ushort             4          RGBA,BGRA
 UNSIGNED_SHORT_1_5_5_5_REV               ushort             4          RGBA,BGRA
 UNSIGNED_INT_8_8_8_8                      uint              4          RGBA,BGRA
 UNSIGNED_INT_8_8_8_8_REV                  uint              4          RGBA,BGRA
 UNSIGNED_INT_10_10_10_2                   uint              4          RGBA,BGRA
 UNSIGNED_INT_2_10_10_10_REV               uint              4          RGBA,BGRA
 UNSIGNED_INT_24_8                         uint              2        DEPTH_STENCIL
 UNSIGNED_INT_10F_11F_11F_REV              uint              3             RGB
 UNSIGNED_INT_5_9_9_9_REV                  uint              4             RGB
 FLOAT_32_UNSIGNED_INT_24_8_REV             n/a              2        DEPTH_STENCIL

                      Table 3.8: Packed pixel formats.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                          172


nent packing order from least to most significant locations. In all cases, the most
significant bit of each component is packed in the most significant bit location of
its location in the bitfield.
UNSIGNED_BYTE_3_3_2:

                      7        6       5   4     3     2       1         0

                           1st Component         2nd               3rd




UNSIGNED_BYTE_2_3_3_REV:

                       7           6   5   4     3     2       1         0

                             3rd           2nd             1st Component


Table 3.9: UNSIGNED_BYTE formats. Bit numbers are indicated for each compo-
nent.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                                                   173




UNSIGNED_SHORT_5_6_5:

  15     14         13    12    11    10         9   8           7     6         5   4   3       2            1   0

           1st Component                                   2nd                                    3rd




UNSIGNED_SHORT_5_6_5_REV:

  15     14         13    12    11    10         9   8           7     6         5   4   3       2            1   0

                    3rd                                    2nd                               1st Component




UNSIGNED_SHORT_4_4_4_4:

  15     14         13    12    11    10         9   8           7     6         5   4   3       2            1   0

        1st Component                      2nd                             3rd                          4th




UNSIGNED_SHORT_4_4_4_4_REV:

  15     14         13    12    11    10         9   8           7     6         5   4   3       2            1   0

              4th                          3rd                             2nd                  1st Component




UNSIGNED_SHORT_5_5_5_1:

  15     14         13    12    11    10         9   8           7     6         5   4   3       2            1   0

           1st Component                             2nd                                 3rd                      4th




UNSIGNED_SHORT_1_5_5_5_REV:

  15     14         13    12     11   10         9   8           7     6         5   4   3        2           1   0

  4th                     3rd                                    2nd                         1st Component


                                Table 3.10: UNSIGNED_SHORT formats




                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                                                          174




UNSIGNED_INT_8_8_8_8:

 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9             8   7   6    5    4     3       2   1     0

        1st Component                       2nd                            3rd                         4th




UNSIGNED_INT_8_8_8_8_REV:

 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9             8   7   6    5    4     3       2   1     0

               4th                           3rd                           2nd                1st Component




UNSIGNED_INT_10_10_10_2:

 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9             8   7   6    5    4     3       2   1     0

              1st Component                             2nd                          3rd                                 4th




UNSIGNED_INT_2_10_10_10_REV:

 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9             8   7   6    5    4     3       2   1     0

  4th                      3rd                                 2nd                       1st Component




UNSIGNED_INT_24_8:

 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9             8   7   6    5    4     3       2   1     0

                                        1st Component                                              2nd




UNSIGNED_INT_10F_11F_11F_REV:

 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9             8   7   6    5    4     3       2   1     0

                     3rd                                 2nd                         1st Component




UNSIGNED_INT_5_9_9_9_REV:

  31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9            8   7    6    5   4         3   2   1         0

        4th                       3rd                                2nd                     1st Component


                                 Table 3.11: UNSIGNED_INT formats




                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                                   175




FLOAT_32_UNSIGNED_INT_24_8_REV:

  31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9   8   7   6   5   4   3   2   1   0

                                           1st Component



 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9    8   7   6   5   4   3   2   1   0

                                 Unused                                                 2nd




                     Table 3.12: FLOAT_UNSIGNED_INT formats




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            176


   Format                 First         Second            Third        Fourth
                        Component      Component        Component    Component
   RGB                     red            green           blue
   RGBA                    red            green           blue           alpha
   BGRA                   blue            green            red           alpha
   DEPTH_STENCIL          depth          stencil

                    Table 3.13: Packed pixel field assignments.



    The assignment of component to fields in the packed pixel is as described in
table 3.13.
    Byte swapping, if enabled, is performed before the components are extracted
from each pixel. The above discussions of row length and image extraction are
valid for packed pixels, if “group” is substituted for “component” and the number
of components per group is understood to be one.
    A type of UNSIGNED_INT_10F_11F_11F_REV and format of RGB is a special
case in which the data are a series of GL uint values. Each uint value specifies 3
packed components as shown in table 3.11. The 1st, 2nd, and 3rd components are
called fred (11 bits), fgreen (11 bits), and fblue (10 bits) respectively.
    fred and fgreen are treated as unsigned 11-bit floating-point values and con-
verted to floating-point red and green components respectively as described in sec-
tion 2.1.3. fblue is treated as an unsigned 10-bit floating-point value and converted
to a floating-point blue component as described in section 2.1.4.
    A type of UNSIGNED_INT_5_9_9_9_REV and format of RGB is a special case
in which the data are a series of GL uint values. Each uint value specifies 4
packed components as shown in table 3.11. The 1st, 2nd, 3rd, and 4th components
are called pred , pgreen , pblue , and pexp respectively and are treated as unsigned
integers. These are then used to compute floating-point RGB components (ignoring
the ”Conversion to floating-point” section below in this case) as follows:


                               red = pred 2pexp −B−N
                            green = pgreen 2pexp −B−N
                              blue = pblue 2pexp −B−N

    where B = 15 (the exponent bias) and N = 9 (the number of mantissa bits).




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                                    177


Conversion to floating-point
This step applies only to groups of floating-point components. It is not performed
on indices or integer components. For groups containing both components and
indices, such as DEPTH_STENCIL, the indices are not converted.
    Each element in a group is converted to a floating-point value. For unsigned
integer elements, equation 2.1 is used. For signed integer elements, equation 2.2
is used unless the final destination of the transferred element is a texture or frame-
buffer component in one of the SNORM formats described in table 3.17, in which
case equation 2.3 is used instead.

Conversion to RGB
This step is applied only if the format is LUMINANCE or LUMINANCE_ALPHA. If
the format is LUMINANCE, then each group of one element is converted to a group
of R, G, and B (three) elements by copying the original single element into each of
the three new elements. If the format is LUMINANCE_ALPHA, then each group of
two elements is converted to a group of R, G, B, and A (four) elements by copying
the first original element into each of the first three new elements and copying the
second original element to the A (fourth) new element.

Final Expansion to RGBA
This step is performed only for non-depth component groups. Each group is con-
verted to a group of 4 elements as follows: if a group does not contain an A ele-
ment, then A is added and set to 1 for integer components or 1.0 for floating-point
components. If any of R, G, or B is missing from the group, each missing element
is added and assigned a value of 0 for integer components or 0.0 for floating-point
components.

Pixel Transfer Operations
This step is actually a sequence of steps. Because the pixel transfer operations
are performed equivalently during the drawing, copying, and reading of pixels,
and during the specification of texture images (either from memory or from the
framebuffer), they are described separately in section 3.7.6. After the processing
described in that section is completed, groups are processed as described in the
following sections.




                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                              178


3.7.5    Rasterization of Pixel Rectangles
Pixels are drawn using

        void DrawPixels( sizei width, sizei height, enum format,
           enum type, void *data );

    If the GL is in color index mode and format is not one of COLOR_-
INDEX, STENCIL_INDEX, DEPTH_COMPONENT, or DEPTH_STENCIL, then the er-
ror INVALID_OPERATION occurs. Results of rasterization are undefined if any
of the selected draw buffers of the draw framebuffer have an integer format and
no fragment shader is active. If format contains integer components, as shown in
table 3.6, an INVALID_OPERATION error is generated.
    Calling DrawPixels will result in an INVALID_FRAMEBUFFER_OPERATION
error if the object bound to DRAW_FRAMEBUFFER_BINDING is not framebuffer
complete (see section 4.4.4).
    Calling DrawPixels with a type of BITMAP is a special case in which the data
are a series of GL ubyte values. Each ubyte value specifies 8 1-bit elements
with its 8 least-significant bits. The 8 single-bit elements are ordered from most
significant to least significant if the value of UNPACK_LSB_FIRST is FALSE; oth-
erwise, the ordering is from least significant to most significant. The values of bits
other than the 8 least significant in each ubyte are not significant.
    The first element of the first row is the first bit (as defined above) of the ubyte
pointed to by the pointer passed to DrawPixels. The first element of the second
row is the first bit (again as defined above) of the ubyte at location p + k, where
k is computed as

                                              l
                                    k=a                                         (3.16)
                                             8a
    There is a mechanism for selecting a sub-rectangle of elements from a BITMAP
image as well. Before obtaining the first element from memory, the pointer sup-
plied to DrawPixels is effectively advanced by UNPACK_SKIP_ROWS ∗ k ubytes.
Then UNPACK_SKIP_PIXELS 1-bit elements are ignored, and the subsequent
width 1-bit elements are obtained, without advancing the ubyte pointer, after
which the pointer is advanced by k ubytes. height sets of width elements are
obtained this way.
    Once pixels are transferred, DrawPixels performs final conversion on pixel
values, then converts them to fragments as described below. Fragments generated
by DrawPixels are then processed in the same fashion as fragments generated by
rasterization of a primitive.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             179


Final Conversion
For a color index, final conversion consists of masking the bits of the index to the
left of the binary point by 2n − 1, where n is the number of bits in an index buffer.
     For integer RGBA components, no conversion is performed. For floating-
point RGBA components, if fragment color clamping is enabled, each element is
clamped to [0, 1], and may be converted to fixed-point according to equation 2.4.
If fragment color clamping is disabled, RGBA components are unmodified. Frag-
ment color clamping is controlled by calling

      void ClampColor( enum target, enum clamp );

with target set to CLAMP_FRAGMENT_COLOR. If clamp is TRUE, fragment color
clamping is enabled; if clamp is FALSE, fragment color clamping is disabled. If
clamp is FIXED_ONLY, fragment color clamping is enabled if all enabled color
buffers have fixed-point components.
     For a depth component, an element is processed according to the depth buffer’s
representation. For fixed-point depth buffers, the element is first clamped to the
range [0, 1] and then converted to fixed-point as if it were a window z value (see
section 2.15.1). Conversion is not necessary when the depth buffer uses a floating-
point representation, but clamping is.
     Stencil indices are masked by 2n − 1, where n is the number of bits in the
stencil buffer.
     The state required for fragment color clamping is a three-valued integer. The
initial value of fragment color clamping is FIXED_ONLY.

Conversion to Fragments
The conversion of a group to fragments is controlled with

      void PixelZoom( float zx , float zy );

Let (xrp , yrp ) be the current raster position (section 2.22). (If the current raster
position is invalid, then DrawPixels is ignored; pixel transfer operations do not
update the histogram or minmax tables, and no fragments are generated. However,
the histogram and minmax tables are updated even if the corresponding fragments
are later rejected by the pixel ownership (section 4.1.1) or scissor (section 4.1.2)
tests.) If a particular group (index or components) is the nth in a row and belongs to
the mth row, consider the region in window coordinates bounded by the rectangle
with corners

   (xrp + zx n, yrp + zy m)       and      (xrp + zx (n + 1), yrp + zy (m + 1))

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                              180


(either zx or zy may be negative). A fragment representing group (n, m) is pro-
duced for each framebuffer pixel inside, or on the bottom or left boundary, of this
rectangle
    A fragment arising from a group consisting of color data takes on the color
index or color components of the group and the current raster position’s associated
depth value, while a fragment arising from a depth component takes that compo-
nent’s depth value and the current raster position’s associated color index or color
components. In both cases, the fog coordinate is taken from the current raster posi-
tion’s associated raster distance, the secondary color is taken from the current raster
position’s associated secondary color, and texture coordinates are taken from the
current raster position’s associated texture coordinates. Groups arising from Draw-
Pixels with a format of DEPTH_STENCIL or STENCIL_INDEX are treated specially
and are described in section 4.3.1.

3.7.6   Pixel Transfer Operations
The GL defines six kinds of pixel groups:

   1. Floating-point RGBA component: Each group comprises four color compo-
      nents in floating-point format: red, green, blue, and alpha.

   2. Integer RGBA component: Each group comprises four color components in
      integer format: red, green, blue, and alpha.

   3. Depth component: Each group comprises a single depth component.

   4. Color index: Each group comprises a single color index.

   5. Stencil index: Each group comprises a single stencil index.

   6. Depth/stencil: Each group comprises a single depth component and a single
      stencil index.

    Each operation described in this section is applied sequentially to each pixel
group in an image. Many operations are applied only to pixel groups of certain
kinds; if an operation is not applicable to a given group, it is skipped. None of the
operations defined in this section affect integer RGBA component pixel groups.
    This step applies only to RGBA component and depth component groups, and
to the depth components in depth/stencil groups. Each component is multiplied
by an appropriate signed scale factor: RED_SCALE for an R component, GREEN_-
SCALE for a G component, BLUE_SCALE for a B component, and ALPHA_SCALE
for an A component, or DEPTH_SCALE for a depth component. Then the result

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                              181


is added to the appropriate signed bias: RED_BIAS, GREEN_BIAS, BLUE_BIAS,
ALPHA_BIAS, or DEPTH_BIAS.

Arithmetic on Indices
This step applies only to color index and stencil index groups, and to the stencil
indices in depth/stencil groups. If the index is a floating-point value, it is converted
to fixed-point, with an unspecified number of bits to the right of the binary point
and at least log2 (MAX_PIXEL_MAP_TABLE) bits to the left of the binary point.
Indices that are already integers remain so; any fraction bits in the resulting fixed-
point value are zero.
     The fixed-point index is then shifted by |INDEX_SHIFT| bits, left if
INDEX_SHIFT > 0 and right otherwise. In either case the shift is zero-filled.
Then, the signed integer offset INDEX_OFFSET is added to the index.

RGBA to RGBA Lookup
This step applies only to RGBA component groups, and is skipped if MAP_COLOR
is FALSE. First, each component is clamped to the range [0, 1]. There is a ta-
ble associated with each of the R, G, B, and A component elements: PIXEL_-
MAP_R_TO_R for R, PIXEL_MAP_G_TO_G for G, PIXEL_MAP_B_TO_B for B, and
PIXEL_MAP_A_TO_A for A. Each element is multiplied by an integer one less than
the size of the corresponding table, and, for each element, an address is found by
rounding this value to the nearest integer. For each element, the addressed value in
the corresponding table replaces the element.

Color Index Lookup
This step applies only to color index groups. If the GL command that invokes the
pixel transfer operation requires that RGBA component pixel groups be generated,
then a conversion is performed at this step. RGBA component pixel groups are
required if
   1. The groups will be rasterized, and the GL is in RGBA mode, or
   2. The groups will be loaded as an image into texture memory, or
   3. The groups will be returned to client memory with a format other than
      COLOR_INDEX.
If RGBA component groups are required, then the integer part of the index is used
to reference 4 tables of color components: PIXEL_MAP_I_TO_R, PIXEL_MAP_-
I_TO_G, PIXEL_MAP_I_TO_B, and PIXEL_MAP_I_TO_A. Each of these tables


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             182


must have 2n entries for some integer value of n (n may be different for each
table). For each table, the index is first rounded to the nearest integer; the result
is ANDed with 2n − 1, and the resulting value used as an address into the table.
The indexed value becomes an R, G, B, or A value, as appropriate. The group of
four elements so obtained replaces the index, changing the group’s type to RGBA
component.
    If RGBA component groups are not required, and if MAP_COLOR is enabled,
then the index is looked up in the PIXEL_MAP_I_TO_I table (otherwise, the index
is not looked up). Again, the table must have 2n entries for some integer n. The
index is first rounded to the nearest integer; the result is ANDed with 2n − 1, and
the resulting value used as an address into the table. The value in the table replaces
the index. The floating-point table value is first rounded to a fixed-point value with
unspecified precision. The group’s type remains color index.

Stencil Index Lookup
This step applies only to stencil index groups, and to the stencil indices in
depth/stencil groups. If MAP_STENCIL is enabled, then the index is looked up
in the PIXEL_MAP_S_TO_S table (otherwise, the index is not looked up). The ta-
ble must have 2n entries for some integer n. The integer index is ANDed with
2n − 1, and the resulting value used as an address into the table. The integer value
in the table replaces the index.

Color Table Lookup
This step applies only to RGBA component groups. Color table lookup is only
done if COLOR_TABLE is enabled. If a zero-width table is enabled, no lookup is
performed.
    The internal format of the table determines which components of the group
will be replaced (see table 3.14). The components to be replaced are converted
to indices by clamping to [0, 1], multiplying by an integer one less than the width
of the table, and rounding to the nearest integer. Components are replaced by the
table entry at the index.
    The required state is one bit indicating whether color table lookup is enabled
or disabled. In the initial state, lookup is disabled.

Convolution
This step applies only to RGBA component groups. If CONVOLUTION_1D
is enabled, the one-dimensional convolution filter is applied only to the one-


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             183


                    Base Internal Format     R     G     B    A
                    ALPHA                                     At
                    LUMINANCE                Lt    Lt    Lt
                    LUMINANCE_ALPHA          Lt    Lt    Lt   At
                    INTENSITY                It    It    It   It
                    RGB                      Rt    Gt    Bt
                    RGBA                     Rt    Gt    Bt   At

Table 3.14: Color table lookup. Rt , Gt , Bt , At , Lt , and It are color table values
that are assigned to pixel components R, G, B, and A depending on the table
format. When there is no assignment, the component value is left unchanged by
lookup.



dimensional texture images passed to TexImage1D, TexSubImage1D, Copy-
TexImage1D, and CopyTexSubImage1D. If CONVOLUTION_2D is enabled, the
two-dimensional convolution filter is applied only to the two-dimensional im-
ages passed to DrawPixels, CopyPixels, ReadPixels, TexImage2D, TexSubIm-
age2D, CopyTexImage2D, CopyTexSubImage2D, and CopyTexSubImage3D.
If SEPARABLE_2D is enabled, and CONVOLUTION_2D is disabled, the separable
two-dimensional convolution filter is instead applied these images.
     The convolution operation is a sum of products of source image pixels and
convolution filter pixels. Source image pixels always have four components: red,
green, blue, and alpha, denoted in the equations below as Rs , Gs , Bs , and As .
Filter pixels may be stored in one of five formats, with 1, 2, 3, or 4 components.
These components are denoted as Rf , Gf , Bf , Af , Lf , and If in the equations
below. The result of the convolution operation is the 4-tuple R,G,B,A. Depending
on the internal format of the filter, individual color components of each source
image pixel are convolved with one filter component, or are passed unmodified.
The rules for this are defined in table 3.15.
     The convolution operation is defined differently for each of the three convolu-
tion filters. The variables Wf and Hf refer to the dimensions of the convolution
filter. The variables Ws and Hs refer to the dimensions of the source pixel image.
     The convolution equations are defined as follows, where C refers to the filtered
result, Cf refers to the one- or two-dimensional convolution filter, and Crow and
Ccolumn refer to the two one-dimensional filters comprising the two-dimensional
separable filter. Cs depends on the source image color Cs and the convolution bor-
der mode as described below. Cr , the filtered output image, depends on all of these
variables and is described separately for each border mode. The pixel indexing


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             184


        Base Filter Format          R             G          B         A
        ALPHA                       Rs            Gs         Bs        As ∗ Af
        LUMINANCE                   Rs ∗ Lf       Gs ∗ Lf    Bs ∗ Lf   As
        LUMINANCE_ALPHA             Rs ∗ Lf       Gs ∗ Lf    Bs ∗ Lf   As ∗ Af
        INTENSITY                   Rs ∗ If       Gs ∗ I f   Bs ∗ If   As ∗ If
        RGB                         Rs ∗ Rf       Gs ∗ G f   Bs ∗ Bf   As
        RGBA                        Rs ∗ Rf       Gs ∗ G f   Bs ∗ Bf   As ∗ Af

Table 3.15: Computation of filtered color components depending on filter image
format. C ∗ F indicates the convolution of image component C with filter F .



nomenclature is decribed in the Convolution Filter Specification subsection of
section 3.7.3.
    One-dimensional filter:
                                      Wf −1
                           C[i ] =            Cs [i + n] ∗ Cf [n]
                                       n=0
    Two-dimensional filter:
                             Wf −1 Hf −1
               C[i , j ] =                 Cs [i + n, j + m] ∗ Cf [n, m]
                             n=0 m=0
    Two-dimensional separable filter:

                      Wf −1 Hf −1
        C[i , j ] =                 Cs [i + n, j + m] ∗ Crow [n] ∗ Ccolumn [m]
                      n=0 m=0

     If Wf of a one-dimensional filter is zero, then C[i] is always set to zero. Like-
wise, if either Wf or Hf of a two-dimensional filter is zero, then C[i, j] is always
set to zero.
     The convolution border mode for a specific convolution filter is specified by
calling

      void ConvolutionParameter{if}( enum target, enum pname,
         T param );

where target is the name of the filter, pname is CONVOLUTION_BORDER_MODE, and
param is one of REDUCE, CONSTANT_BORDER or REPLICATE_BORDER.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                           185


Border Mode REDUCE
The width and height of source images convolved with border mode REDUCE are
reduced by Wf − 1 and Hf − 1, respectively. If this reduction would generate
a resulting image with zero or negative width and/or height, the output is simply
null, with no error generated. The coordinates of the image that results from a con-
volution with border mode REDUCE are zero through Ws − Wf in width, and zero
through Hs − Hf in height. In cases where errors can result from the specification
of invalid image dimensions, it is these resulting dimensions that are tested, not
the dimensions of the source image. (A specific example is TexImage1D and Tex-
Image2D, which specify constraints for image dimensions. Even if TexImage1D
or TexImage2D is called with a null pixel pointer, the dimensions of the result-
ing texture image are those that would result from the convolution of the specified
image).
    When the border mode is REDUCE, Cs equals the source image color Cs and
Cr equals the filtered result C.
    For the remaining border modes, define Cw = Wf /2 and Ch = Hf /2 .
The coordinates (Cw , Ch ) define the center of the convolution filter.

Border Mode CONSTANT_BORDER
If the convolution border mode is CONSTANT_BORDER, the output image has the
same dimensions as the source image. The result of the convolution is the same as
if the source image were surrounded by pixels with the same color as the current
convolution border color. Whenever the convolution filter extends beyond one of
the edges of the source image, the constant-color border pixels are used as input
to the filter. The current convolution border color is set by calling Convolution-
Parameterfv or ConvolutionParameteriv with pname set to CONVOLUTION_-
BORDER_COLOR and params containing four values that comprise the RGBA color
to be used as the image border. Integer color components are interpreted linearly
such that the largest positive integer maps to 1.0, and the smallest negative inte-
ger maps to -1.0. Floating point color components are not clamped when they are
specified.
     For a one-dimensional filter, the result color is defined by

                                Cr [i] = C[i − Cw ]
where C[i ] is computed using the following equation for Cs [i ]:

                                    Cs [i ], 0 ≤ i < Ws
                        Cs [i ] =
                                    Cc ,     otherwise


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                           186


and Cc is the convolution border color.
    For a two-dimensional or two-dimensional separable filter, the result color is
defined by

                              Cr [i, j] = C[i − Cw , j − Ch ]
where C[i , j ] is computed using the following equation for Cs [i , j ]:

                                Cs [i , j ], 0 ≤ i < Ws , 0 ≤ j < Hs
              Cs [i , j ] =
                                Cc ,         otherwise

Border Mode REPLICATE_BORDER
The convolution border mode REPLICATE_BORDER also produces an output im-
age with the same dimensions as the source image. The behavior of this mode is
identical to that of the CONSTANT_BORDER mode except for the treatment of pixel
locations where the convolution filter extends beyond the edge of the source im-
age. For these locations, it is as if the outermost one-pixel border of the source
image was replicated. Conceptually, each pixel in the leftmost one-pixel column
of the source image is replicated Cw times to provide additional image data along
the left edge, each pixel in the rightmost one-pixel column is replicated Cw times
to provide additional image data along the right edge, and each pixel value in the
top and bottom one-pixel rows is replicated to create Ch rows of image data along
the top and bottom edges. The pixel value at each corner is also replicated in order
to provide data for the convolution operation at each corner of the source image.
    For a one-dimensional filter, the result color is defined by

                                   Cr [i] = C[i − Cw ]
where C[i ] is computed using the following equation for Cs [i ]:

                               Cs [i ] = Cs [clamp(i , Ws )]
and the clamping function clamp(val, max) is defined as
                                 
                                  0,           val < 0
             clamp(val, max) =      val,        0 ≤ val < max
                                    max − 1, val ≥ max
                                 

    For a two-dimensional or two-dimensional separable filter, the result color is
defined by

                              Cr [i, j] = C[i − Cw , j − Ch ]

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             187


where C[i , j ] is computed using the following equation for Cs [i , j ]:

                  Cs [i , j ] = Cs [clamp(i , Ws ), clamp(j , Hs )]
     If a convolution operation is performed, each component of the resulting image
is scaled by the corresponding PixelTransfer parameters: POST_CONVOLUTION_-
RED_SCALE for an R component, POST_CONVOLUTION_GREEN_SCALE for a G
component, POST_CONVOLUTION_BLUE_SCALE for a B component, and POST_-
CONVOLUTION_ALPHA_SCALE for an A component. The result is added to the
corresponding bias: POST_CONVOLUTION_RED_BIAS, POST_CONVOLUTION_-
GREEN_BIAS, POST_CONVOLUTION_BLUE_BIAS, or POST_CONVOLUTION_-
ALPHA_BIAS.
     The required state is three bits indicating whether each of one-dimensional,
two-dimensional, or separable two-dimensional convolution is enabled or disabled,
an integer describing the current convolution border mode, and four floating-point
values specifying the convolution border color. In the initial state, all convolu-
tion operations are disabled, the border mode is REDUCE, and the border color is
(0, 0, 0, 0).

Post Convolution Color Table Lookup
This step applies only to RGBA component groups. Post convolution color table
lookup is enabled or disabled by calling Enable or Disable with the symbolic con-
stant POST_CONVOLUTION_COLOR_TABLE. The post convolution table is defined
by calling ColorTable with a target argument of POST_CONVOLUTION_COLOR_-
TABLE. In all other respects, operation is identical to color table lookup, as defined
earlier in section 3.7.6.
    The required state is one bit indicating whether post convolution table lookup
is enabled or disabled. In the initial state, lookup is disabled.

Color Matrix Transformation
This step applies only to RGBA component groups. The components are
transformed by the color matrix. Each transformed component is multi-
plied by an appropriate signed scale factor: POST_COLOR_MATRIX_RED_SCALE
for an R component, POST_COLOR_MATRIX_GREEN_SCALE for a G compo-
nent, POST_COLOR_MATRIX_BLUE_SCALE for a B component, and POST_-
COLOR_MATRIX_ALPHA_SCALE for an A component. The result is added
to a signed bias: POST_COLOR_MATRIX_RED_BIAS, POST_COLOR_MATRIX_-
GREEN_BIAS, POST_COLOR_MATRIX_BLUE_BIAS, or POST_COLOR_MATRIX_-



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                             188


ALPHA_BIAS. The resulting components replace each component of the original
group.
    That is, if Mc is the color matrix, a subscript of s represents the scale term for
a component, and a subscript of b represents the bias term, then the components
                                         
                                          R
                                        G
                                         
                                        B 
                                           A
are transformed to
                                 
               R    Rs 0  0 0      R     Rb
              G   0 Gs 0 0    G Gb 
              =             M   +  .
             B   0  0 Bs 0  c B   Bb 
               A     0 0  0 As     A     Ab

Post Color Matrix Color Table Lookup
This step applies only to RGBA component groups. Post color matrix color ta-
ble lookup is enabled or disabled by calling Enable or Disable with the symbolic
constant POST_COLOR_MATRIX_COLOR_TABLE. The post color matrix table is de-
fined by calling ColorTable with a target argument of POST_COLOR_MATRIX_-
COLOR_TABLE. In all other respects, operation is identical to color table lookup, as
defined in section 3.7.6.
    The required state is one bit indicating whether post color matrix lookup is
enabled or disabled. In the initial state, lookup is disabled.

Histogram
This step applies only to RGBA component groups. Histogram operation is
enabled or disabled by calling Enable or Disable with the symbolic constant
HISTOGRAM.
    If the width of the table is non-zero, then indices Ri , Gi , Bi , and Ai are de-
rived from the red, green, blue, and alpha components of each pixel group (without
modifying these components) by clamping each component to [0, 1], multiplying
by one less than the width of the histogram table, and rounding to the nearest in-
teger. If the format of the HISTOGRAM table includes red or luminance, the red or
luminance component of histogram entry Ri is incremented by one. If the format
of the HISTOGRAM table includes green, the green component of histogram entry
Gi is incremented by one. The blue and alpha components of histogram entries


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.7. PIXEL RECTANGLES                                                            189


Bi and Ai are incremented in the same way. If a histogram entry component is
incremented beyond its maximum value, its value becomes undefined; this is not
an error.
    If the Histogram sink parameter is FALSE, histogram operation has no effect
on the stream of pixel groups being processed. Otherwise, all RGBA pixel groups
are discarded immediately after the histogram operation is completed. Because
histogram precedes minmax, no minmax operation is performed. No pixel frag-
ments are generated, no change is made to texture memory contents, and no pixel
values are returned. However, texture object state is modified whether or not pixel
groups are discarded.

Minmax
This step applies only to RGBA component groups. Minmax operation is enabled
or disabled by calling Enable or Disable with the symbolic constant MINMAX.
     If the format of the minmax table includes red or luminance, the red compo-
nent value replaces the red or luminance value in the minimum table element if
and only if it is less than that component. Likewise, if the format includes red or
luminance and the red component of the group is greater than the red or luminance
value in the maximum element, the red group component replaces the red or lumi-
nance maximum component. If the format of the table includes green, the green
group component conditionally replaces the green minimum and/or maximum if
it is smaller or larger, respectively. The blue and alpha group components are
similarly tested and replaced, if the table format includes blue and/or alpha. The
internal type of the minimum and maximum component values is floating point,
with at least the same representable range as a floating point number used to rep-
resent colors (section 2.1.1). There are no semantics defined for the treatment of
group component values that are outside the representable range.
     If the Minmax sink parameter is FALSE, minmax operation has no effect on
the stream of pixel groups being processed. Otherwise, all RGBA pixel groups are
discarded immediately after the minmax operation is completed. No pixel frag-
ments are generated, no change is made to texture memory contents, and no pixel
values are returned. However, texture object state is modified whether or not pixel
groups are discarded.

3.7.7   Pixel Rectangle Multisample Rasterization
If MULTISAMPLE is enabled, and the value of SAMPLE_BUFFERS is one, then pixel
rectangles are rasterized using the following algorithm. Let (Xrp , Yrp ) be the cur-
rent raster position. (If the current raster position is invalid, then DrawPixels is


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.8. BITMAPS                                                                     190


ignored.) If a particular group (index or components) is the nth in a row and be-
longs to the mth row, consider the region in window coordinates bounded by the
rectangle with corners

                          (Xrp + Zx ∗ n, Yrp + Zy ∗ m)
and
                    (Xrp + Zx ∗ (n + 1), Yrp + Zy ∗ (m + 1))
where Zx and Zy are the pixel zoom factors specified by PixelZoom, and may each
be either positive or negative. A fragment representing group (n, m) is produced
for each framebuffer pixel with one or more sample points that lie inside, or on
the bottom or left boundary, of this rectangle. Each fragment so produced takes its
associated data from the group and from the current raster position, in a manner
consistent with the discussion in the Conversion to Fragments subsection of sec-
tion 3.7.5. All depth and color sample values are assigned the same value, taken
either from their group (for depth and color component groups) or from the cur-
rent raster position (if they are not). All sample values are assigned the same fog
coordinate and the same set of texture coordinates, taken from the current raster
position.
    A single pixel rectangle will generate multiple, perhaps very many fragments
for the same framebuffer pixel, depending on the pixel zoom factors.


3.8    Bitmaps
Bitmaps are rectangles of zeros and ones specifying a particular pattern of frag-
ments to be produced. Each of these fragments has the same associated data. These
data are those associated with the current raster position.
    Bitmaps are sent using

      void Bitmap( sizei w, sizei h, float xbo , float ybo ,
         float xbi , float ybi , ubyte *data );

w and h comprise the integer width and height of the rectangular bitmap, respec-
tively. (xbo , ybo ) gives the floating-point x and y values of the bitmap’s origin.
(xbi , ybi ) gives the floating-point x and y increments that are added to the raster
position after the bitmap is rasterized. data is a pointer to a bitmap.
    Like a polygon pattern, a bitmap is unpacked from memory according to the
procedure given in section 3.7.5 for DrawPixels; it is as if the width and height
passed to that command were equal to w and h, respectively, the type were BITMAP,
and the format were COLOR_INDEX. The unpacked values (before any conversion

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.8. BITMAPS                                                                                                                              191


                                                                                                )        )        )
                                                  2     2   3   2   3   1   3   1   0   1   0        0




                                                                                                )        )        )
                                                  2     2   3   2   3   1   3   1   0   1   0        0




                                         4    4   5 4   5   (   5   (   '   (   '   &   '   &   )%   &   )%   $   )%   $   # $    #   #
                                                  2     2   3   2   3   1   3   1   0   1   0        0




                                         4    4   5 4   5   (   5   (   '   (   '   &   '   &   %    &   %    $   %    $   # $    #   #




                                         6    6   7 6   7       7                                             !        !   " !    "   "
                                         4    4   5 4   5   (   5   (   '   (   '   &   '   &   %    &   %    $   %    $   # $    #   #




                                         6    6   7 6   7       7                                             !        !   " !    "   "




                                         8    8   9 8   9       9                                                           
                                         6    6   7 6   7       7                                             !        !   " !    "   "




                                         8    8   9 8   9       9                                                           




                                                                                                                              
                                         8    8   9 8   9       9                                                           




                                                                                                                              




                                                                                                                   
                                                                                                                              




                                                                                                                   




                         h = 12                             ¨       ¨   ©
                                                                        
                                                                            ¨   ©
                                                                                
                                                                                    
                                                                                    
                                                                                        ©
                                                                                        
                                                                                            
                                                                                            
                                                                                                
                                                                                                
                                                                                                     
                                                                                                     
                                                                                                         
                                                                                                             
                                                                                                                  
                                                                                                                            




                                                            ¨       ¨   ©   ¨   ©      ©                     




                                                            ¦       ¦   §   ¦   §       §
                                                            ¨       ¨   ©   ¨   ©      ©                     




                                                            ¦       ¦   §   ¦   §       §




                                                            ¤       ¤   ¥   ¤   ¥       ¥
                                                            ¦       ¦   §   ¦   §       §




                                                            ¤       ¤   ¥   ¤   ¥       ¥




                                                            ¤       ¤   ¥   ¤   ¥       ¥




                                                            ¢       ¢   £   ¢   £       £




                                  ybo = 1.0
                                                            ¢       ¢   £   ¢   £       £




                                                                        ¡       ¡       ¡
                                                            ¢       ¢   £   ¢   £       £




                                                                        ¡       ¡       ¡




                                                                        ¡       ¡       ¡




                                             xbo = 2.5

                                                                                            w=8




   Figure 3.9. A bitmap and its associated parameters. xbi and ybi are not shown.




or arithmetic would have been performed) form a stipple pattern of zeros and ones.
See figure 3.9.
    A bitmap sent using Bitmap is rasterized as follows. First, if the current raster
position is invalid (the valid bit is reset), the bitmap is ignored. Otherwise, a rect-
angular array of fragments is constructed, with lower left corner at

                       (xll , yll ) = ( xrp − xbo , yrp − ybo )

and upper right corner at (xll +w, yll +h) where w and h are the width and height of
the bitmap, respectively. Fragments in the array are produced if the corresponding
bit in the bitmap is 1 and not produced otherwise. The associated data for each
fragment are those associated with the current raster position. Once the fragments
have been produced, the current raster position is updated:

                        (xrp , yrp ) ← (xrp + xbi , yrp + ybi ).

The z and w values of the current raster position remain unchanged.
     Calling Bitmap will result in an INVALID_FRAMEBUFFER_OPERATION error
if the object bound to DRAW_FRAMEBUFFER_BINDING is not framebuffer complete
(see section 4.4.4).

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     192


Bitmap Multisample Rasterization
If MULTISAMPLE is enabled, and the value of SAMPLE_BUFFERS is one, then
bitmaps are rasterized using the following algorithm. If the current raster position
is invalid, the bitmap is ignored. Otherwise, a screen-aligned array of pixel-size
rectangles is constructed, with its lower left corner at (Xrp , Yrp ), and its upper
right corner at (Xrp + w, Yrp + h), where w and h are the width and height of
the bitmap. Rectangles in this array are eliminated if the corresponding bit in the
bitmap is 0, and are retained otherwise. Bitmap rasterization produces a fragment
for each framebuffer pixel with one or more sample points either inside or on the
bottom or left edge of a retained rectangle.
     Coverage bits that correspond to sample points either inside or on the bottom
or left edge of a retained rectangle are 1, other coverage bits are 0. The associated
data for each sample are those associated with the current raster position. Once the
fragments have been produced, the current raster position is updated exactly as it
is in the single-sample rasterization case.


3.9    Texturing
Texturing maps a portion of one or more specified images onto each primitive
for which texturing is enabled. This mapping is accomplished in shaders by
sampling the color of an image at the location indicated by specified (s, t, r) texture
coordinates. It is accomplished in fixed-function processing by using the color of
an image at the location indicated by a texture coordinate set’s (s, t, r, q) values.
Texture lookups are typically used to modify a fragment’s RGBA color but may be
used for any purpose in a shader.
    The internal data type of a texture may be signed or unsigned normalized
fixed-point, signed or unsigned integer, or floating-point, depending on the inter-
nal format of the texture. The correspondence between the internal format and the
internal data type is given in tables 3.17-3.19. Fixed-point and floating-point tex-
tures return a floating-point value and integer textures return signed or unsigned
integer values. When a fragment shader is active, the shader is responsible for in-
terpreting the result of a texture lookup as the correct data type, otherwise the result
is undefined. When not using a fragment shader, floating-point texture values are
assumed, and the results of using either signed normalized fixed-point or integer
textures in this case are undefined.
    Eight types of texture are supported; each is a collection of images built from
one-, two-, or three-dimensional array of image elements referred to as texels.
One-, two-, and three-dimensional textures consist respectively of one-, two-, or
three-dimensional texel arrays. One- and two-dimensional array textures are arrays

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     193


of one- or two-dimensional images, consisting of one or more layers. Cube maps
are special two-dimensional array textures with six layers that represent the faces
of a cube. When accessing a cube map, the texture coordinates are projected onto
one of the six faces of the cube. Rectangular textures are special two-dimensional
textures consisting of only a single image and accessed using unnormalized coor-
dinates. Buffer textures are special one-dimensional textures whose texel arrays
are stored in separate buffer objects.
     Implementations must support texturing using multiple images. Each fragment
or vertex carries multiple sets of texture coordinates (s, t, r, q) which are used to
index separate images to produce color values which are collectively used to mod-
ify the resulting transformed vertex or fragment color. Texturing is specified only
for RGBA mode; its use in color index mode is undefined. The following sub-
sections (up to and including section 3.9.8) specify the GL operation with a single
texture. Section 3.9.18 specifies the details of how multiple texture units interact.
     The GL provides two ways to specify the details of how texturing of a primi-
tive is effected. The first is referred to as fixed-function fragment shading, or simply
fixed-function, and is described in this section. The second is referred to as a frag-
ment shader, and is described in section 3.12. The specification of the image to be
texture mapped and the means by which the image is filtered when applied to the
primitive are common to both methods and are discussed in this section. The fixed-
function method for determining what RGBA value is produced is also described in
this section. If a fragment shader is active, the method for determining the RGBA
value is specified by an application-supplied fragment shader as described in the
OpenGL Shading Language Specification.
     When no fragment shader is active, the coordinates used for texturing are
(s/q, t/q, r/q), derived from the original texture coordinates (s, t, r, q). If the q
texture coordinate is less than or equal to zero, the coordinates used for texturing
are undefined. When a fragment shader is active, the (s, t, r, q) coordinates are
available to the fragment shader. The coordinates used for texturing in a fragment
shader are defined by the OpenGL Shading Language Specification.
     The command

      void ActiveTexture( enum texture );

specifies the active texture unit selector, ACTIVE_TEXTURE. Each texture unit con-
tains up to two distinct sub-units: a texture coordinate processing unit consisting of
a texture matrix stack and texture coordinate generation state and a texture image
unit consisting of all the texture state defined in section 3.9. In implementations
with a different number of supported texture coordinate sets and texture image
units, some texture units may consist of only one of the two sub-units.


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     194


     The active texture unit selector selects the texture image unit accessed by com-
mands involving texture image processing (section 3.9). Such commands include
all variants of TexEnv (except for those controlling point sprite coordinate replace-
ment), TexParameter, TexImage, BindTexture, Enable/Disable for any texture
target (e.g., TEXTURE_2D), and queries of all such state. If the texture image unit
number corresponding to the current value of ACTIVE_TEXTURE is greater than
or equal to the implementation-dependent constant MAX_COMBINED_TEXTURE_-
IMAGE_UNITS, the error INVALID_OPERATION is generated by any such com-
mand.
     The active texture unit selector also specifies the texture coordinate set accessed
by commands involving texture coordinate processing (see section 2.12.1).
     ActiveTexture generates the error INVALID_ENUM if an invalid texture is spec-
ified. texture is a symbolic constant of the form TEXTUREi, indicating that texture
unit i is to be modified. The constants obey TEXTUREi = TEXTURE0 + i (i is in
the range 0 to k − 1, where k is the larger of the values of MAX_TEXTURE_COORDS
and MAX_COMBINED_TEXTURE_IMAGE_UNITS).
     For backwards compatibility, the implementation-dependent constant MAX_-
TEXTURE_UNITS specifies the number of conventional texture units supported by
the implementation. Its value must be no larger than the minimum of MAX_-
TEXTURE_COORDS and MAX_COMBINED_TEXTURE_IMAGE_UNITS.
     The state required for the active texture image unit selector is a single integer.
The initial value is TEXTURE0.

3.9.1    Texture Image Specification
The command

        void TexImage3D( enum target, int level, int internalformat,
          sizei width, sizei height, sizei depth, int border,
          enum format, enum type, void *data );

is used to specify a three-dimensional texture image. target must be one of
TEXTURE_3D for a three-dimensional texture or TEXTURE_2D_ARRAY for an two-
dimensional array texture. Additionally, target may be either PROXY_TEXTURE_-
3D for a three-dimensional proxy texture, or PROXY_TEXTURE_2D_ARRAY for a
two-dimensional proxy array texture, as discussed in section 3.9.12. format, type,
and data specify the format of the image data, the type of those data, and a refer-
ence to the image data in the currently bound pixel unpack buffer or client memory,
as described in section 3.7.4. The format STENCIL_INDEX is not allowed.



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   195


     The groups in memory are treated as being arranged in a sequence of adjacent
rectangles. Each rectangle is a two-dimensional image, whose size and organiza-
tion are specified by the width and height parameters to TexImage3D. The val-
ues of UNPACK_ROW_LENGTH and UNPACK_ALIGNMENT control the row-to-row
spacing in these images as described in section 3.7.4. If the value of the integer
parameter UNPACK_IMAGE_HEIGHT is not positive, then the number of rows in
each two-dimensional image is height; otherwise the number of rows is UNPACK_-
IMAGE_HEIGHT. Each two-dimensional image comprises an integral number of
rows, and is exactly adjacent to its neighbor images.
     The mechanism for selecting a sub-volume of a three-dimensional image relies
on the integer parameter UNPACK_SKIP_IMAGES. If UNPACK_SKIP_IMAGES is
positive, the pointer is advanced by UNPACK_SKIP_IMAGES times the number of
elements in one two-dimensional image before obtaining the first group from mem-
ory. Then depth two-dimensional images are processed, each having a subimage
extracted as described in section 3.7.4.
     The selected groups are transferred to the GL as described in section 3.7.4
and then clamped to the representable range of the internal format. If the inter-
nalformat of the texture is signed or unsigned integer, components are clamped
to [−2n−1 , 2n−1 − 1] or [0, 2n − 1], respectively, where n is the number of bits
per component. For color component groups, if the internalformat of the texture
is signed or unsigned normalized fixed-point, components are clamped to [−1, 1]
or [0, 1], respectively. For depth component groups, the depth value is clamped
to [0, 1]. Otherwise, values are not modified. Stencil index values are masked by
2n − 1, where n is the number of stencil bits in the internal format resolution (see
below). If the base internal format is DEPTH_STENCIL and format is not DEPTH_-
STENCIL, then the values of the stencil index texture components are undefined.
     Components are then selected from the resulting R, G, B, A, depth, or stencil
values to obtain a texture with the base internal format specified by (or derived
from) internalformat. Table 3.16 summarizes the mapping of R, G, B, A, depth,
or stencil values to texture components, as a function of the base internal format
of the texture image. internalformat may be specified as one of the internal format
symbolic constants listed in table 3.16, as one of the sized internal format symbolic
constants listed in tables 3.17- 3.19, as one of the generic compressed internal for-
mat symbolic constants listed in table 3.20, or as one of the specific compressed
internal format symbolic constants (if listed in table 3.20). internalformat may
(for backwards compatibility with the 1.0 version of the GL) also take on the inte-
ger values 1, 2, 3, and 4, which are equivalent to symbolic constants LUMINANCE,
LUMINANCE_ALPHA, RGB, and RGBA respectively. Specifying a value for inter-
nalformat that is not one of the above values generates the error INVALID_VALUE.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    196


 Base Internal Format     RGBA, Depth, and Stencil Values        Internal Components
 ALPHA                    A                                      A
 DEPTH_COMPONENT          Depth                                  D
 DEPTH_STENCIL            Depth,Stencil                          D,S
 LUMINANCE                R                                      L
 LUMINANCE_ALPHA          R,A                                    L,A
 INTENSITY                R                                      I
 RED                      R                                      R
 RG                       R,G                                    R,G
 RGB                      R,G,B                                  R,G,B
 RGBA                     R,G,B,A                                R,G,B,A

Table 3.16: Conversion from RGBA, depth, and stencil pixel components to inter-
nal texture, table, or filter components. See section 3.9.14 for a description of the
texture components R, G, B, A, L, I, D, and S.



    Textures with a base internal format of DEPTH_COMPONENT or DEPTH_-
STENCIL are supported by texture image specification commands only if
target is TEXTURE_1D, TEXTURE_2D, TEXTURE_1D_ARRAY, TEXTURE_2D_-
ARRAY,     TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP, PROXY_TEXTURE_-
1D, PROXY_TEXTURE_2D, PROXY_TEXTURE_1D_ARRAY, PROXY_TEXTURE_-
2D_ARRAY, PROXY_TEXTURE_RECTANGLE, or PROXY_TEXTURE_CUBE_MAP.
Using these formats in conjunction with any other target will result in an
INVALID_OPERATION error.
    Textures with a base internal format of DEPTH_COMPONENT or DEPTH_-
STENCIL require either depth component data or depth/stencil component data.
Textures with other base internal formats require RGBA component data. The error
INVALID_OPERATION is generated if one of the base internal format and format is
DEPTH_COMPONENT or DEPTH_STENCIL, and the other is neither of these values.
    Textures with integer internal formats (see tables 3.17- 3.18) require integer
data. The error INVALID_OPERATION is generated if the internal format is inte-
ger and format is not one of the integer formats listed in table 3.6; if the internal
format is not integer and format is an integer format; or if format is an integer for-
mat and type is FLOAT, HALF_FLOAT, UNSIGNED_INT_10F_11F_11F_REV, or
UNSIGNED_INT_5_9_9_9_REV.
    In addition to the specific compressed internal formats listed in table 3.20, the
GL provides a mechanism to obtain token values for all such formats provided
by extensions. The number of specific compressed internal formats supported


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    197


by the renderer can be obtained by querying the value of NUM_COMPRESSED_-
TEXTURE_FORMATS. The set of specific compressed internal formats supported by
the renderer can be obtained by querying the value of COMPRESSED_TEXTURE_-
FORMATS. The only values returned by this query are those corresponding to for-
mats suitable for general-purpose usage. The renderer will not enumerate formats
with restrictions that need to be specifically understood prior to use.
    Generic compressed internal formats are never used directly as the internal for-
mats of texture images. If internalformat is one of the six generic compressed
internal formats, its value is replaced by the symbolic constant for a specific com-
pressed internal format of the GL’s choosing with the same base internal format.
If no specific compressed format is available, internalformat is instead replaced by
the corresponding base internal format. If internalformat is given as or mapped
to a specific compressed internal format, but the GL can not support images com-
pressed in the chosen internal format for any reason (e.g., the compression format
might not support 3D textures or borders), internalformat is replaced by the cor-
responding base internal format and the texture image will not be compressed by
the GL.
    The internal component resolution is the number of bits allocated to each value
in a texture image. If internalformat is specified as a base internal format, the GL
stores the resulting texture with internal component resolutions of its own choos-
ing. If a sized internal format is specified, the mapping of the R, G, B, A, depth,
and stencil values to texture components is equivalent to the mapping of the cor-
responding base internal format’s components, as specified in table 3.16; the type
(unsigned int, float, etc.) is assigned the same type specified by internalformat;
and the memory allocation per texture component is assigned by the GL to match
the allocations listed in tables 3.17- 3.19 as closely as possible. (The definition of
closely is left up to the implementation. However, a non-zero number of bits must
be allocated for each component whose desired allocation in tables 3.17- 3.19 is
non-zero, and zero bits must be allocated for all other components).

Required Texture Formats
Implementations are required to support at least one allocation of internal com-
ponent resolution for each type (unsigned int, float, etc.) for each base internal
format.
   In addition, implementations are required to support the following sized and
compressed internal formats. Requesting one of these sized internal formats for
any texture type will allocate at least the internal component sizes, and exactly the
component types shown for that format in tables 3.17- 3.19:



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                 198


   • Texture and renderbuffer color formats (see section 4.4.2)).

         – RGBA32F, RGBA32I, RGBA32UI, RGBA16, RGBA16F, RGBA16I,
           RGBA16UI, RGBA8, RGBA8I, RGBA8UI, SRGB8_ALPHA8, and
           RGB10_A2.
         – R11F_G11F_B10F.
         – RG32F, RG32I, RG32UI, RG16, RG16F, RG16I, RG16UI, RG8, RG8I,
           and RG8UI.
         – R32F, R32I, R32UI, R16F, R16I, R16UI, R16, R8, R8I, and R8UI.
         – ALPHA8.

   • Texture-only color formats:

         – RGBA16_SNORM and RGBA8_SNORM.
         – RGB32F, RGB32I, and RGB32UI.
         – RGB16_SNORM, RGB16F, RGB16I, RGB16UI, and RGB16.
         – RGB8_SNORM, RGB8, RGB8I, RGB8UI, and SRGB8.
         – RGB9_E5.
         – RG16_SNORM,   RG8_SNORM,    COMPRESSED_RG_RGTC2                     and
           COMPRESSED_SIGNED_RG_RGTC2.
         – R16_SNORM,   R8_SNORM,   COMPRESSED_RED_RGTC1                       and
           COMPRESSED_SIGNED_RED_RGTC1.

   • Depth formats: DEPTH_COMPONENT32F, DEPTH_COMPONENT24, and
      DEPTH_COMPONENT16.

   • Combined depth+stencil formats: DEPTH32F_STENCIL8 and DEPTH24_-
     STENCIL8.

Encoding of Special Internal Formats
If internalformat is R11F_G11F_B10F, the red, green, and blue bits are converted
to unsigned 11-bit, unsigned 11-bit, and unsigned 10-bit floating-point values as
described in sections 2.1.3 and 2.1.4.
     If internalformat is RGB9_E5, the red, green, and blue bits are converted to a
shared exponent format according to the following procedure:
     Components red, green, and blue are first clamped (in the process, mapping
NaN to zero) as follows:



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    199




                    redc = max(0, min(sharedexpmax , red))
                 greenc = max(0, min(sharedexpmax , green))
                   bluec = max(0, min(sharedexpmax , blue))
where
                                       (2N − 1) Emax −B
                      sharedexpmax =            2         .
                                          2N
N is the number of mantissa bits per component (9), B is the exponent bias (15),
and Emax is the maximum allowed biased exponent value (31).
   The largest clamped component, maxc , is determined:

                        maxc = max(redc , greenc , bluec )
    A preliminary shared exponent expp is computed:

                 expp = max(−B − 1, log2 (maxc ) ) + 1 + B
    A refined shared exponent exps is computed:
                                         maxc
                           maxs =                  + 0.5
                                      2 p −B−N
                                       exp


                                expp ,    0 ≤ maxs < 2N
                      exps =
                                expp + 1, maxs = 2N
    Finally, three integer values in the range 0 to 2N − 1 are computed:

                                          redc
                             reds =                 + 0.5
                                       2 s −B−N
                                        exp
                                         greenc
                          greens =                  + 0.5
                                       2 s −B−N
                                        exp
                                          bluec
                            blues =               + 0.5
                                       2exps −B−N
    The resulting reds , greens , blues , and exps are stored in the red, green, blue,
and shared bits respectively of the texture image.
    An implementation accepting pixel data of type UNSIGNED_INT_5_9_9_9_-
REV with format RGB is allowed to store the components “as is” if the implementa-
tion can determine the current pixel transfer state acts as an identity transform on
the components.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                            200


   Sized              Base                R      G      B      A     Shared
  Internal Format     Internal Format    bits   bits   bits   bits    bits
  ALPHA4              ALPHA                                    4
  ALPHA8              ALPHA                                    8
  ALPHA12             ALPHA                                   12
  ALPHA16             ALPHA                                   16
  R8                  RED                   8
  R8_SNORM            RED                  s8
  R16                 RED                 16
  R16_SNORM           RED                 s16
  RG8                 RG                    8      8
  RG8_SNORM           RG                   s8     s8
  RG16                RG                  16     16
  RG16_SNORM          RG                  s16    s16
  R3_G3_B2            RGB                   3      3     2
  RGB4                RGB                   4      4     4
  RGB5                RGB                   5      5     5
  RGB8                RGB                   8      8     8
  RGB8_SNORM          RGB                  s8     s8     s8
  RGB10               RGB                 10     10      10
  RGB12               RGB                 12     12      12
  RGB16               RGB                 16     16      16
  RGB16_SNORM         RGB                 s16    s16    s16
  RGBA2               RGBA                  2      2     2      2
  RGBA4               RGBA                  4      4     4      4
  RGB5_A1             RGBA                  5      5     5      1
  RGBA8               RGBA                  8      8     8      8
  RGBA8_SNORM         RGBA                 s8     s8     s8     s8
  RGB10_A2            RGBA                10     10      10     2
  RGBA12              RGBA                12     12      12     12
  RGBA16              RGBA                16     16      16     16
  RGBA16_SNORM        RGBA                s16    s16    s16    s16
  SRGB8               RGB                   8      8     8
  SRGB8_ALPHA8        RGBA                  8      8     8      8
  R16F                RED                 f16
  RG16F               RG                  f16    f16
  RGB16F              RGB                 f16    f16    f16
             Sized internal color formats continued on next page


          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                      201


            Sized internal color formats continued from previous page
  Sized                   Base                 R        G       B        A     Shared
  Internal Format         Internal Format bits bits bits bits                    bits
  RGBA16F                 RGBA                f16      f16     f16      f16
  R32F                    RED                 f32
  RG32F                   RG                  f32      f32
  RGB32F                  RGB                 f32      f32     f32
  RGBA32F                 RGBA                f32      f32     f32      f32
  R11F_G11F_B10F RGB                          f11      f11     f10
  RGB9_E5                 RGB                   9        9      9                 5
  R8I                     RED                  i8
  R8UI                    RED                 ui8
  R16I                    RED                 i16
  R16UI                   RED                ui16
  R32I                    RED                 i32
  R32UI                   RED                ui32
  RG8I                    RG                   i8       i8
  RG8UI                   RG                  ui8      ui8
  RG16I                   RG                  i16      i16
  RG16UI                  RG                 ui16 ui16
  RG32I                   RG                  i32      i32
  RG32UI                  RG                 ui32 ui32
  RGB8I                   RGB                  i8       i8      i8
  RGB8UI                  RGB                 ui8      ui8     ui8
  RGB16I                  RGB                 i16      i16     i16
  RGB16UI                 RGB                ui16 ui16 ui16
  RGB32I                  RGB                 i32      i32     i32
  RGB32UI                 RGB                ui32 ui32 ui32
  RGBA8I                  RGBA                 i8       i8      i8       i8
  RGBA8UI                 RGBA                ui8      ui8     ui8      ui8
  RGBA16I                 RGBA                i16      i16     i16      i16
  RGBA16UI                RGBA               ui16 ui16 ui16 ui16
  RGBA32I                 RGBA                i32      i32     i32      i32
  RGBA32UI                RGBA               ui32 ui32 ui32 ui32
       Table 3.17: Correspondence of sized internal color formats to base
       internal formats, internal data type, and desired component reso-
       lutions for each sized internal format. The component resolution
       prefix indicates the internal data type: f is floating point, i is signed
       integer, ui is unsigned integer, s is signed normalized fixed-point,
       and no prefix is unsigned normalized fixed-point.
            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    202




       Sized                        Base                      A      L      I
      Internal Format               Internal Format          bits   bits   bits
      LUMINANCE4                    LUMINANCE                        4
      LUMINANCE8                    LUMINANCE                        8
      LUMINANCE12                   LUMINANCE                       12
      LUMINANCE16                   LUMINANCE                       16
      LUMINANCE4_ALPHA4             LUMINANCE_ALPHA          4       4
      LUMINANCE6_ALPHA2             LUMINANCE_ALPHA          2       6
      LUMINANCE8_ALPHA8             LUMINANCE_ALPHA          8       8
      LUMINANCE12_ALPHA4            LUMINANCE_ALPHA          4      12
      LUMINANCE12_ALPHA12           LUMINANCE_ALPHA          12     12
      LUMINANCE16_ALPHA16           LUMINANCE_ALPHA          16     16
      INTENSITY4                    INTENSITY                              4
      INTENSITY8                    INTENSITY                              8
      INTENSITY12                   INTENSITY                              12
      INTENSITY16                   INTENSITY                              16
      SLUMINANCE                    LUMINANCE                         8
      SLUMINANCE8_ALPHA8            LUMINANCE_ALPHA            8      8
       Table 3.18: Correspondence of sized internal luminance and inten-
       sity formats to base internal formats, internal data type, and desired
       component resolutions for each sized internal format. The compo-
       nent resolution prefix indicates the internal data type: f is floating
       point, i is signed integer, ui is unsigned integer, and no prefix is
       fixed-point.




    If a compressed internal format is specified, the mapping of the R, G, B, and
A values to texture components is equivalent to the mapping of the corresponding
base internal format’s components, as specified in table 3.16. The specified image
is compressed using a (possibly lossy) compression algorithm chosen by the GL.
    A GL implementation may vary its allocation of internal component resolution
or compressed internal format based on any TexImage3D, TexImage2D (see be-
low), or TexImage1D (see below) parameter (except target), but the allocation and
chosen compressed image format must not be a function of any other state and can-
not be changed once they are established. In addition, the choice of a compressed

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                      203



           Sized                        Base                      D      S
           Internal Format              Internal Format          bits   bits
           DEPTH_COMPONENT16            DEPTH_COMPONENT           16
           DEPTH_COMPONENT24            DEPTH_COMPONENT           24
           DEPTH_COMPONENT32            DEPTH_COMPONENT           32
           DEPTH_COMPONENT32F           DEPTH_COMPONENT          f32
           DEPTH24_STENCIL8             DEPTH_STENCIL             24      8
           DEPTH32F_STENCIL8            DEPTH_STENCIL            f32      8

Table 3.19: Correspondence of sized internal depth and stencil formats to base
internal formats, internal data type, and desired component resolutions for each
sized internal format. The component resolution prefix indicates the internal data
type: f is floating point, i is signed integer, ui is unsigned integer, and no prefix is
fixed-point.



     Compressed Internal Format                 Base Internal Format     Type
     COMPRESSED_ALPHA                           ALPHA                    Generic
     COMPRESSED_LUMINANCE                       LUMINANCE                Generic
     COMPRESSED_LUMINANCE_ALPHA                 LUMINANCE_ALPHA          Generic
     COMPRESSED_INTENSITY                       INTENSITY                Generic
     COMPRESSED_RED                             RED                      Generic
     COMPRESSED_RG                              RG                       Generic
     COMPRESSED_RGB                             RGB                      Generic
     COMPRESSED_RGBA                            RGBA                     Generic
     COMPRESSED_SRGB                            RGB                      Generic
     COMPRESSED_SRGB_ALPHA                      RGBA                     Generic
     COMPRESSED_SLUMINANCE                      LUMINANCE                Generic
     COMPRESSED_SLUMINANCE_ALPHA                LUMINANCE_ALPHA          Generic
     COMPRESSED_RED_RGTC1                       RED                      Specific
     COMPRESSED_SIGNED_RED_RGTC1                RED                      Specific
     COMPRESSED_RG_RGTC2                        RG                       Specific
     COMPRESSED_SIGNED_RG_RGTC2                 RG                       Specific

Table 3.20: Generic and specific compressed internal formats.             The specific
*RGTC* formats are described in appendix C.1.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     204


image format may not be affected by the data parameter. Allocations must be in-
variant; the same allocation and compressed image format must be chosen each
time a texture image is specified with the same parameter values. These allocation
rules also apply to proxy textures, which are described in section 3.9.12.
     The image itself (referred to by data) is a sequence of groups of values. The
first group is the lower left back corner of the texture image. Subsequent groups
fill out rows of width width from left to right; height rows are stacked from bottom
to top forming a single two-dimensional image slice; and depth slices are stacked
from back to front. When the final R, G, B, and A components have been computed
for a group, they are assigned to components of a texel as described by table 3.16.
Counting from zero, each resulting N th texel is assigned internal integer coordi-
nates (i, j, k), where

                             i = (N mod width) − wb
                             N
                         j=(       mod height) − hb
                           width
                              N
                    k=(                mod depth) − db
                        width × height
and wb , hb , and db are the specified border width, height, and depth. wb and hb are
the specified border value; db is the specified border value if target is TEXTURE_-
3D, or zero if target is TEXTURE_2D_ARRAY. Thus the last two-dimensional image
slice of the three-dimensional image is indexed with the highest value of k.
    If the internal data type of the image array is signed or unsigned normalized
fixed-point, each color component is converted using equation 2.6 or 2.4, respec-
tively. If the internal type is floating-point or integer, components are clamped
to the representable range of the corresponding internal component, but are not
converted.
    The level argument to TexImage3D is an integer level-of-detail number. Levels
of detail are discussed below, under Mipmapping. The main texture image has a
level of detail number of 0. If a level-of-detail less than zero is specified, the error
INVALID_VALUE is generated.
    The border argument to TexImage3D is a border width. The significance of
borders is described below. The border width affects the dimensions of the texture
image: let


                                   ws = wt + 2wb
                                   hs = ht + 2hb                                 (3.17)
                                    ds = dt + 2db

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     205


      where ws , hs , and ds are the specified image width, height, and depth, and wt ,
ht , and dt are the dimensions of the texture image internal to the border. If wt , ht ,
or dt are less than zero, then the error INVALID_VALUE is generated.
      An image with zero width, height, or depth indicates the null texture. If
the null texture is specified for the level-of-detail specified by texture parameter
TEXTURE_BASE_LEVEL (see section 3.9.5), it is as if texturing were disabled.
      The maximum border width bt is 1. If border is less than zero, or greater than
bt , then the error INVALID_VALUE is generated.
      The maximum allowable width, height, or depth of a texel array for a three-
dimensional texture is an implementation-dependent function of the level-of-detail
and internal format of the resulting image array. It must be at least 2k−lod + 2bt
for image arrays of level-of-detail 0 through k, where k is the log base 2 of MAX_-
3D_TEXTURE_SIZE, lod is the level-of-detail of the image array, and bt is the
maximum border width. It may be zero for image arrays of any level-of-detail
greater than k. The error INVALID_VALUE is generated if the specified image is
too large to be stored under any conditions.
      If a pixel unpack buffer object is bound and storing texture data would access
memory beyond the end of the pixel unpack buffer, an INVALID_OPERATION error
results.
      In a similar fashion, the maximum allowable width of a texel array for a one-
or two-dimensional, or one- or two-dimensional array texture, and the maximum
allowable height of a two-dimensional or two-dimensional array texture, must be
at least 2k−lod + 2bt for image arrays of level 0 through k, where k is the log base 2
of MAX_TEXTURE_SIZE. The maximum allowable width and height of a cube map
texture must be the same, and must be at least 2k−lod + 2bt for image arrays level
0 through k, where k is the log base 2 of MAX_CUBE_MAP_TEXTURE_SIZE. The
maximum number of layers for one- and two-dimensional array textures (height or
depth, respectively) must be at least MAX_ARRAY_TEXTURE_LAYERS for all levels.
      The maximum allowable width and height of a rectangular texture image
must each be at least the value of the implementation-dependent constant MAX_-
RECTANGLE_TEXTURE_SIZE.
      An implementation may allow an image array of level 0 to be created only if
that single image array can be supported. Additional constraints on the creation of
image arrays of level 1 or greater are described in more detail in section 3.9.11.
      The command

      void TexImage2D( enum target, int level,
        int internalformat, sizei width, sizei height,
         int border, enum format, enum type, void *data );



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                 206


is used to specify a two-dimensional texture image. target must be one of
TEXTURE_2D for a two-dimensional texture, TEXTURE_1D_ARRAY for a one-
dimensional array texture, TEXTURE_RECTANGLE for a rectangle texture, or
one of TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_-
X, TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y,
TEXTURE_CUBE_MAP_POSITIVE_Z, or TEXTURE_CUBE_MAP_NEGATIVE_Z for
a cube map texture. Additionally, target may be either PROXY_TEXTURE_2D
for a two-dimensional proxy texture, PROXY_TEXTURE_1D_ARRAY for a one-
dimensional proxy array texture, PROXY_TEXTURE_RECTANGLE for a rectangle
proxy texture, or PROXY_TEXTURE_CUBE_MAP for a cube map proxy texture
in the special case discussed in section 3.9.12. The other parameters match the
corresponding parameters of TexImage3D.
    For the purposes of decoding the texture image, TexImage2D is equivalent to
calling TexImage3D with corresponding arguments and depth of 1, except that
   • The border depth, db , is zero, and the depth of the image is always 1 regard-
     less of the value of border.

   • The border height, hb , is zero if target is TEXTURE_1D_ARRAY, and border
     otherwise.

   • Convolution will be performed on the image (possibly changing its width
     and height) if SEPARABLE_2D or CONVOLUTION_2D is enabled.

   • UNPACK_SKIP_IMAGES is ignored.
     A two-dimensional or rectangle texture consists of a single two-dimensional
texture image. A cube map texture is a set of six two-dimensional texture images.
The six cube map texture targets form a single cube map texture though each tar-
get names a distinct face of the cube map. The TEXTURE_CUBE_MAP_* targets
listed above update their appropriate cube map face 2D texture image. Note that
the six cube map two-dimensional image tokens such as TEXTURE_CUBE_MAP_-
POSITIVE_X are used when specifying, updating, or querying one of a cube map’s
six two-dimensional images, but when enabling cube map texturing or binding to
a cube map texture object (that is when the cube map is accessed as a whole as
opposed to a particular two-dimensional image), the TEXTURE_CUBE_MAP target
is specified.
     When the target parameter to TexImage2D is one of the six cube map two-
dimensional image targets, the error INVALID_VALUE is generated if the width
and height parameters are not equal.
     When target is TEXTURE_RECTANGLE, an INVALID_VALUE error is generated
if level is non-zero.

           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   207


    When target is TEXTURE_RECTANGLE, an INVALID_VALUE error is generated
if border is non-zero.
    Finally, the command

        void TexImage1D( enum target, int level,
           int internalformat, sizei width, int border,
           enum format, enum type, void *data );

is used to specify a one-dimensional texture image. target must be either
TEXTURE_1D, or PROXY_TEXTURE_1D in the special case discussed in sec-
tion 3.9.12.
    For the purposes of decoding the texture image, TexImage1D is equivalent to
calling TexImage2D with corresponding arguments and height of 1, except that
      • The border height and depth (hb and db ) are always zero, regardless of the
        value of border.

      • Convolution will be performed on the image (possibly changing its width
        only if CONVOLUTION_1D is enabled.
    The image indicated to the GL by the image pointer is decoded and copied into
the GL’s internal memory. This copying effectively places the decoded image in-
side a border of the maximum allowable width bt whether or not a border has been
specified (see figure 3.10) 1 . If no border or a border smaller than the maximum
allowable width has been specified, then the image is still stored as if it were sur-
rounded by a border of the maximum possible width. Any excess border (which
surrounds the specified image, including any border) is assigned unspecified val-
ues. A two-dimensional texture has a border only at its left, right, top, and bottom
ends, and a one-dimensional texture has a border only at its left and right ends.
    We shall refer to the (possibly border augmented) decoded image as the texel
array. A three-dimensional texel array has width, height, and depth ws , hs , and
ds as defined in equation 3.17. A two-dimensional texel array has depth ds = 1,
with height hs and width ws as above. A rectangular texel array must have zero
border width, so ws and hs equal the specified width and height, respectively, while
ds = 1. A one-dimensional texel array has depth ds = 1, height hs = 1, and
width ws as above.
    An element (i, j, k) of the texel array is called a texel (for a two-dimensional
texture or one-dimensional array texture, k is irrelevant; for a one-dimensional
texture, j and k are both irrelevant). The texture value used in texturing a fragment
is determined by that fragment’s associated (s, t, r) coordinates in fixed-function
  1
      Figure 3.10 needs to show a three-dimensional texture image.


               OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                            208



             5.0
                       4
      1.0
                       3

                       2                          α
       t      v    j                                  β
                       1

                       0
      0.0
                   −1
            −1.0
                           −1         0   1   2       3       4   5   6   7     8
                                                          i
                   −1.0                                   u                         9.0
                                0.0                       s                   1.0



   Figure 3.10. A texture image and the coordinates used to access it. This is a two-
   dimensional texture with n = 3 and m = 2. A one-dimensional texture would
   consist of a single horizontal strip. α and β, values used in blending adjacent texels
   to obtain a texture value, are also shown.




fragment shading, or by sampling the texture in a shader, but may not correspond
to any actual texel. See figure 3.10.
    If the data argument of TexImage1D, TexImage2D, or TexImage3D is a null
pointer (a zero-valued pointer in the C implementation), and the pixel unpack
buffer object is zero, a one-, two-, or three-dimensional texel array is created with
the specified target, level, internalformat, border, width, height, and depth, but
with unspecified image contents. In this case no pixel values are accessed in client
memory, and no pixel processing is performed. Errors are generated, however, ex-
actly as though the data pointer were valid. Otherwise if the pixel unpack buffer
object is non-zero, the data argument is treatedly normally to refer to the beginning
of the pixel unpack buffer object’s data.




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                           209


3.9.2    Alternate Texture Image Specification Commands
Two-dimensional and one-dimensional texture images may also be specified us-
ing image data taken directly from the framebuffer, and rectangular subregions of
existing texture images may be respecified.
    The command

        void CopyTexImage2D( enum target, int level,
           enum internalformat, int x, int y, sizei width,
           sizei height, int border );

defines a two-dimensional texel array in exactly the manner of TexImage2D, ex-
cept that the image data are taken from the framebuffer rather than from client
memory. Currently, target must be one of TEXTURE_2D, TEXTURE_1D_ARRAY,
TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_-
MAP_NEGATIVE_X,                                 TEXTURE_CUBE_MAP_POSITIVE_-
Y, TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z, or
TEXTURE_CUBE_MAP_NEGATIVE_Z. x, y, width, and height correspond precisely
to the corresponding arguments to ReadPixels (refer to section 4.3.2); they specify
the image’s width and height, and the lower left (x, y) coordinates of the frame-
buffer region to be copied. The image is taken from the framebuffer exactly as
if these arguments were passed to ReadPixels with argument type set to COLOR,
DEPTH, or DEPTH_STENCIL, depending on internalformat, stopping after pixel
transfer processing is complete. RGBA data is taken from the current color buffer,
while depth component and stencil index data are taken from the depth and sten-
cil buffers, respectively. The error INVALID_OPERATION is generated if depth
component data is required and no depth buffer is present; if stencil index data is
required and no stencil buffer is present; if integer RGBA data is required and the
format of the current color buffer is not integer; or if floating- or fixed-point RGBA
data is required and the format of the current color buffer is integer.
     Subsequent processing is identical to that described for TexImage2D, begin-
ning with clamping of the R, G, B, A, or depth values, and masking of the stencil
index values from the resulting pixel groups. Parameters level, internalformat, and
border are specified using the same values, with the same meanings, as the equiv-
alent arguments of TexImage2D, except that internalformat may not be specified
as 1, 2, 3, or 4. An invalid value specified for internalformat generates the error
INVALID_ENUM. The constraints on width, height, and border are exactly those for
the equivalent arguments of TexImage2D.
     When the target parameter to CopyTexImage2D is one of the six cube map
two-dimensional image targets, the error INVALID_VALUE is generated if the width
and height parameters are not equal.

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                210


   The command

      void CopyTexImage1D( enum target, int level,
         enum internalformat, int x, int y, sizei width,
         int border );

defines a one-dimensional texel array in exactly the manner of TexImage1D, ex-
cept that the image data are taken from the framebuffer, rather than from client
memory. Currently, target must be TEXTURE_1D. For the purposes of decoding
the texture image, CopyTexImage1D is equivalent to calling CopyTexImage2D
with corresponding arguments and height of 1, except that the height of the image
is always 1, regardless of the value of border. level, internalformat, and border
are specified using the same values, with the same meanings, as the equivalent ar-
guments of TexImage1D, except that internalformat may not be specified as 1, 2,
3, or 4. The constraints on width and border are exactly those of the equivalent
arguments of TexImage1D.
    Six additional commands,

      void TexSubImage3D( enum target, int level, int xoffset,
         int yoffset, int zoffset, sizei width, sizei height,
         sizei depth, enum format, enum type, void *data );
      void TexSubImage2D( enum target, int level, int xoffset,
         int yoffset, sizei width, sizei height, enum format,
         enum type, void *data );
      void TexSubImage1D( enum target, int level, int xoffset,
         sizei width, enum format, enum type, void *data );
      void CopyTexSubImage3D( enum target, int level,
         int xoffset, int yoffset, int zoffset, int x, int y,
         sizei width, sizei height );
      void CopyTexSubImage2D( enum target, int level,
         int xoffset, int yoffset, int x, int y, sizei width,
         sizei height );
      void CopyTexSubImage1D( enum target, int level,
         int xoffset, int x, int y, sizei width );

respecify only a rectangular subregion of an existing texel array. No change is
made to the internalformat, width, height, depth, or border parameters of the
specified texel array, nor is any change made to texel values outside the speci-
fied subregion. Currently the target arguments of TexSubImage1D and CopyTex-
SubImage1D must be TEXTURE_1D, the target arguments of TexSubImage2D


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                       211


and CopyTexSubImage2D must be one of TEXTURE_2D, TEXTURE_1D_ARRAY,
TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_-
MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_POSITIVE_Y, TEXTURE_CUBE_-
MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z, or TEXTURE_CUBE_-
MAP_NEGATIVE_Z, and the target arguments of TexSubImage3D and CopyTex-
SubImage3D must be TEXTURE_3D or TEXTURE_2D_ARRAY. The level parameter
of each command specifies the level of the texel array that is modified. If level is
less than zero or greater than the base 2 logarithm of the maximum texture width,
height, or depth, the error INVALID_VALUE is generated. If target is TEXTURE_-
RECTANGLE and level is not zero, the error INVALID_VALUE is generated. Tex-
SubImage3D arguments width, height, depth, format, type, and data match the
corresponding arguments to TexImage3D, meaning that they are specified using
the same values, and have the same meanings. Likewise, TexSubImage2D argu-
ments width, height, format, type, and data match the corresponding arguments
to TexImage2D, and TexSubImage1D arguments width, format, type, and data
match the corresponding arguments to TexImage1D.
    CopyTexSubImage3D and CopyTexSubImage2D arguments x, y, width,
and height match the corresponding arguments to CopyTexImage2D2 . CopyTex-
SubImage1D arguments x, y, and width match the corresponding arguments to
CopyTexImage1D. Each of the TexSubImage commands interprets and processes
pixel groups in exactly the manner of its TexImage counterpart, except that the as-
signment of R, G, B, A, depth, and stencil index pixel group values to the texture
components is controlled by the internalformat of the texel array, not by an argu-
ment to the command. The same constraints and errors apply to the TexSubImage
commands’ argument format and the internalformat of the texel array being re-
specified as apply to the format and internalformat arguments of its TexImage
counterparts.
    Arguments xoffset, yoffset, and zoffset of TexSubImage3D and CopyTex-
SubImage3D specify the lower left texel coordinates of a width-wide by height-
high by depth-deep rectangular subregion of the texel array. The depth argument
associated with CopyTexSubImage3D is always 1, because framebuffer memory
is two-dimensional - only a portion of a single s, t slice of a three-dimensional
texture is replaced by CopyTexSubImage3D.
    Negative values of xoffset, yoffset, and zoffset correspond to the coordinates of
border texels, addressed as in figure 3.10. Taking ws , hs , ds , wb , hb , and db to
be the specified width, height, depth, and border width, border height, and border
depth of the texel array, and taking x, y, z, w, h, and d to be the xoffset, yoffset,
  2
    Because the framebuffer is inherently two-dimensional, there is no CopyTexImage3D com-
mand.



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    212


zoffset, width, height, and depth argument values, any of the following relationships
generates the error INVALID_VALUE:

                                      x < −wb
                                 x + w > w s − wb
                                      y < −hb
                                  y + h > hs − hb
                                      z < −db
                                  z + d > ds − db
Counting from zero, the nth pixel group is assigned to the texel with internal integer
coordinates [i, j, k], where

                              i = x + (n mod w)
                                       n
                            j =y+(        mod h)
                                       w
                                        n
                        k =z+(                  mod d
                                 width ∗ height
    Arguments xoffset and yoffset of TexSubImage2D and CopyTexSubImage2D
specify the lower left texel coordinates of a width-wide by height-high rectangular
subregion of the texel array. Negative values of xoffset and yoffset correspond to
the coordinates of border texels, addressed as in figure 3.10. Taking ws , hs , and bs
to be the specified width, height, and border width of the texel array, and taking x,
y, w, and h to be the xoffset, yoffset, width, and height argument values, any of the
following relationships generates the error INVALID_VALUE:

                                      x < −bs
                                 x + w > ws − bs
                                      y < −bs
                                  y + h > hs − bs
Counting from zero, the nth pixel group is assigned to the texel with internal integer
coordinates [i, j], where

                                i = x + (n mod w)
                                         n
                              j =y+(        mod h)
                                         w

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    213


     The xoffset argument of TexSubImage1D and CopyTexSubImage1D speci-
fies the left texel coordinate of a width-wide subregion of the texel array. Negative
values of xoffset correspond to the coordinates of border texels. Taking ws and bs
to be the specified width and border width of the texel array, and x and w to be the
xoffset and width argument values, either of the following relationships generates
the error INVALID_VALUE:

                                      x < −bs
                                 x + w > ws − bs
Counting from zero, the nth pixel group is assigned to the texel with internal integer
coordinates [i], where

                                i = x + (n mod w)
     Texture images with compressed internal formats may be stored in such a way
that it is not possible to modify an image with subimage commands without having
to decompress and recompress the texture image. Even if the image were modi-
fied in this manner, it may not be possible to preserve the contents of some of
the texels outside the region being modified. To avoid these complications, the
GL does not support arbitrary modifications to texture images with compressed
internal formats. Calling TexSubImage3D, CopyTexSubImage3D, TexSubIm-
age2D, CopyTexSubImage2D, TexSubImage1D, or CopyTexSubImage1D will
result in an INVALID_OPERATION error if xoffset, yoffset, or zoffset is not equal to
−bs (border width). In addition, the contents of any texel outside the region mod-
ified by such a call are undefined. These restrictions may be relaxed for specific
compressed internal formats whose images are easily modified.
     If the internal format of the texture image being modified is one of the spe-
cific RGTC formats described in table 3.20, the texture is stored using one of the
RGTC texture image encodings (see appendix C.1). Since RGTC images are easily
edited along 4 × 4 texel boundaries, the limitations on subimage location and size
are relaxed for TexSubImage2D, TexSubImage3D, CopyTexSubImage2D, and
CopyTexSubImage3D. These commands will generate an INVALID_OPERATION
error if one of the following conditions occurs:

   • width is not a multiple of four, width + xoffset is not equal to the value of
     TEXTURE_WIDTH, and either xoffset or yoffset is non-zero.

   • height is not a multiple of four, height + yoffset is not equal to the value of
     TEXTURE_HEIGHT, and either xoffset or yoffset is non-zero.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   214


   • xoffset or yoffset is not a multiple of four.

   The contents of any 4 × 4 block of texels of an RGTC compressed texture
image that does not intersect the area being modified are preserved during valid
TexSubImage* and CopyTexSubImage* calls.
   Calling CopyTexSubImage3D, CopyTexImage2D, CopyTexSubImage2D,
CopyTexImage1D, or CopyTexSubImage1D will result in an INVALID_-
FRAMEBUFFER_OPERATION error if the object bound to READ_FRAMEBUFFER_-
BINDING is not framebuffer complete (see section 4.4.4).

Texture Copying Feedback Loops
Calling CopyTexSubImage3D, CopyTexImage2D, CopyTexSubImage2D,
CopyTexImage1D, or CopyTexSubImage1D will result in undefined behavior if
the destination texture image level is also bound to to the selected read buffer (see
section 4.3.2) of the read framebuffer. This situation is discussed in more detail in
the description of feedback loops in section 4.4.2.

3.9.3    Compressed Texture Images
Texture images may also be specified or modified using image data already stored
in a known compressed image format, such as the RGTC formats defined in ap-
pendix C, or additional formats defined by GL extensions.
    The commands

        void CompressedTexImage1D( enum target, int level,
           enum internalformat, sizei width, int border,
           sizei imageSize, void *data );
        void CompressedTexImage2D( enum target, int level,
           enum internalformat, sizei width, sizei height,
           int border, sizei imageSize, void *data );
        void CompressedTexImage3D( enum target, int level,
           enum internalformat, sizei width, sizei height,
           sizei depth, int border, sizei imageSize, void *data );

define one-, two-, and three-dimensional texture images, respectively, with incom-
ing data stored in a specific compressed image format. The target, level, inter-
nalformat, width, height, depth, and border parameters have the same meaning as
in TexImage1D, TexImage2D, and TexImage3D, except that compressed rect-
angular texture formats are not supported. data refers to compressed image data
stored in the specific compressed image format corresponding to internalformat.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                 215


If a pixel unpack buffer is bound (as indicated by a non-zero value of PIXEL_-
UNPACK_BUFFER_BINDING), data is an offset into the pixel unpack buffer and the
compressed data is read from the buffer relative to this offset; otherwise, data is
a pointer to client memory and the compressed data is read from client memory
relative to the pointer.
    If the target parameter to any of the CompressedTexImagenD commands is
TEXTURE_RECTANGLE or PROXY_TEXTURE_RECTANGLE, the error INVALID_-
ENUM is generated.
    internalformat must be a supported specific compressed internal format. An
INVALID_ENUM error will be generated if any other values, including any of the
generic compressed internal formats, is specified.
    For all other compressed internal formats, the compressed image will be de-
coded according to the specification defining the internalformat token. Com-
pressed texture images are treated as an array of imageSize ubytes relative to
data. If a pixel unpack buffer object is bound and data + imageSize is greater
than the size of the pixel buffer, an INVALID_OPERATION error results. All pixel
storage and pixel transfer modes are ignored when decoding a compressed texture
image. If the imageSize parameter is not consistent with the format, dimensions,
and contents of the compressed image, an INVALID_VALUE error results. If the
compressed image is not encoded according to the defined image format, the re-
sults of the call are undefined.
    Specific compressed internal formats may impose format-specific restrictions
on the use of the compressed image specification calls or parameters. For example,
the compressed image format might be supported only for 2D textures, or might
not allow non-zero border values. Any such restrictions will be documented in the
extension specification defining the compressed internal format; violating these
restrictions will result in an INVALID_OPERATION error.
    Any restrictions imposed by specific compressed internal formats will be in-
variant, meaning that if the GL accepts and stores a texture image in compressed
form, providing the same image to CompressedTexImage1D, Compressed-
TexImage2D, or CompressedTexImage3D will not result in an INVALID_-
OPERATION error if the following restrictions are satisfied:

   • data points to a compressed texture image returned by GetCompressedTex-
     Image (section 6.1.4).

   • target, level, and internalformat match the target, level and format parame-
     ters provided to the GetCompressedTexImage call returning data.

   • width, height, depth, border, internalformat, and imageSize match the values
     of TEXTURE_WIDTH, TEXTURE_HEIGHT, TEXTURE_DEPTH, TEXTURE_-

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   216


      BORDER, TEXTURE_INTERNAL_FORMAT, and TEXTURE_COMPRESSED_-
      IMAGE_SIZE for image level level in effect at the time of the GetCom-
      pressedTexImage call returning data.

This guarantee applies not just to images returned by GetCompressedTexImage,
but also to any other properly encoded compressed texture image of the same size
and format.
    If internalformat is one of the specific RGTC formats described in table 3.20,
the compressed image data is stored using one of the RGTC compressed texture
image encodings (see appendix C.1) The RGTC texture compression algorithm
supports only two-dimensional images without borders. If internalformat is an
RGTC format, CompressedTexImage1D will generate an INVALID_ENUM error;
CompressedTexImage2D will generate an INVALID_OPERATION error if bor-
der is non-zero or target is TEXTURE_RECTANGLE; and CompressedTexImage3D
will generate an INVALID_OPERATION error if border is non-zero or target is not
TEXTURE_2D_ARRAY.
    If the data argument of CompressedTexImage1D, CompressedTexImage2D,
or CompressedTexImage3D is a null pointer (a zero-valued pointer in the C imple-
mentation), and the pixel unpack buffer object is zero, a texel array with unspeci-
fied image contents is created, just as when a null pointer is passed to TexImage1D,
TexImage2D, or TexImage3D.
    The commands

      void CompressedTexSubImage1D( enum target, int level,
         int xoffset, sizei width, enum format, sizei imageSize,
         void *data );
      void CompressedTexSubImage2D( enum target, int level,
         int xoffset, int yoffset, sizei width, sizei height,
         enum format, sizei imageSize, void *data );
      void CompressedTexSubImage3D( enum target, int level,
         int xoffset, int yoffset, int zoffset, sizei width,
         sizei height, sizei depth, enum format,
         sizei imageSize, void *data );

respecify only a rectangular region of an existing texel array, with incoming data
stored in a known compressed image format. The target, level, xoffset, yoffset, zoff-
set, width, height, and depth parameters have the same meaning as in TexSubIm-
age1D, TexSubImage2D, and TexSubImage3D. data points to compressed image
data stored in the compressed image format corresponding to format. Using any of
the generic compressed internal formats as format will result in an INVALID_ENUM
error.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                217


    If the target parameter to any of the CompressedTexSubImagenD com-
mands is TEXTURE_RECTANGLE or PROXY_TEXTURE_RECTANGLE, the error
INVALID_ENUM is generated.
    The image pointed to by data and the imageSize parameter are interpreted
as though they were provided to CompressedTexImage1D, CompressedTexIm-
age2D, and CompressedTexImage3D. These commands do not provide for im-
age format conversion, so an INVALID_OPERATION error results if format does
not match the internal format of the texture image being modified. If the image-
Size parameter is not consistent with the format, dimensions, and contents of the
compressed image (too little or too much data), an INVALID_VALUE error results.
    As with CompressedTexImage calls, compressed internal formats may have
additional restrictions on the use of the compressed image specification calls or
parameters. Any such restrictions will be documented in the specification defin-
ing the compressed internal format; violating these restrictions will result in an
INVALID_OPERATION error.
    Any restrictions imposed by specific compressed internal formats will be in-
variant, meaning that if the GL accepts and stores a texture image in compressed
form, providing the same image to CompressedTexSubImage1D, Compressed-
TexSubImage2D, CompressedTexSubImage3D will not result in an INVALID_-
OPERATION error if the following restrictions are satisfied:

   • data points to a compressed texture image returned by GetCompressedTex-
     Image (section 6.1.4).

   • target, level, and format match the target, level and format parameters pro-
     vided to the GetCompressedTexImage call returning data.

   • width, height, depth, format, and imageSize match the values of TEXTURE_-
     WIDTH, TEXTURE_HEIGHT, TEXTURE_DEPTH, TEXTURE_INTERNAL_-
     FORMAT, and TEXTURE_COMPRESSED_IMAGE_SIZE for image level level
     in effect at the time of the GetCompressedTexImage call returning data.

   • width, height, depth, format match the values of TEXTURE_WIDTH,
     TEXTURE_HEIGHT, TEXTURE_DEPTH, and TEXTURE_INTERNAL_FORMAT
     currently in effect for image level level.

   • xoffset, yoffset, and zoffset are all −b, where b is the value of TEXTURE_-
     BORDER currently in effect for image level level.

    This guarantee applies not just to images returned by GetCompressedTexIm-
age, but also to any other properly encoded compressed texture image of the same
size.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                               218


     Calling CompressedTexSubImage3D, CompressedTexSubImage2D, or
CompressedTexSubImage1D will result in an INVALID_OPERATION error if
xoffset, yoffset, or zoffset is not equal to −bs (border width), or if width, height,
and depth do not match the values of TEXTURE_WIDTH, TEXTURE_HEIGHT, or
TEXTURE_DEPTH, respectively. The contents of any texel outside the region mod-
ified by the call are undefined. These restrictions may be relaxed for specific com-
pressed internal formats whose images are easily modified.
     If internalformat is one of the specific RGTC formats described in table 3.20,
the texture is stored using one of the RGTC compressed texture image encod-
ings (see appendix C.1). If internalformat is an RGTC format, CompressedTex-
SubImage1D will generate an INVALID_ENUM error; CompressedTexSubIm-
age2D will generate an INVALID_OPERATION error if border is non-zero; and
CompressedTexSubImage3D will generate an INVALID_OPERATION error if
border is non-zero or target is not TEXTURE_2D_ARRAY. Since RGTC images are
easily edited along 4×4 texel boundaries, the limitations on subimage location and
size are relaxed for CompressedTexSubImage2D and CompressedTexSubIm-
age3D. These commands will result in an INVALID_OPERATION error if one of
the following conditions occurs:

    • width is not a multiple of four, and width + xoffset is not equal to the value
      of TEXTURE_WIDTH.

    • height is not a multiple of four, and height +yoffset is not equal to the value
      of TEXTURE_HEIGHT.

    • xoffset or yoffset is not a multiple of four.

   The contents of any 4 × 4 block of texels of an RGTC compressed texture
image that does not intersect the area being modified are preserved during valid
TexSubImage* and CopyTexSubImage* calls.

3.9.4   Buffer Textures
In addition to one-, two-, and three-dimensional, one- and two-dimensional array,
and cube map textures described in previous sections, one additional type of texture
is supported. A buffer texture is similar to a one-dimensional texture. However,
unlike other texture types, the texel array is not stored as part of the texture. Instead,
a buffer object is attached to a buffer texture and the texel array is taken from that
buffer object’s data store. When the contents of a buffer object’s data store are
modified, those changes are reflected in the contents of any buffer texture to which



                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                      219


the buffer object is attached. Also unlike most other texture types, buffer textures
do not have multiple image levels; only a single data store is available.
    The command

      void TexBuffer( enum target, enum internalformat, uint
         buffer );

attaches the storage for the buffer object named buffer to the active buffer texture,
and specifies an internal format for the texel array found in the attached buffer
object. If buffer is zero, any buffer object attached to the buffer texture is detached,
and no new buffer object is attached. If buffer is non-zero, but is not the name
of an existing buffer object, the error INVALID_OPERATION is generated. target
must be TEXTURE_BUFFER. internalformat specifies the storage format, and must
be one of the sized internal formats found in table 3.21.
     When a buffer object is attached to a buffer texture, the buffer object’s data store
is taken as the texture’s texel array. The number of texels in the buffer texture’s
texel array is given by

                                buf f er size
                                                        .
                        components × sizeof (base type)
     where buffer size is the size of the buffer object, in basic machine units and
components and base type are the element count and base data type for elements,
as specified in table 3.21. The number of texels in the texel array is then clamped
to the implementation-dependent limit MAX_TEXTURE_BUFFER_SIZE. When a
buffer texture is accessed in a shader, the results of a texel fetch are undefined
if the specified texel coordinate is negative, or greater than or equal to the clamped
number of texels in the texel array.
     When a buffer texture is accessed in a shader, an integer is provided to indicate
the texel coordinate being accessed. If no buffer object is bound to the buffer tex-
ture, the results of the texel access are undefined. Otherwise, the attached buffer
object’s data store is interpreted as an array of elements of the GL data type cor-
responding to internalformat. Each texel consists of one to four elements that are
mapped to texture components (R, G, B, and A). Element m of the texel numbered
n is taken from element n × components + m of the attached buffer object’s data
store. Elements and texels are both numbered starting with zero. For texture for-
mats with signed or unsigned normalized fixed-point components, the extracted
values are converted to floating-point using equations 2.1 or 2.3, respectively. The
components of the texture are then converted to an (R,G,B,A) vector according to
table 3.21, and returned to the shader as a four-component result vector with com-
ponents of the appropriate data type for the texture’s internal format. The base data

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   220


type, component count, normalized component information, and mapping of data
store elements to texture components is specified in table 3.21.
     In addition to attaching buffer objects to textures, buffer objects can be bound
to the buffer object target named TEXTURE_BUFFER, in order to specify, modify, or
read the buffer object’s data store. The buffer object bound to TEXTURE_BUFFER
has no effect on rendering. A buffer object is bound to TEXTURE_BUFFER by call-
ing BindBuffer with target set to TEXTURE_BUFFER, as described in section 2.9.

3.9.5    Texture Parameters
Various parameters control how the texel array is treated when specified or
changed, and when applied to a fragment. Each parameter is set by calling

        void TexParameter{if}( enum target, enum pname, T param );
        void TexParameter{if}v( enum target, enum pname,
           T *params );
        void TexParameterI{i ui}v( enum target, enum pname,
           T *params );

taget is the target, either TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_-
1D_ARRAY, TEXTURE_2D_ARRAY. TEXTURE_RECTANGLE, or TEXTURE_CUBE_-
MAP. params is a symbolic constant indicating the parameter to be set; the possible
constants and corresponding parameters are summarized in table 3.22. In the first
form of the command, param is a value to which to set a single-valued parameter;
in the remaining forms, params is an array of parameters whose type depends on
the parameter being set.
     If the value for TEXTURE_PRIORITY is specified with TexParameteri or Tex-
Parameteriv, it is converted to floating-point using equation 2.2, followed by
clamping the value to lie in [0, 1].
     If the values for TEXTURE_BORDER_COLOR are specified with TexParame-
terIiv or TexParameterIuiv, the values are unmodified and stored with an internal
data type of integer. If specified with TexParameteriv, they are converted to
floating-point using equation 2.2. Otherwise the values are unmodified and stored
as floating-point.
     In the remainder of section 3.9, denote by lodmin , lodmax , levelbase , and
levelmax the values of the texture parameters TEXTURE_MIN_LOD, TEXTURE_-
MAX_LOD, TEXTURE_BASE_LEVEL, and TEXTURE_MAX_LEVEL respectively.
     Texture parameters for a cube map texture apply to the cube map as a whole;
the six distinct two-dimensional texture images use the texture parameters of the
cube map itself.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                221


  Sized Internal Format   Base Type     Components     Norm         Component
                                                                0     1 2 3
  R8                      ubyte         1              Yes      R     0 0 1
  R16                     ushort        1              Yes      R     0 0 1
  R16F                    half          1              No       R     0 0 1
  R32F                    float         1              No       R     0 0 1
  R8I                     byte          1              No       R     0 0 1
  R16I                    short         1              No       R     0 0 1
  R32I                    int           1              No       R     0 0 1
  R8UI                    ubyte         1              No       R     0 0 1
  R16UI                   ushort        1              No       R     0 0 1
  R32UI                   uint          1              No       R     0 0 1
  RG8                     ubyte         2              Yes      R     G 0 1
  RG16                    ushort        2              Yes      R     G 0 1
  RG16F                   half          2              No       R     G 0 1
  RG32F                   float         2              No       R     G 0 1
  RG8I                    byte          2              No       R     G 0 1
  RG16I                   short         2              No       R     G 0 1
  RG32I                   int           2              No       R     G 0 1
  RG8UI                   ubyte         2              No       R     G 0 1
  RG16UI                  ushort        2              No       R     G 0 1
  RG32UI                  uint          2              No       R     G 0 1
  RGBA8                   ubyte         4              Yes      R     G B A
  RGBA16                  ushort        4              Yes      R     G B A
  RGBA16F                 half          4              No       R     G B A
  RGBA32F                 float         4              No       R     G B A
  RGBA8I                  byte          4              No       R     G B A
  RGBA16I                 short         4              No       R     G B A
  RGBA32I                 int           4              No       R     G B A
  RGBA8UI                 ubyte         4              No       R     G B A
  RGBA16UI                ushort        4              No       R     G B A
  RGBA32UI                uint          4              No       R     G B A

Table 3.21: Internal formats for buffer textures. For each format, the data type
of each element is indicated in the “Base Type” column and the element count is
in the “Components” column. The “Norm” column indicates whether components
should be treated as normalized floating-point values. The “Component 0, 1, 2, and
3” columns indicate the mapping of each element of a texel to texture components.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                    222


 Name                         Type        Legal Values
 TEXTURE_WRAP_S               enum
                                          CLAMP,      CLAMP_TO_EDGE,
                                          REPEAT,
                                          CLAMP_TO_BORDER,
                                          MIRRORED_REPEAT
 TEXTURE_WRAP_T               enum
                                          CLAMP,      CLAMP_TO_EDGE,
                                          REPEAT,
                                          CLAMP_TO_BORDER,
                                          MIRRORED_REPEAT
 TEXTURE_WRAP_R               enum
                                          CLAMP,      CLAMP_TO_EDGE,
                                          REPEAT,
                                          CLAMP_TO_BORDER,
                                          MIRRORED_REPEAT
 TEXTURE_MIN_FILTER           enum        NEAREST,
                                          LINEAR,
                                          NEAREST_MIPMAP_NEAREST,
                                          NEAREST_MIPMAP_LINEAR,
                                          LINEAR_MIPMAP_NEAREST,
                                          LINEAR_MIPMAP_LINEAR,
 TEXTURE_MAG_FILTER           enum        NEAREST,
                                          LINEAR
 TEXTURE_BORDER_COLOR        4 floats,    any 4 values
                           integers, or
                            unsigned
                             integers
 TEXTURE_PRIORITY              float      any value in [0, 1]
 TEXTURE_MIN_LOD               float      any value
 TEXTURE_MAX_LOD               float      any value
 TEXTURE_BASE_LEVEL           integer     any non-negative integer
 TEXTURE_MAX_LEVEL            integer     any non-negative integer
 TEXTURE_LOD_BIAS              float      any value
 DEPTH_TEXTURE_MODE            enum       RED, LUMINANCE, INTENSITY,
                                    ALPHA
 TEXTURE_COMPARE_MODE         enum  NONE,        COMPARE_REF_TO_-
                                    TEXTURE
 TEXTURE_COMPARE_FUNC       enum    LEQUAL, GEQUAL
                                    LESS, GREATER,
                                    EQUAL, NOTEQUAL,
                                    ALWAYS, NEVER
         OpenGL 3.1 with GL ARB compatibility - May 28, 2009
 GENERATE_MIPMAP           boolean  TRUE or FALSE

             Table 3.22: Texture parameters and their values.
3.9. TEXTURING                                                                    223


    If the value of texture parameter GENERATE_MIPMAP is TRUE, specifying or
changing texel arrays may have side effects, which are discussed in the Automatic
Mipmap Generation discussion of section 3.9.8.
    When target is TEXTURE_RECTANGLE, certain texture parameter values may
not be specified. In this case, the error INVALID_ENUM is generated if the
TEXTURE_WRAP_S, TEXTURE_WRAP_T, or TEXTURE_WRAP_R parameter is set
to REPEAT or MIRRORED_REPEAT. The error INVALID_ENUM is generated if
TEXTURE_MIN_FILTER is set to a value other than NEAREST or LINEAR (no
mipmap filtering is permitted). The error INVALID_ENUM is generated if
TEXTURE_BASE_LEVEL is set to any value other than zero.

3.9.6   Depth Component Textures
Depth textures and the depth components of depth/stencil textures can be treated
as RED , LUMINANCE, INTENSITY or ALPHA textures during texture filtering and
application (see section 3.9.15). The initial state for depth and depth/stencil tex-
tures treats them as LUMINANCE textures except in a forward-compatible context,
where the initial state instead treats them as RED textures.

3.9.7   Cube Map Texture Selection
When cube map texturing is enabled, the s t r texture coordinates are treated
as a direction vector rx ry rz emanating from the center of a cube (the q
coordinate can be ignored, since it merely scales the vector without affecting the
direction.) At texture application time, the interpolated per-fragment direction vec-
tor selects one of the cube map face’s two-dimensional images based on the largest
magnitude coordinate direction (the major axis direction). If two or more coor-
dinates have the identical magnitude, the implementation may define the rule to
disambiguate this situation. The rule must be deterministic and depend only on
  rx ry rz . The target column in table 3.23 explains how the major axis direc-
tion maps to the two-dimensional image of a particular cube map target.
     Using the sc , tc , and ma determined by the major axis direction as specified in
table 3.23, an updated s t is calculated as follows:

                                     1    sc
                                s=             +1
                                     2   |ma |
                                     1    tc
                                t=             +1
                                     2   |ma |
   This new s t is used to find a texture value in the determined face’s two-
dimensional texture image using the rules given in sections 3.9.8 through 3.9.9.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                224


 Major Axis Direction    Target                                  sc     tc     ma
 +rx                     TEXTURE_CUBE_MAP_POSITIVE_X             −rz    −ry    rx
 −rx                     TEXTURE_CUBE_MAP_NEGATIVE_X             rz     −ry    rx
 +ry                     TEXTURE_CUBE_MAP_POSITIVE_Y             rx     rz     ry
 −ry                     TEXTURE_CUBE_MAP_NEGATIVE_Y             rx     −rz    ry
 +rz                     TEXTURE_CUBE_MAP_POSITIVE_Z             rx     −ry    rz
 −rz                     TEXTURE_CUBE_MAP_NEGATIVE_Z             −rx    −ry    rz

Table 3.23: Selection of cube map images based on major axis direction of texture
coordinates.


3.9.8   Texture Minification
Applying a texture to a primitive implies a mapping from texture image space to
framebuffer image space. In general, this mapping involves a reconstruction of
the sampled texture image, followed by a homogeneous warping implied by the
mapping to framebuffer space, then a filtering, followed finally by a resampling
of the filtered, warped, reconstructed image before applying it to a fragment. In
the GL this mapping is approximated by one of two simple filtering schemes. One
of these schemes is selected based on whether the mapping from texture space to
framebuffer space is deemed to magnify or minify the texture image.

Scale Factor and Level of Detail
The choice is governed by a scale factor ρ(x, y) and the level-of-detail parameter
λ(x, y), defined as

                           λbase (x, y) = log2 [ρ(x, y)]                   (3.18)


  λ (x, y) = λbase (x, y) + clamp(biastexobj + biastexunit + biasshader ) (3.19)


                    
                    
                     lodmax ,          λ > lodmax
                      λ,                lodmin ≤ λ ≤ lodmax
                    
                 λ=                                                        (3.20)
                     lodmin ,
                                       λ < lodmin
                      undef ined,       lodmin > lodmax
                    

biastexobj is the value of TEXTURE_LOD_BIAS for the bound texture object (as
described in section 3.9.5). biastexunit is the value of TEXTURE_LOD_BIAS for

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     225


the current texture unit (as described in section 3.9.14). biasshader is the value of
the optional bias parameter in the texture lookup functions available to fragment
shaders. If the texture access is performed in a fragment shader without a provided
bias, or outside a fragment shader, then biasshader is zero. The sum of these values
is clamped to the range [−biasmax , biasmax ] where biasmax is the value of the
implementation defined constant MAX_TEXTURE_LOD_BIAS.
     If λ(x, y) is less than or equal to the constant c (see section 3.9.9) the texture
is said to be magnified; if it is greater, the texture is minified. Sampling of minified
textures is described in the remainder of this section, while sampling of magnified
textures is described in section 3.9.9.
     The initial values of lodmin and lodmax are chosen so as to never clamp the
normal range of λ. They may be respecified for a specific texture by calling Tex-
Parameter[if] with pname set to TEXTURE_MIN_LOD or TEXTURE_MAX_LOD re-
spectively.
     Let s(x, y) be the function that associates an s texture coordinate with each set
of window coordinates (x, y) that lie within a primitive; define t(x, y) and r(x, y)
analogously. Let


                             wt + δ u ,          rectangular texture
               u(x, y) =
                             wt × s(x, y) + δu , otherwise
                             ht + δu ,             rectangular texture           (3.21)
                v(x, y) =
                             ht × t(x, y) + δv ,   otherwise
               w(x, y) = dt × r(x, y) + δw

where wt , ht , and dt are as defined by equation 3.17 with ws , hs , and ds equal to
the width, height, and depth of the image array whose level is levelbase . For a one-
dimensional or one-dimensional array texture, define v(x, y) = 0 and w(x, y) = 0;
for a two-dimensional, two-dimensional array, rectangular, or cube map texture,
define w(x, y) = 0.
    (δu , δv , δw ) are the texel offsets specified in the OpenGL Shading Language
texture lookup functions that support offsets. If the texture function used does
not support offsets, or for fixed-function texture accesses, all three shader off-
sets are taken to be zero. If any of the offset values are outside the range of
the implementation-defined values MIN_PROGRAM_TEXEL_OFFSET and MAX_-
PROGRAM_TEXEL_OFFSET, results of the texture lookup are undefined.
    For a polygon, or for a point sprite with texture coordinate replacement en-




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                                 226


abled, ρ is given at a fragment with window coordinates (x, y) by

                                                                                                  
                        2               2            2               2            2                2
                  ∂u           ∂v              ∂w           ∂u              ∂v           ∂w
ρ = max                     +               +            ,               +            +
                  ∂x           ∂x              ∂x           ∂y              ∂y           ∂y       
                                                                           (3.22)
where ∂u/∂x indicates the derivative of u with respect to window x, and similarly
for the other derivatives.
    For a line, the formula is


                                2                            2                                 2
         ∂u      ∂u                         ∂v      ∂v                   ∂w      ∂w
ρ=          ∆x +    ∆y              +          ∆x +    ∆y        +          ∆x +    ∆y              l,
         ∂x      ∂y                         ∂x      ∂y                   ∂x      ∂y
                                                                             (3.23)
where ∆x = x2 − x1 and ∆y = y2 − y1 with (x1 , y1 ) and (x2 , y2 ) being the
segment’s window coordinate endpoints and l = ∆x2 + ∆y 2 .
    For a point, point sprite without texture coordinate replacement enabled, pixel
rectangle, or bitmap, ρ = 1.
    While it is generally agreed that equations 3.22 and 3.23 give the best results
when texturing, they are often impractical to implement. Therefore, an imple-
mentation may approximate the ideal ρ with a function f (x, y) subject to these
conditions:

   1. f (x, y) is continuous and monotonically increasing in each of |∂u/∂x|,
      |∂u/∂y|, |∂v/∂x|, |∂v/∂y|, |∂w/∂x|, and |∂w/∂y|

   2. Let


                                                     ∂u ∂u
                                    mu = max            ,
                                                     ∂x   ∂y

                                                     ∂v   ∂v
                                    mv = max            ,
                                                     ∂x ∂y

                                                     ∂w   ∂w
                                    mw = max            ,                .
                                                     ∂x   ∂y

      Then max{mu , mv , mw } ≤ f (x, y) ≤ mu + mv + mw .



                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   227


Coordinate Wrapping and Texel Selection
After generating u(x, y), v(x, y), and w(x, y), they may be clamped and wrapped
before sampling the texture, depending on the corresponding texture wrap modes.
Let


                     clamp(u(x, y), 0, wt ), TEXTURE_WRAP_S is CLAMP
       u (x, y) =
                     u(x, y),                otherwise
                     clamp(v(x, y), 0, ht ),   TEXTURE_WRAP_T is CLAMP
       v (x, y) =
                     v(x, y),                  otherwise
                     clamp(w(x, y), 0, ht ), TEXTURE_WRAP_R is CLAMP
       w (x, y) =
                     w(x, y),                otherwise

where clamp(a, b, c) returns b if a < b, c if a > c, and a otherwise.
    The value assigned to TEXTURE_MIN_FILTER is used to determine how the
texture value for a fragment is selected.
    When the value of TEXTURE_MIN_FILTER is NEAREST, the texel in the image
array of level levelbase that is nearest (in Manhattan distance) to (u , v , w ) is
obtained. Let (i, j, k) be integers such that


                               i = wrap( u (x, y) )
                              j = wrap( v (x, y) )
                              k = wrap( w (x, y) )

and the value returned by wrap() is defined in table 3.24. For a three-dimensional
texture, the texel at location (i, j, k) becomes the texture value. For two-
dimensional, two-dimensional array, rectangular, or cube map textures, k is irrele-
vant, and the texel at location (i, j) becomes the texture value. For one-dimensional
texture or one-dimensional array textures, j and k are irrelevant, and the texel at
location i becomes the texture value.
    For one- and two-dimensional array textures, the texel is obtained from image
layer l, where


           clamp( t + 0.5 , 0, ht − 1),    for one-dimensional array textures
     l=
           clamp( r + 0.5 , 0, dt − 1),    for two-dimensional array textures



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                        228


  Wrap mode                Result of wrap(coord)
                             clamp(coord, 0, size − 1), for NEAREST filtering
  CLAMP
                             clamp(coord, −1, size),    for LINEAR filtering
  CLAMP_TO_EDGE            clamp(coord, 0, size − 1)
  CLAMP_TO_BORDER          clamp(coord, −1, size)
  REPEAT                   f mod(coord, size)
  MIRRORED_REPEAT          (size − 1) − mirror(f mod(coord, 2 × size) − size)

Table 3.24: Texel location wrap mode application. f mod(a, b) returns a − b × ab .
mirror(a) returns a if a ≥ 0, and −(1 + a) otherwise. The values of mode and
size are TEXTURE_WRAP_S and wt , TEXTURE_WRAP_T and ht , and TEXTURE_-
WRAP_R and dt when wrapping i, j, or k coordinates, respectively.



   If the selected (i, j, k), (i, j), or i location refers to a border texel that satisfies
any of the conditions


                       i < −bs                         i ≥ wt + bs
                      j < −bs                         j ≥ ht + bs
                      k < −bs                         k ≥ dt + bs

then the border values defined by TEXTURE_BORDER_COLOR are used in place
of the non-existent texel. If the texture contains color components, the values of
TEXTURE_BORDER_COLOR are interpreted as an RGBA color to match the texture’s
internal format in a manner consistent with table 3.16. The internal data type of the
border values must be consistent with the type returned by the texture as described
in section 3.9, or the result is undefined. Border values are clamped before they are
used, according to the format in which texture components are stored. For signed
and unsigned normalized fixed-point formats, border values are clamped to [−1, 1]
and [0, 1], respectively. For floating-point and integer formats, border values are
clamped to the representable range of the format. If the texture contains depth
components, the first component of TEXTURE_BORDER_COLOR is interpreted as a
depth value.
    When the value of TEXTURE_MIN_FILTER is LINEAR, a 2 × 2 × 2 cube of
texels in the image array of level levelbase is selected. Let




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   229




                               i0 = wrap( u − 0.5 )
                               j0 = wrap( v − 0.5 )
                              k0 = wrap( w − 0.5 )
                               i1 = wrap( u − 0.5 + 1)
                               j1 = wrap( v − 0.5 + 1)
                              k1 = wrap( w − 0.5 + 1)
                          alpha = f rac(u − 0.5)
                            beta = f rac(v − 0.5)
                        gamma = f rac(w − 0.5)

where f rac(x) denotes the fractional part of x.
   For a three-dimensional texture, the texture value τ is found as


       τ = (1 − α)(1 − β)(1 − γ)τi0 j0 k0 + α(1 − β)(1 − γ)τi1 j0 k0
         + (1 − α)β(1 − γ)τi0 j1 k0 + αβ(1 − γ)τi1 j1 k0
                                                                              (3.24)
         + (1 − α)(1 − β)γτi0 j0 k1 + α(1 − β)γτi1 j0 k1
         + (1 − α)βγτi0 j1 k1 + αβγτi1 j1 k1

where τijk is the texel at location (i, j, k) in the three-dimensional texture image.
    For a two-dimensional, two-dimensional array, rectangular, or cube map tex-
ture,


                     τ =(1 − α)(1 − β)τi0 j0 + α(1 − β)τi1 j0
                         + (1 − α)βτi0 j1 + αβτi1 j1

where τij is the texel at location (i, j) in the two-dimensional texture image. For
two-dimensional array textures, all texels are obtained from layer l, where

                         l = clamp( r + 0.5 , 0, dt − 1).
    And for a one-dimensional or one-dimensional array texture,

                              τ = (1 − α)τi0 + ατi1

   where τi is the texel at location i in the one-dimensional texture. For one-
dimensional array textures, both texels are obtained from layer l, where

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                          230



                           l = clamp( t + 0.5 , 0, ht − 1).
    For any texel in the equation above that refers to a border texel outside the
defined range of the image, the texel value is taken from the texture border color as
with NEAREST filtering.

Rendering Feedback Loops
      If all of the following conditions are satisfied, then the value of the selected τijk ,
τij , or τi in the above equations is undefined instead of referring to the value of the
texel at location (i, j, k), (i, j), or (i) respectively. This situation is discussed in
more detail in the description of feedback loops in section 4.4.2.
      • The current DRAW_FRAMEBUFFER_BINDING names a framebuffer object F.

    • The texture is attached to one of the attachment points, A, of framebuffer
      object F.

    • The value of TEXTURE_MIN_FILTER is NEAREST or LINEAR, and the value
      of FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL for attachment point A
      is equal to the value of TEXTURE_BASE_LEVEL

       -or-

       The value of TEXTURE_MIN_FILTER is NEAREST_MIPMAP_NEAREST,
       NEAREST_MIPMAP_LINEAR, LINEAR_MIPMAP_NEAREST, or LINEAR_-
       MIPMAP_LINEAR, and the value of FRAMEBUFFER_ATTACHMENT_-
       TEXTURE_LEVEL for attachment point A is within the the inclusive range
       from TEXTURE_BASE_LEVEL to q.

Mipmapping
TEXTURE_MIN_FILTER values NEAREST_MIPMAP_NEAREST, NEAREST_-
MIPMAP_LINEAR, LINEAR_MIPMAP_NEAREST, and LINEAR_MIPMAP_LINEAR
each require the use of a mipmap. Rectangular textures do not support mipmap-
ping (it is an error to specify a minification filter that requires mipmapping).
A mipmap is an ordered set of arrays representing the same image; each ar-
ray has a resolution lower than the previous one. If the image array of level
levelbase (excluding its border) has dimensions wt × ht × dt , then there are
 log2 (maxsize) + 1 levels in the mipmap. where



              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   231



            
            wt ,
                                for 1D and 1D array textures
   maxsize = max(wt , ht ),      for 2D, 2D array, and cube map textures
            
             max(wt , ht , dt ), for 3D textures
            

   Numbering the levels such that level levelbase is the 0th level, the ith array has
dimensions

                            wt            ht            dt
                 max(1,        ) × max(1,    ) × max(1,    )
                            wd            hd            dd
where


                    wd = 2i
                              1, for 1D and 1D array textures
                    hd =
                              2i , otherwise
                              2i , for 3D textures
                     dd =
                              1, otherwise

until the last array is reached with dimension 1 × 1 × 1.
    Each array in a mipmap is defined using TexImage3D, TexImage2D, Copy-
TexImage2D, TexImage1D, or CopyTexImage1D; the array being set is indicated
with the level-of-detail argument level. Level-of-detail numbers proceed from
levelbase for the original texel array through p = log2 (maxsize) + levelbase
with each unit increase indicating an array of half the dimensions of the previous
one (rounded down to the next integer if fractional) as already described. All ar-
rays from levelbase through q = min{p, levelmax } must be defined, as discussed
in section 3.9.11.
    The values of levelbase and levelmax may be respecified for a specific tex-
ture by calling TexParameter[if] with pname set to TEXTURE_BASE_LEVEL or
TEXTURE_MAX_LEVEL respectively.
    The error INVALID_VALUE is generated if either value is negative.
    The mipmap is used in conjunction with the level of detail to approximate the
application of an appropriately filtered texture to a fragment. Let c be the value
of λ at which the transition from minification to magnification occurs (since this
discussion pertains to minification, we are concerned only with values of λ where
λ > c).



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     232


   For mipmap filters NEAREST_MIPMAP_NEAREST and LINEAR_MIPMAP_-
NEAREST, the dth mipmap array is selected, where

        
        levelbase ,
                                        λ ≤ 12
                                1
     d=   levelbase + λ +       2   − 1, λ > 12 , levelbase + λ ≤ q +    1
                                                                         2
                                                                                (3.25)
        
         q,                              λ > 21 , levelbase + λ > q +    1
        
                                                                         2

     The rules for NEAREST or LINEAR filtering are then applied to the selected
array. Specifically, the coordinate (u, v, w) is computed as in equation 3.21, with
ws , hs , and ds equal to the width, height, and depth of the image array whose level
is d.
     For mipmap filters NEAREST_MIPMAP_LINEAR and LINEAR_MIPMAP_-
LINEAR, the level d1 and d2 mipmap arrays are selected, where


                            q,               levelbase + λ ≥ q
                   d1 =                                                         (3.26)
                             levelbase + λ , otherwise
                            q,      levelbase + λ ≥ q
                   d2 =                                                         (3.27)
                            d1 + 1, otherwise

     The rules for NEAREST or LINEAR filtering are then applied to each of the
selected arrays, yielding two corresponding texture values τ1 and τ2 . Specifically,
for level d1 , the coordinate (u, v, w) is computed as in equation 3.21, with ws , hs ,
and ds equal to the width, height, and depth of the image array whose level is d1 .
For level d2 the coordinate (u , v , w ) is computed as in equation 3.21, with ws ,
hs , and ds equal to the width, height, and depth of the image array whose level is
d2 .
     The final texture value is then found as

                          τ = [1 − frac(λ)]τ1 + frac(λ)τ2 .

Manual Mipmap Generation
Mipmaps can be generated manually with the command

      void GenerateMipmap( enum target );

where target is one of TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_-
1D_ARRAY, TEXTURE_2D_ARRAY, or TEXTURE_CUBE_MAP. Mipmap generation


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                              233


affects the texture image attached to target. For cube map textures, an INVALID_-
OPERATION error is generated if the texture bound to target is not cube complete,
as defined in section 3.9.11.
     Mipmap generation replaces texel array levels levelbase + 1 through q with
arrays derived from the levelbase array, regardless of their previous contents. All
other mipmap arrays, including the levelbase array, are left unchanged by this com-
putation.
     The internal formats and border widths of the derived mipmap arrays all match
those of the levelbase array, and the dimensions of the derived arrays follow the
requirements described in section 3.9.11.
     The contents of the derived arrays are computed by repeated, filtered reduction
of the levelbase array. For one- and two-dimensional array textures, each layer is
filtered independently. No particular filter algorithm is required, though a box filter
is recommended as the default filter. In some implementations, filter quality may
be affected by hints (section 5.6).

Automatic Mipmap Generation
If the value of texture parameter GENERATE_MIPMAP is TRUE, and a change is
made to the interior or border texels of the levelbase array of a mipmap by one of the
texture image specification operations defined in sections 3.9.1 through 3.9.3, then
a 3 complete set of mipmap arrays (as defined in section 3.9.11) will be computed.
Array levels levelbase + 1 through p are replaced with arrays derived from the
modified levelbase array, as described above for Manual Mipmap Generation.
All other mipmap arrays, including the levelbase array, are left unchanged by this
computation. For arrays in the range levelbase + 1 through q, inclusive, automatic
and manual mipmap generation generate the same derived arrays, given identical
levelbase arrays.
    Automatic mipmap generation is available only for non-proxy texture image
targets.

3.9.9    Texture Magnification
When λ indicates magnification, the value assigned to TEXTURE_MAG_FILTER
determines how the texture value is obtained. There are two possible values
for TEXTURE_MAG_FILTER: NEAREST and LINEAR. NEAREST behaves exactly as
NEAREST for TEXTURE_MIN_FILTER and LINEAR behaves exactly as LINEAR for
   3
     Automatic mipmap generation is not performed for changes resulting from rendering operations
targeting a texel array bound as a color buffer of a framebuffer object.




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   234


TEXTURE_MIN_FILTER as described in section 3.9.8, including the texture coor-
dinate wrap modes specified in table 3.24. The level-of-detail levelbase texel array
is always used for magnification.
     Implementations may either unconditionally assume c = 0 for the minifica-
tion vs. magnification switch-over point, or may choose to make c depend on the
combination of minification and magnification modes as follows: if the magnifi-
cation filter is given by LINEAR and the minification filter is given by NEAREST_-
MIPMAP_NEAREST or NEAREST_MIPMAP_LINEAR, then c = 0.5. This is done to
ensure that a minified texture does not appear “sharper” than a magnified texture.
Otherwise c = 0.

3.9.10   Combined Depth/Stencil Textures
If the texture image has a base internal format of DEPTH_STENCIL, then the stencil
index texture component is ignored. The texture value τ does not include a stencil
index component, but includes only the depth component.

3.9.11   Texture Completeness
A texture is said to be complete if all the image arrays and texture parameters
required to utilize the texture for texture application are consistently defined. The
definition of completeness varies depending on the texture dimensionality.
    For one-, two-, or three-dimensional textures and one- or two-dimensional ar-
ray textures, a texture is complete if the following conditions all hold true:

   • The set of mipmap arrays levelbase through q (where q is defined in the
     Mipmapping discussion of section 3.9.8) were each specified with the same
     internal format.

   • The border widths of each array are the same.

   • The dimensions of the arrays follow the sequence described in the Mipmap-
     ping discussion of section 3.9.8.

   • levelbase ≤ levelmax

   • Each dimension of the levelbase array is positive.

   • If the internal format of the arrays is integer (see (see tables 3.17- 3.18),
      TEXTURE_MAG_FILTER must be NEAREST and TEXTURE_MIN_FILTER
     must be NEAREST or NEAREST_MIPMAP_NEAREST.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                  235


Array levels k where k < levelbase or k > q are insignificant to the definition of
completeness.
     For cube map textures, a texture is cube complete if the following conditions
all hold true:

   • The levelbase arrays of each of the six texture images making up the cube
     map have identical, positive, and square dimensions.

   • The levelbase arrays were each specified with the same internal format.

   • The levelbase arrays each have the same border width.

   Finally, a cube map texture is mipmap cube complete if, in addition to being
cube complete, each of the six texture images considered individually is complete.

Effects of Completeness on Texture Application
If one-, two-, or three-dimensional texturing (but not cube map texturing) is en-
abled for a texture unit at the time a primitive is rasterized, if TEXTURE_MIN_-
FILTER is one that requires a mipmap, and if the texture image bound to the en-
abled texture target is not complete, then it is as if texture mapping were disabled
for that texture unit.
    If cube map texturing is enabled for a texture unit at the time a primitive is
rasterized, and if the bound cube map texture is not cube complete, then it is as if
texture mapping were disabled for that texture unit. Additionally, if TEXTURE_-
MIN_FILTER is one that requires a mipmap, and if the texture is not mipmap cube
complete, then it is as if texture mapping were disabled for that texture unit.
    Texture lookups performed in vertex and fragment shaders are affected by com-
pleteness of the texture being sampled as described in sections 2.14.7 and 3.12.2.

Effects of Completeness on Texture Image Specification
An implementation may allow a texture image array of level 1 or greater to be cre-
ated only if a mipmap complete set of image arrays consistent with the requested
array can be supported. A mipmap complete set of arrays is equivalent to a com-
plete set of arrays where levelbase = 0 and levelmax = 1000, and where, excluding
borders, the dimensions of the image array being created are understood to be half
the corresponding dimensions of the next lower numbered array (rounded down to
the next integer if fractional).




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     236


3.9.12    Texture State and Proxy State
The state necessary for texture can be divided into two categories. First, there
are the multiple sets of texel arrays (a single array for the rectangular texture
target; one set of mipmap arrays each for the one-, two-, and three-dimensional
and one- and two-dimensional array texture targets; and six sets of mipmap arrays
for the cube map texture targets) and their number. Each array has associated
with it a width, height (two- and three-dimensional, rectangular, one-dimensional
array, and cube map only), and depth (three-dimensional and two-dimensional ar-
ray only), a border width, an integer describing the internal format of the image,
integer values describing the resolutions of each of the red, green, blue, alpha,
luminance, intensity, depth, and stencil components of the image, integer values
describing the type (unsigned normalized, integer, floating-point, etc.) of each of
the components, a boolean describing whether the image is compressed or not,
and an integer size of a compressed image. Each initial texel array is null (zero
width, height, and depth, zero border width, internal format 1, component sizes
set to zero and component types set to NONE, the compressed flag set to FALSE,
and a zero compressed size). The buffer texture target has associated an integer
containing the name of the buffer object that provided the data store for the texture,
initially zero, and an integer identifying the internal format of the texture, initially
LUMINANCE8. Next, there are the four sets of texture properties, corresponding
to the one-, two-, three-dimensional, and cube map texture targets. Each set con-
sists of the selected minification and magnification filters, the wrap modes for s, t
(two- and three-dimensional and cube map only), and r (three-dimensional only),
the TEXTURE_BORDER_COLOR, two floating-point numbers describing the mini-
mum and maximum level of detail, two integers describing the base and maximum
mipmap array, a boolean flag indicating whether the texture is resident, a boolean
indicating whether automatic mipmap generation should be performed, the prior-
ity associated with each set of properties, and three integers describing the depth
texture mode, compare mode, and compare function. The value of the resident
flag is determined by the GL and may change as a result of other GL operations.
The flag may only be queried, not set, by applications (see section 3.9.13). In the
initial state, the value assigned to TEXTURE_MIN_FILTER is NEAREST_MIPMAP_-
LINEAR, (except for rectangular textures, where the initial value is LINEAR), and
the value for TEXTURE_MAG_FILTER is LINEAR. s, t, and r wrap modes are all set
to REPEAT (except for rectangular textures, where the initial value is CLAMP_TO_-
EDGE). The values of TEXTURE_MIN_LOD and TEXTURE_MAX_LOD are -1000 and
1000 respectively. The values of TEXTURE_BASE_LEVEL and TEXTURE_MAX_-
LEVEL are 0 and 1000 respectively. The value of TEXTURE_PRIORITY is 1.0. The
value of TEXTURE_BORDER_COLOR is (0,0,0,0). The value of GENERATE_MIPMAP


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   237


is false. The values of DEPTH_TEXTURE_MODE, TEXTURE_COMPARE_MODE, and
TEXTURE_COMPARE_FUNC are LUMINANCE, NONE, and LEQUAL respectively. The
initial value of TEXTURE_RESIDENT is determined by the GL.
     In addition to image arrays for the non-proxy texture targets described above,
partially instantiated image arrays are maintained for one-, two-, and three-
dimensional, rectangular, and one- and two-dimensional array textures. Addi-
tionally, a single proxy image array is maintained for the cube map texture. Each
proxy image array includes width, height, depth, border width, and internal format
state values, as well as state for the red, green, blue, alpha, luminance, intensity,
depth, and stencil component resolutions and types. Proxy arrays do not include
image data nor texture parameters. When TexImage3D is executed with target
specified as PROXY_TEXTURE_3D, the three-dimensional proxy state values of the
specified level-of-detail are recomputed and updated. If the image array would not
be supported by TexImage3D called with target set to TEXTURE_3D, no error is
generated, but the proxy width, height, depth, border width, and component reso-
lutions are set to zero, and the component types are set to NONE. If the image array
would be supported by such a call to TexImage3D, the proxy state values are set
exactly as though the actual image array were being specified. No pixel data are
transferred or processed in either case.
     Proxy arrays for one- and two-dimensional textures and one- and two-
dimensional array textures are operated on in the same way when TexImage1D is
executed with target specified as PROXY_TEXTURE_1D, TexImage2D is executed
with target specified as PROXY_TEXTURE_2D, PROXY_TEXTURE_1D_ARRAY, or
PROXY_TEXTURE_RECTANGLE, or TexImage3D is executed with target specified
as PROXY_TEXTURE_2D_ARRAY.
     The cube map proxy arrays are operated on in the same manner when TexIm-
age2D is executed with the target field specified as PROXY_TEXTURE_CUBE_MAP,
with the addition that determining that a given cube map texture is supported with
PROXY_TEXTURE_CUBE_MAP indicates that all six of the cube map 2D images
are supported. Likewise, if the specified PROXY_TEXTURE_CUBE_MAP is not sup-
ported, none of the six cube map 2D images are supported.
     There is no image or non-level-related state associated with proxy textures.
Therefore they may not be used as textures, and calling BindTexture, GetTex-
Image, GetTexParameteriv, or GetTexParameterfv with a proxy texture target
generates an INVALID_ENUM error.

3.9.13   Texture Objects
In addition to the default textures TEXTURE_1D, TEXTURE_2D, TEXTURE_-
3D,  TEXTURE_1D_ARRAY, TEXTURE_2D_ARRAY,           TEXTURE_RECTANGLE,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    238


TEXTURE_BUFFER, and TEXTURE_CUBE_MAP, named one, two-, and three-
dimensional, one- and two-dimensional array, rectangular, buffer, and cube map
texture objects can be created and operated upon. The name space for texture
objects is the unsigned integers, with zero reserved by the GL.
    A texture object is created by binding an unused name to one of these texture
targets. The binding is effected by calling

      void BindTexture( enum target, uint texture );

with target set to the desired texture target and texture set to the unused name. The
resulting texture object is a new state vector, comprising all the state values listed
in section 3.9.12, set to the same initial values. The new texture object bound to
target is, and remains a texture of the dimensionality and type specified by target
until it is deleted.
     BindTexture may also be used to bind an existing texture object to any of
these targets. The error INVALID_OPERATION is generated if an attempt is made
to bind a texture object of different dimensionality than the specified target. If the
bind is successful no change is made to the state of the bound texture object, and
any previous binding to target is broken.
     In a deprecated context, BindTexture fails and an INVALID_OPERATION er-
ror is generated if texture is not zero or a name returned from a previous call to
GenTextures, or if such a name has since been deleted with DeleteTextures.
     While a texture object is bound, GL operations on the target to which it is
bound affect the bound object, and queries of the target to which it is bound return
state from the bound object. If texture mapping of the dimensionality of the target
to which a texture object is bound is enabled, the state of the bound texture object
directs the texturing operation.
     In the initial state, TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_-
1D_ARRAY, TEXTURE_2D_ARRAY, TEXTURE_RECTANGLE, TEXTURE_BUFFER,
and TEXTURE_CUBE_MAP have one-, two-, and three-dimensional, one- and two-
dimensional array, rectangular, buffer, and cube map texture state vectors re-
spectively associated with them. In order that access to these initial textures not
be lost, they are treated as texture objects all of whose names are 0. The ini-
tial one-, two-, three-dimensional, one- and two-dimensional array, rectangular,
buffer, and cube map texture is therefore operated upon, queried, and applied as
TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_1D_ARRAY, TEXTURE_-
2D_ARRAY, TEXTURE_RECTANGLE, TEXTURE_BUFFER, or TEXTURE_CUBE_MAP
respectively while 0 is bound to the corresponding targets.
     Texture objects are deleted by calling

      void DeleteTextures( sizei n, uint *textures );

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                    239


textures contains n names of texture objects to be deleted. After a texture object
is deleted, it has no contents or dimensionality, and its name is again unused. If
a texture that is currently bound to any of the target bindings of BindTexture is
deleted, it is as though BindTexture had been executed with the same target and
texture zero. Additionally, special care must be taken when deleting a texture if any
of the images of the texture are attached to a framebuffer object. See section 4.4.2
for details.
    Unused names in textures are silently ignored, as is the value zero.
    The command

      void GenTextures( sizei n, uint *textures );

returns n previously unused texture object names in textures. These names are
marked as used, for the purposes of GenTextures only, but they acquire texture
state and a dimensionality only when they are first bound, just as if they were
unused.
    An implementation may choose to establish a working set of texture objects on
which binding operations are performed with higher performance. A texture object
that is currently part of the working set is said to be resident. The command

      boolean AreTexturesResident( sizei n, uint *textures,
         boolean *residences );

returns TRUE if all of the n texture objects named in textures are resident, or if the
implementation does not distinguish a working set. If at least one of the texture
objects named in textures is not resident, then FALSE is returned, and the residence
of each texture object is returned in residences. Otherwise the contents of resi-
dences are not changed. If any of the names in textures are unused or are zero,
FALSE is returned, the error INVALID_VALUE is generated, and the contents of
residences are indeterminate. The residence status of a single bound texture object
can also be queried by calling GetTexParameteriv or GetTexParameterfv with
target set to the target to which the texture object is bound, and pname set to
TEXTURE_RESIDENT.
    AreTexturesResident indicates only whether a texture object is currently resi-
dent, not whether it could not be made resident. An implementation may choose to
make a texture object resident only on first use, for example. The client may guide
the GL implementation in determining which texture objects should be resident by
specifying a priority for each texture object. The command

      void PrioritizeTextures( sizei n, uint *textures,
         clampf *priorities );

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     240


sets the priorities of the n texture objects named in textures to the values in priori-
ties. Each priority value is clamped to the range [0,1] before it is assigned. Zero in-
dicates the lowest priority, with the least likelihood of being resident. One indicates
the highest priority, with the greatest likelihood of being resident. The priority of a
single bound texture object may also be changed by calling TexParameteri, Tex-
Parameterf, TexParameteriv, or TexParameterfv with target set to the target to
which the texture object is bound, pname set to TEXTURE_PRIORITY, and param
or params specifying the new priority value (which is clamped to the range [0,1]
before being assigned). PrioritizeTextures silently ignores attempts to prioritize
unused texture object names or zero (default textures).
     The texture object name space, including the initial one-, two-, and three-
dimensional, one- and two-dimensional array, rectangular, buffer, and cube map
texture objects, is shared among all texture units. A texture object may be bound
to more than one texture unit simultaneously. After a texture object is bound, any
GL operations on that target object affect any other texture units to which the same
texture object is bound.
     Texture binding is affected by the setting of the state ACTIVE_TEXTURE.
     If a texture object is deleted, it as if all texture units which are bound to that
texture object are rebound to texture object zero.

3.9.14    Texture Environments and Texture Functions
The command

      void TexEnv{if}( enum target, enum pname, T param );
      void TexEnv{if}v( enum target, enum pname, T params );

sets parameters of the texture environment that specifies how texture values are
interpreted when texturing a fragment, or sets per-texture-unit filtering parameters.
    target must be one of TEXTURE_FILTER_CONTROL, POINT_SPRITE, or
TEXTURE_ENV. pname is a symbolic constant indicating the parameter to be set. In
the first form of the command, param is a value to which to set a single-valued pa-
rameter; in the second form, params is a pointer to an array of parameters: either
a single symbolic constant or a value or group of values to which the parameter
should be set.
    When target is TEXTURE_FILTER_CONTROL, pname must be TEXTURE_-
LOD_BIAS. In this case the parameter is a single signed floating point value,
biastexunit , that biases the level of detail parameter λ as described in section 3.9.8.
    When target is POINT_SPRITE, point sprite rasterization behavior is affected
as described in section 3.4.


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                                    241


    When target is TEXTURE_ENV, the possible environment parameters are
TEXTURE_ENV_MODE, TEXTURE_ENV_COLOR, COMBINE_RGB, COMBINE_ALPHA,
RGB_SCALE, ALPHA_SCALE, SRCn_RGB, SRCn_ALPHA, OPERANDn_RGB, and
OPERANDn_ALPHA, where n = 0, 1, or 2. TEXTURE_ENV_MODE may be set to
one of REPLACE, MODULATE, DECAL, BLEND, ADD, or COMBINE. TEXTURE_ENV_-
COLOR is set to an RGBA color by providing four single-precision floating-point
values. If integers are provided for TEXTURE_ENV_COLOR, then they are converted
to floating-point as described in equation 2.2.
     The value of TEXTURE_ENV_MODE specifies a texture function. The result of
this function depends on the fragment and the texel array value. The precise form
of the function depends on the base internal formats of the texel arrays that were
last specified.
     Cf and Af 4 are the primary color components of the incoming fragment; Cs
and As are the components of the texture source color, derived from the filtered
texture values Rt , Gt , Bt , At , Lt , and It as shown in table 3.25; Cc and Ac are
the components of the texture environment color; Cp and Ap are the components
resulting from the previous texture environment (for texture environment 0, Cp and
Ap are identical to Cf and Af , respectively); and Cv and Av are the primary color
components computed by the texture function.
     If fragment color clamping is enabled, all of these color values, including the
results, are clamped to the range [0, 1]. If fragment color clamping is disabled, the
values are not clamped. The texture functions are specified in tables 3.26, 3.27,
and 3.28.
     If the value of TEXTURE_ENV_MODE is COMBINE, the form of the texture func-
tion depends on the values of COMBINE_RGB and COMBINE_ALPHA, according to
table 3.28. The RGB and ALPHA results of the texture function are then multiplied
by the values of RGB_SCALE and ALPHA_SCALE, respectively. If fragment color
clamping is enabled, the arguments and results used in table 3.28 are clamped to
[0, 1]. Otherwise, the results are unmodified.
     The arguments Arg0, Arg1, and Arg2 are determined by the values of SRCn_-
RGB, SRCn_ALPHA, OPERANDn_RGB and OPERANDn_ALPHA, where n = 0, 1, or 2,
as shown in tables 3.29 and 3.30. Cs n and As n denote the texture source color and
alpha from the texture image bound to texture unit n
     The state required for the current texture environment, for each texture unit,
consists of a six-valued integer indicating the texture function, an eight-valued in-
teger indicating the RGB combiner function and a six-valued integer indicating the
   4
     In the remainder of section 3.9.14, the notation Cx is used to denote each of the three components
Rx , Gx , and Bx of a color specified by x. Operations on Cx are performed independently for each
color component. The A component of colors is usually operated on in a different fashion, and is
therefore denoted separately by Ax .


               OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                              242




                    Texture Base         Texture source color
                    Internal Format             Cs         As
                    ALPHA                   (0, 0, 0)      At
                    LUMINANCE            (Lt , Lt , Lt )   1
                    LUMINANCE_ALPHA      (Lt , Lt , Lt )   At
                    INTENSITY              (It , It , It ) It
                    RED                    (Rt , 0, 0)     1
                    RG                    (Rt , Gt , 0)    1
                    RGB                  (Rt , Gt , Bt )   1
                    RGBA                 (Rt , Gt , Bt )   At

Table 3.25: Correspondence of filtered texture components to texture source com-
ponents.




  Texture Base            REPLACE     MODULATE     DECAL
  Internal Format         Function    Function     Function
  ALPHA                   Cv = Cp     Cv = Cp      undefined
                          Av = As     Av = Ap As
  LUMINANCE               Cv = Cs     Cv = Cp Cs   undefined
  (or 1)                  Av = Ap     Av = Ap
  LUMINANCE_ALPHA         Cv = Cs     Cv = Cp Cs   undefined
  (or 2)                  Av = As     Av = Ap As
  INTENSITY               Cv = Cs     Cv = Cp Cs   undefined
                          Av = As     Av = Ap As
  RGB, RG, RED,           Cv = Cs     Cv = Cp Cs   Cv   = Cs
  or 3                    Av = Ap     Av = Ap      Av   = Ap
  RGBA                    Cv = Cs     Cv = Cp Cs   Cv   = Cp (1 − As ) + Cs As
  or 4                    Av = As     Av = Ap As   Av   = Ap

           Table 3.26: Texture functions REPLACE, MODULATE, and DECAL.




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                     243


       Texture Base            BLEND                           ADD
       Internal Format         Function                        Function
       ALPHA                   Cv = Cp                         Cv = Cp
                               Av = Ap As                      Av = Ap As
       LUMINANCE               Cv = Cp (1 − Cs ) + Cc Cs       Cv = Cp + Cs
       (or 1)                  Av = Ap                         Av = Ap
       LUMINANCE_ALPHA         Cv = Cp (1 − Cs ) + Cc Cs       Cv = Cp + Cs
       (or 2)                  Av = Ap As                      Av = Ap As
       INTENSITY               Cv = Cp (1 − Cs ) + Cc Cs       Cv = Cp + Cs
                               Av = Ap (1 − As ) + Ac As       Av = Ap + As
       RGB, RG, RED,           Cv = Cp (1 − Cs ) + Cc Cs       Cv = Cp + Cs
       or 3                    Av = Ap                         Av = Ap
       RGBA                    Cv = Cp (1 − Cs ) + Cc Cs       Cv = Cp + Cs
       or 4                    Av = Ap As                      Av = Ap As

                  Table 3.27: Texture functions BLEND and ADD.


ALPHA combiner function, six four-valued integers indicating the combiner RGB
and ALPHA source arguments, three four-valued integers indicating the combiner
RGB operands, three two-valued integers indicating the combiner ALPHA operands,
and four floating-point environment color values. In the initial state, the texture
and combiner functions are each MODULATE, the combiner RGB and ALPHA sources
are each TEXTURE, PREVIOUS, and CONSTANT for sources 0, 1, and 2 respectively,
the combiner RGB operands for sources 0 and 1 are each SRC_COLOR, the combiner
RGB operand for source 2, as well as for the combiner ALPHA operands, are each
SRC_ALPHA, and the environment color is (0, 0, 0, 0).
    The state required for the texture filtering parameters, for each texture unit,
consists of a single floating-point level of detail bias. The initial value of the bias
is 0.0.

3.9.15    Texture Comparison Modes
Texture values can also be computed according to a specified comparison function.
Texture parameter TEXTURE_COMPARE_MODE specifies the comparison operands,
and parameter TEXTURE_COMPARE_FUNC specifies the comparison function. The
format of the resulting texture sample is determined by the value of DEPTH_-
TEXTURE_MODE.




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                             244




            COMBINE_RGB      Texture Function
            REPLACE          Arg0
            MODULATE         Arg0 ∗ Arg1
            ADD              Arg0 + Arg1
            ADD_SIGNED       Arg0 + Arg1 − 0.5
            INTERPOLATE      Arg0 ∗ Arg2 + Arg1 ∗ (1 − Arg2)
            SUBTRACT         Arg0 − Arg1
            DOT3_RGB         4 × ((Arg0r − 0.5) ∗ (Arg1r − 0.5)+
                                  (Arg0g − 0.5) ∗ (Arg1g − 0.5)+
                                   (Arg0b − 0.5) ∗ (Arg1b − 0.5))
            DOT3_RGBA        4 × ((Arg0r − 0.5) ∗ (Arg1r − 0.5)+
                                  (Arg0g − 0.5) ∗ (Arg1g − 0.5)+
                                   (Arg0b − 0.5) ∗ (Arg1b − 0.5))


            COMBINE_ALPHA      Texture Function
            REPLACE            Arg0
            MODULATE           Arg0 ∗ Arg1
            ADD                Arg0 + Arg1
            ADD_SIGNED         Arg0 + Arg1 − 0.5
            INTERPOLATE        Arg0 ∗ Arg2 + Arg1 ∗ (1 − Arg2)
            SUBTRACT           Arg0 − Arg1

Table 3.28: COMBINE texture functions. The scalar expression computed for the
DOT3_RGB and DOT3_RGBA functions is placed into each of the 3 (RGB) or 4 (RGBA)
components of the output. The result generated from COMBINE_ALPHA is ignored
for DOT3_RGBA.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                245


        SRCn_RGB         OPERANDn_RGB              Argument
        TEXTURE          SRC_COLOR                 Cs
                         ONE_MINUS_SRC_COLOR       1 − Cs
                         SRC_ALPHA                 As
                         ONE_MINUS_SRC_ALPHA       1 − As
        TEXTUREn         SRC_COLOR                 Cs n
                         ONE_MINUS_SRC_COLOR       1 − Cs n
                         SRC_ALPHA                 As n
                         ONE_MINUS_SRC_ALPHA       1 − As n
        CONSTANT         SRC_COLOR                 Cc
                         ONE_MINUS_SRC_COLOR       1 − Cc
                         SRC_ALPHA                 Ac
                         ONE_MINUS_SRC_ALPHA       1 − Ac
        PRIMARY_COLOR    SRC_COLOR                 Cf
                         ONE_MINUS_SRC_COLOR       1 − Cf
                         SRC_ALPHA                 Af
                         ONE_MINUS_SRC_ALPHA       1 − Af
        PREVIOUS         SRC_COLOR                 Cp
                         ONE_MINUS_SRC_COLOR       1 − Cp
                         SRC_ALPHA                 Ap
                         ONE_MINUS_SRC_ALPHA       1 − Ap

          Table 3.29: Arguments for COMBINE_RGB functions.


        SRCn_ALPHA       OPERANDn_ALPHA            Argument
        TEXTURE          SRC_ALPHA                 As
                         ONE_MINUS_SRC_ALPHA       1 − As
        TEXTUREn         SRC_ALPHA                 As n
                         ONE_MINUS_SRC_ALPHA       1 − As n
        CONSTANT         SRC_ALPHA                 Ac
                         ONE_MINUS_SRC_ALPHA       1 − Ac
        PRIMARY_COLOR    SRC_ALPHA                 Af
                         ONE_MINUS_SRC_ALPHA       1 − Af
        PREVIOUS         SRC_ALPHA                 Ap
                         ONE_MINUS_SRC_ALPHA       1 − Ap

         Table 3.30: Arguments for COMBINE_ALPHA functions.



        OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                246


Depth Texture Comparison Mode
If the currently bound texture’s base internal format is DEPTH_COMPONENT or
DEPTH_STENCIL, then DEPTH_TEXTURE_MODE, TEXTURE_COMPARE_MODE and
TEXTURE_COMPARE_FUNC control the output of the texture unit as described be-
low. Otherwise, the texture unit operates in the normal manner and texture com-
parison is bypassed.
    Let Dt be the depth texture value and Dref be the reference value, defined as
follows:

   • For fixed-function, non-cubemap texture lookups, Dref is the interpolated r
     texture coordinate.

   • For fixed-function, cubemap texture lookups, Dref is the interpolated q tex-
     ture coordinate.

   • For texture lookups generated by an OpenGL Shading Language lookup
     function, Dref is the reference value for depth comparisons provided by the
     lookup function.

   If the texture’s internal format indicates a fixed-point depth texture, then Dt
and Dref are clamped to the range [0, 1]; otherwise no clamping is performed.
Then the effective texture value is computed as follows:
   If the value of TEXTURE_COMPARE_MODE is NONE, then

                                     r = Dt
    If the value of TEXTURE_COMPARE_MODE is COMPARE_REF_TO_TEXTURE,
then r depends on the texture comparison function as shown in table 3.31.
    The resulting r is assigned to Rt , Lt , It , or At if the value of DEPTH_-
TEXTURE_MODE is respectively RED, LUMINANCE, INTENSITY, or ALPHA.
    If the value of TEXTURE_MAG_FILTER is not NEAREST, or the value of
TEXTURE_MIN_FILTER is not NEAREST or NEAREST_MIPMAP_NEAREST, then r
may be computed by comparing more than one depth texture value to the texture
reference value. The details of this are implementation-dependent, but r should
be a value in the range [0, 1] which is proportional to the number of comparison
passes or failures.

3.9.16   sRGB Texture Color Conversion
If the currently bound texture’s internal format is one of SRGB, SRGB8,
SRGB_ALPHA, SRGB8_ALPHA8, SLUMINANCE_ALPHA, SLUMINANCE8_ALPHA8,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   247


            Texture Comparison Function          Computed result r
                                                       1.0, Dref ≤ Dt
            LEQUAL                               r=
                                                       0.0, Dref > Dt
                                                       1.0, Dref ≥ Dt
            GEQUAL                               r=
                                                       0.0, Dref < Dt
                                                       1.0, Dref < Dt
            LESS                                 r=
                                                       0.0, Dref ≥ Dt
                                                       1.0, Dref > Dt
            GREATER                              r=
                                                       0.0, Dref ≤ Dt
                                                       1.0, Dref = Dt
            EQUAL                                r=
                                                       0.0, Dref = Dt
                                                       1.0, Dref = Dt
            NOTEQUAL                             r=
                                                       0.0, Dref = Dt
            ALWAYS                               r = 1.0
            NEVER                                r = 0.0

                 Table 3.31: Depth texture comparison functions.



SLUMINANCE, SLUMINANCE8, COMPRESSED_SLUMINANCE, COMPRESSED_-
SLUMINANCE_ALPHA, COMPRESSED_SRGB, or COMPRESSED_SRGB_ALPHA, the
red, green, and blue components are converted from an sRGB color space to a lin-
ear color space as part of filtering described in sections 3.9.8 and 3.9.9. Any alpha
component is left unchanged. Ideally, implementations should perform this color
conversion on each sample prior to filtering but implementations are allowed to
perform this conversion after filtering (though this post-filtering approach is infe-
rior to converting from sRGB prior to filtering).
      The conversion from an sRGB encoded component, cs , to a linear component,
cl , is as follows.
                               cs
                              12.92 ,            cs ≤ 0.04045
                      cl =     cs +0.055 2.4
                                                                              (3.28)
                                 1.055       ,   cs > 0.04045
    Assume cs is the sRGB component in the range [0, 1].




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.9. TEXTURING                                                                   248


3.9.17   Shared Exponent Texture Color Conversion
If the currently bound texture’s internal format is RGB9_E5, the red, green, blue,
and shared bits are converted to color components (prior to filtering) using shared
exponent decoding. The component reds , greens , blues , and expshared values (see
section 3.9.1) are treated as unsigned integers and are converted to red, green, and
blue as follows:


                             red = reds 2expshared −B
                           green = greens 2expshared −B
                             blue = blues 2expshared −B


3.9.18   Texture Application
Texturing is enabled or disabled using the generic Enable and Disable com-
mands, respectively, with the symbolic constants TEXTURE_1D, TEXTURE_-
2D, TEXTURE_3D, or TEXTURE_CUBE_MAP to enable the one-, two-, three-
dimensional, or cube map texture, respectively. If both two- and one-dimensional
textures are enabled, the two-dimensional texture is used. If the three-dimensional
and either of the two- or one-dimensional textures is enabled, the three-dimensional
texture is used. If the cube map texture and any of the three-, two-, or one-
dimensional textures is enabled, then cube map texturing is used.
    If all texturing is disabled, a rasterized fragment is passed on unaltered to the
next stage of the GL (although its texture coordinates may be discarded). Other-
wise, a texture value is found according to the parameter values of the currently
bound texture image of the appropriate dimensionality using the rules given in sec-
tions 3.9.7 through 3.9.9. This texture value is used along with the incoming frag-
ment in computing the texture function indicated by the currently bound texture
environment. The result of this function replaces the incoming fragment’s primary
R, G, B, and A values. These are the color values passed to subsequent operations.
Other data associated with the incoming fragment remain unchanged, except that
the texture coordinates may be discarded.
    Note that the texture value may contain R, G, B, A, L, I, or D components,
but it does not contain an S component. If the texture’s base internal format is
DEPTH_STENCIL, for the purposes of texture application it is as if the base internal
format were DEPTH_COMPONENT.
    Each texture unit is enabled and bound to texture objects independently from
the other texture units. Each texture unit follows the precedence rules for one-,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.10. COLOR SUM                                                                    249


two-, three-dimensional, and cube map textures. Thus texture units can be per-
forming texture mapping of different dimensionalities simultaneously. Each unit
has its own enable and binding states.
    Each texture unit is paired with an environment function, as shown in fig-
ure 3.11. The second texture function is computed using the texture value from
the second texture, the fragment resulting from the first texture function computa-
tion and the second texture unit’s environment function. If there is a third texture,
the fragment resulting from the second texture function is combined with the third
texture value using the third texture unit’s environment function and so on. The tex-
ture unit selected by ActiveTexture determines which texture unit’s environment
is modified by TexEnv calls.
    If the value of TEXTURE_ENV_MODE is COMBINE, the texture function associ-
ated with a given texture unit is computed using the values specified by SRCn_RGB,
SRCn_ALPHA, OPERANDn_RGB and OPERANDn_ALPHA. If TEXTUREn is specified
as SRCn_RGB or SRCn_ALPHA, the texture value from texture unit n will be used
in computing the texture function for this texture unit.
    Texturing is enabled and disabled individually for each texture unit. If texturing
is disabled for one of the units, then the fragment resulting from the previous unit
is passed unaltered to the following unit. Individual texture units beyond those
specified by MAX_TEXTURE_UNITS are always treated as disabled.
    If a texture unit is disabled or has an invalid or incomplete texture (as defined
in section 3.9.11) bound to it, then blending is disabled for that texture unit. If the
texture environment for a given enabled texture unit references a disabled texture
unit, or an invalid or incomplete texture that is bound to another unit, then the
results of texture blending are undefined.
    The required state, per texture unit, is four bits indicating whether each of one-,
two-, three-dimensional, or cube map texturing is enabled or disabled. In the intial
state, all texturing is disabled for all texture units.


3.10     Color Sum
At the beginning of color sum, a fragment has two RGBA colors: a primary color
cpri (which texturing, if enabled, may have modified) and a secondary color csec .
     If color sum is enabled, the R, G, and B components of these two colors are
summed to produce a single post-texturing RGBA color c. The A component of c
is taken from the A component of cpri ; the A component of csec is unused. If color
sum is disabled, then cpri is assigned to c. If fragment color clamping is enabled,
the components of c are then clamped to the range [0, 1].
     Color sum is enabled or disabled using the generic Enable and Disable com-


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.10. COLOR SUM                                                                         250




    Cf




                 TE0
  CT0                            TE1
  CT1                                             TE2
  CT2                                                              TE3            C’f
  CT3

            Cf   = fragment primary color input to texturing

            C’f = fragment color output from texturing

            CTi = texture color from texture lookup i

            TEi = texture environment i




  Figure 3.11. Multitexture pipeline. Four texture units are shown; however, multi-
  texturing may support a different number of units depending on the implementation.
  The input fragment color is successively combined with each texture according to
  the state of the corresponding texture environment, and the resulting fragment color
  passed as input to the next texture unit in the pipeline.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.11. FOG                                                                         251


mands, respectively, with the symbolic constant COLOR_SUM. If lighting is enabled
and if a vertex shader is not active, the color sum stage is always applied, ignoring
the value of COLOR_SUM.
    The state required is a single bit indicating whether color sum is enabled or
disabled. In the initial state, color sum is disabled.
    Color sum has no effect in color index mode, or if a fragment shader is active.


3.11     Fog
If enabled, fog blends a fog color with a rasterized fragment’s post-texturing color
using a blending factor f . Fog is enabled and disabled with the Enable and Disable
commands using the symbolic constant FOG.
    This factor f is computed according to one of three equations:

                                 f = exp(−d · c),                              (3.29)


                              f = exp(−(d · c)2 ), or                          (3.30)

                                             e−c
                                     f=                                         (3.31)
                                             e−s
If a vertex shader is active, or if the fog source, as defined below, is FOG_COORD,
then c is the interpolated value of the fog coordinate for this fragment. Otherwise,
if the fog source is FRAGMENT_DEPTH, then c is the eye-coordinate distance from
the eye, (0, 0, 0, 1) in eye coordinates, to the fragment center. The equation and the
fog source, along with either d or e and s, is specified with

       void Fog{if}( enum pname, T param );
       void Fog{if}v( enum pname, T params );

If pname is FOG_MODE, then param must be, or params must point to an inte-
ger that is one of the symbolic constants EXP, EXP2, or LINEAR, in which case
equation 3.29, 3.30, or 3.31, respectively, is selected for the fog calculation (if,
when 3.31 is selected, e = s, results are undefined). If pname is FOG_COORD_SRC,
then param must be, or params must point to an integer that is one of the symbolic
constants FRAGMENT_DEPTH or FOG_COORD. If pname is FOG_DENSITY, FOG_-
START, or FOG_END, then param is or params points to a value that is d, s, or e,
respectively. If d is specified less than zero, the error INVALID_VALUE results.
    An implementation may choose to approximate the eye-coordinate distance
from the eye to each fragment center by |ze |. Further, f need not be computed at

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.12. FRAGMENT SHADERS                                                           252


each fragment, but may be computed at each vertex and interpolated as other data
are.
     No matter which equation and approximation is used to compute f , the result
is clamped to [0, 1] to obtain the final f .
     f is used differently depending on whether the GL is in RGBA or color index
mode. In RGBA mode, if Cr represents a rasterized fragment’s R, G, or B value,
then the corresponding value produced by fog is

                              C = f Cr + (1 − f )Cf .

(The rasterized fragment’s A value is not changed by fog blending.) The R, G, B,
and A values of Cf are specified by calling Fog with pname equal to FOG_COLOR;
in this case params points to four values comprising Cf . If these are not floating-
point values, then they are converted to floating-point as described in equation 2.2.
If fragment color clamping is enabled, the components of Cr and Cf and the result
C are clamped to the range [0, 1] before the fog blend is performed.
     In color index mode, the formula for fog blending is

                                I = ir + (1 − f )if

where ir is the rasterized fragment’s color index and if is a single-precision
floating-point value. (1 − f )if is rounded to the nearest fixed-point value with
the same number of bits to the right of the binary point as ir , and the integer por-
tion of I is masked (bitwise ANDed) with 2n − 1, where n is the number of bits in
a color in the color index buffer (buffers are discussed in chapter 4). The value of
if is set by calling Fog with pname set to FOG_INDEX and param being or params
pointing to a single value for the fog index. The integer part of if is masked with
2n − 1.
     The state required for fog consists of a three valued integer to select the fog
equation, three floating-point values d, e, and s, an RGBA fog color and a fog
color index, a two-valued integer to select the fog coordinate source, and a single
bit to indicate whether or not fog is enabled. In the initial state, fog is disabled,
FOG_COORD_SRC is FRAGMENT_DEPTH, FOG_MODE is EXP, d = 1.0, e = 1.0, and
s = 0.0; Cf = (0, 0, 0, 0) and if = 0.
     Fog has no effect if a fragment shader is active.


3.12     Fragment Shaders
The sequence of operations that are applied to fragments that result from raster-
izing a point, line segment, polygon, pixel rectangle or bitmap as described in


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.12. FRAGMENT SHADERS                                                             253


sections 3.9 through 3.11 is a fixed-functionality method for processing such frag-
ments. Applications can more generally describe the operations that occur on such
fragments by using a fragment shader.
    A fragment shader is an array of strings containing source code for the opera-
tions that are meant to occur on each fragment that results from rasterization. The
language used for fragment shaders is described in the OpenGL Shading Language
Specification.
    A fragment shader only applies when the GL is in RGBA mode. Its operation
in color index mode is undefined.
    Fragment shaders are created as described in section 2.14.1 using a type pa-
rameter of FRAGMENT_SHADER. They are attached to and used in program objects
as described in section 2.14.2.
    When the program object currently in use includes a fragment shader, its frag-
ment shader is considered active, and is used to process fragments. If the program
object has no fragment shader, or no program object is currently in use, the fixed-
function fragment processing operations described in previous sections are used
instead.
    Results of rasterization are undefined if any of the selected draw buffers of the
draw framebuffer have an integer format and no fragment shader is active.

3.12.1    Shader Variables
Fragment shaders can access uniforms belonging to the current shader object. The
amount of storage available for fragment shader uniform variables in the default
uniform block is specified by the value of the implementation-dependent constant
MAX_FRAGMENT_UNIFORM_COMPONENTS. The total amount of combined storage
available for fragment shader uniform variables in all uniform blocks (includ-
ing the default uniform block) is specified by the value of the implementation-
dependent constant MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS. These
values represent the numbers of individual floating-point, integer, or boolean val-
ues that can be held in uniform variable storage for a fragment shader. A uniform
matrix will consume no more than 4 × min(r, c) such values, where r and c are
the number of rows and columns in the matrix. A link error will be generated if
an attempt is made to utilize more than the space available for fragment shader
uniform variables.
     Fragment shaders can read varying variables that correspond to the attributes
of the fragments produced by rasterization. The OpenGL Shading Language Spec-
ification defines a set of built-in varying variables that can be be accessed by a frag-
ment shader. These built-in varying variables include data associated with a frag-
ment that are used for fixed-function fragment processing, such as the fragment’s


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.12. FRAGMENT SHADERS                                                           254


color, secondary color, texture coordinates, fog coordinate, eye z coordinate, and
position.
    Additionally, when a vertex shader is active, it may define one or more varying
variables (see section 2.14.6 and the OpenGL Shading Language Specification).
These values are, if not flat shaded, interpolated across the primitive being ren-
dered. The results of these interpolations are available when varying variables of
the same name are defined in the fragment shader.
    User-defined varying variables are not saved in the current raster position.
When processing fragments generated by the rasterization of a pixel rectangle or
bitmap, values of user-defined varying variables are undefined. Built-in varying
variables have well-defined values.
    A fragment shader can also write to varying out variables. Values written
to these variables are used in the subsequent per-fragment operations. Varying
out variables can be used to write floating-point, integer or unsigned integer val-
ues destined for buffers attached to a framebuffer object, or destined for color
buffers attached to the default framebuffer. The Shader Outputs subsection of
section 3.12.2 describes how to direct these values to buffers.

3.12.2   Shader Execution
If a fragment shader is active, the executable version of the fragment shader is used
to process incoming fragment values that are the result of rasterization, rather than
the fixed-function fragment processing described in sections 3.9 through 3.11. In
particular,

   • The texture environments and texture functions described in section 3.9.14
     are not applied.

   • Texture application as described in section 3.9.18 is not applied.

   • Color sum as described in section 3.10 is not applied.

   • Fog as described in section 3.11 is not applied.


Texture Access
The Shader Only Texturing subsection of section 2.14.7 describes texture lookup
functionality accessible to a vertex shader. The texel fetch and texture size query
functionality described there also applies to fragment shaders.
    When a texture lookup is performed in a fragment shader, the GL computes
the filtered texture value τ in the manner described in sections 3.9.8 and 3.9.9, and

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.12. FRAGMENT SHADERS                                                               255


converts it to a texture source color Cs according to table 3.25 (section 3.9.14).
The GL returns a four-component vector (Rs , Gs , Bs , As ) to the fragment shader.
For the purposes of level-of-detail calculations, the derivatives du     du dv dv dw
                                                                    dx , dy , dx , dy , dx
and dw
     dy may be approximated by a differencing algorithm as detailed in section 8.8
of the OpenGL Shading Language specification.
    Texture lookups involving textures with depth component data can either return
the depth data directly or return the results of a comparison with the Dref value (see
section 3.9.15) used to perform the lookup. The comparison operation is requested
in the shader by using any of the shadow sampler types (sampler1DShadow,
sampler2DShadow, or sampler2DRectShadow), and in the texture using the
TEXTURE_COMPARE_MODE parameter. These requests must be consistent; the re-
sults of a texture lookup are undefined if:

    • The sampler used in a texture lookup function is not one of the shadow
      sampler types, the texture object’s internal format is DEPTH_COMPONENT
      or DEPTH_STENCIL, and the TEXTURE_COMPARE_MODE is not NONE.

    • The sampler used in a texture lookup function is one of the shadow sam-
      pler types, the texture object’s internal format is DEPTH_COMPONENT or
      DEPTH_STENCIL, and the TEXTURE_COMPARE_MODE is NONE.

    • The sampler used in a texture lookup function is one of the shadow sampler
      types, and the texture object’s internal format is not DEPTH_COMPONENT or
      DEPTH_STENCIL.

    The stencil index texture internal component is ignored if the base internal
format is DEPTH_STENCIL.
    If a fragment shader uses a sampler whose associated texture object is not com-
plete, as defined in section 3.9.11, the texture image unit will return (R, G, B, A)
= (0, 0, 0, 1).
    The number of separate texture units that can be accessed from within a
fragment shader during the rendering of a single primitive is specified by the
implementation-dependent constant MAX_TEXTURE_IMAGE_UNITS.

Shader Inputs
The OpenGL Shading Language specification describes the values that are avail-
able as inputs to the fragment shader.
    The built-in variable gl_FragCoord holds the window coordinates x, y, z,
and w1 for the fragment. The z component of gl_FragCoord undergoes an im-
plied conversion to floating-point. This conversion must leave the values 0 and

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.12. FRAGMENT SHADERS                                                           256


1 invariant. Note that this z component already has a polygon offset added in, if
enabled (see section 3.6.5). The w1 value is computed from the wc coordinate (see
section 2.15), which is the result of the product of the projection matrix and the
vertex’s eye coordinates.
    The built-in variables gl_Color and gl_SecondaryColor hold the R, G,
B, and A components, respectively, of the fragment color and secondary color. If
the primary color or the secondary color components are represented by the GL as
fixed-point values, they undergo an implied conversion to floating-point. This con-
version must leave the values 0 and 1 invariant. Floating-point color components
(resulting from a disabled vertex color clamp) are unmodified.
    The built-in variable gl_FrontFacing is set to TRUE if the fragment is gener-
ated from a front-facing primitive, and FALSE otherwise. For fragments generated
from quadrilateral, polygon, or triangle primitives (including ones resulting from
primitives rendered as points or lines), the determination is made by examining the
sign of the area computed by equation 3.8 of section 3.6.1 (including the possible
reversal of this sign controlled by FrontFace). If the sign is positive, fragments
generated by the primitive are front-facing; otherwise, they are back-facing. All
other fragments are considered front-facing.
    The built-in variable gl_PrimitiveID is filled with the number of primitives
processed by the rasterizer since the last time Begin was called (directly or indi-
rectly via vertex array functions). The first primitive generated after a Begin is
numbered zero, and the primitive ID counter is incremented after every individual
point, line, or polygon primitive is processed. For polygons drawn in point or line
mode, the primitive ID counter is incremented only once, even though multiple
points or lines may be drawn. For QUADS and QUAD_STRIP primitives that are de-
composed into triangles, the primitive ID is incremented after each complete quad
is processed.
    Restarting a primitive using the primitive restart index (see section 2.8) has no
effect on the primitive ID counter.
    The value of gl_PrimitiveID is undefined for fragments generated by
POLYGON primitives or from DrawPixels or Bitmap commands. Additionally,
gl_PrimitiveID is only defined under the same conditions that gl_VertexID
is defined, as described under “Shader Inputs” in section 2.14.7.

Shader Outputs
The OpenGL Shading Language specification describes the values that may be
output by a fragment shader. These outputs are split into two categories, user-
defined varying out variables and the built-in variables gl_FragColor, gl_-
FragData[n], and gl_FragDepth. If fragment color clamping is enabled and


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.12. FRAGMENT SHADERS                                                           257


the color buffer has an unsigned normalized fixed-point, signed normalized fixed-
point, or floating-point format, the final fragment color, fragment data, or vary-
ing out variable values written by a fragment shader are clamped to the range
[0, 1]. Only user-defined varying out variables declared as a floating-point type are
clamped and may be converted. If fragment color clamping is disabled, or the color
buffer has an integer format, the final fragment color, fragment data, or varying out
variable values are not modified. For fixed-point depth buffers, the final fragment
depth written by a fragment shader is first clamped to [0, 1] and then converted to
fixed-point as if it were a window z value (see section 2.15.1). For floating-point
depth buffers, conversion is not performed but clamping is. Note that the depth
range computation is not applied here, only the conversion to fixed-point.
     Color values written by a fragment shader may be floating-point, signed inte-
ger, or unsigned integer. If the color buffer has an signed or unsigned normalized
fixed-point format, color values are assumed to be floating-point and are converted
to fixed-point as described in equations 2.6 or 2.4, respectively; otherwise no type
conversion is applied. If the values written by the fragment shader do not match
the format(s) of the corresponding color buffer(s), the result is undefined.
     Writing to gl_FragColor specifies the fragment color (color number zero)
that will be used by subsequent stages of the pipeline. Writing to gl_-
FragData[n] specifies the value of fragment color number n. Any colors, or
color components, associated with a fragment that are not written by the frag-
ment shader are undefined. A fragment shader may not statically assign values to
more than one of gl_FragColor, gl_FragData, and any user-defined varying
out variable. In this case, a compile or link error will result. A shader statically
assigns a value to a variable if, after pre-processing, it contains a statement that
would write to the variable, whether or not run-time flow of control will cause that
statement to be executed.
     Writing to gl_FragDepth specifies the depth value for the fragment being
processed. If the active fragment shader does not statically assign a value to gl_-
FragDepth, then the depth value generated during rasterization is used by sub-
sequent stages of the pipeline. Otherwise, the value assigned to gl_FragDepth
is used, and is undefined for any fragments where statements assigning a value to
gl_FragDepth are not executed. Thus, if a shader statically assigns a value to
gl_FragDepth, then it is responsible for always writing it.
     The binding of a user-defined varying out variable to a fragment color number
can be specified explicitly. The command

      void BindFragDataLocation( uint program,
         uint colorNumber, const char *name );



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.13. ANTIALIASING APPLICATION                                                   258


specifies that the varying out variable name in program should be bound to frag-
ment color colorNumber when the program is next linked. If name was bound
previously, its assigned binding is replaced with colorNumber. name must be a
null-terminated string. The error INVALID_VALUE is generated if colorNumber is
equal or greater than MAX_DRAW_BUFFERS. BindFragDataLocation has no effect
until the program is linked. In particular, it doesn’t modify the bindings of varying
out variables in a program that has already been linked. The error INVALID_-
OPERATION is generated if name starts with the reserved gl_ prefix.
     When a program is linked, any varying out variables without a binding spec-
ified through BindFragDataLocation will automatically be bound to fragment
colors by the GL. Such bindings can be queried using the command GetFrag-
DataLocation. LinkProgram will fail if the number of active outputs is greater
than the value of MAX_DRAW_BUFFERS. LinkProgram will also fail if more than
one varying out variable is bound to the same number. This type of aliasing is not
allowed.
     BindFragDataLocation may be issued before any shader objects are attached
to a program object. Hence it is allowed to bind any name (except a name starting
with gl_) to a color number, including a name that is never used as a varying out
variable in any fragment shader object. Assigned bindings for variables that do not
exist are ignored.
     After a program object has been linked successfully, the bindings of varying
out variable names to color numbers can be queried. The command

       int GetFragDataLocation( uint program, const
          char *name );

returns the number of the fragment color to which the varying out variable name
was bound when the program object program was last linked. name must be
a null-terminated string. If program has not been successfully linked, the error
INVALID_OPERATION is generated. If name is not a varying out variable, or if an
error occurs, -1 will be returned.


3.13     Antialiasing Application
If antialiasing is enabled for the primitive from which a rasterized fragment was
produced, then the computed coverage value is applied to the fragment. In RGBA
mode, the value is multiplied by the fragment’s alpha (A) value to yield a final
alpha value. In color index mode, the value is used to set the low order bits of
the color index value as described in section 3.3. The coverage value is applied


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
3.14. MULTISAMPLE POINT FADE                                                     259


separately to each fragment color, and only applied if the corresponding color
buffer in the framebuffer has a fixed- or floating-point format.


3.14     Multisample Point Fade
Finally, if multisampling is enabled and the rasterized fragment results from a point
primitive, then the computed fade factor from equation 3.2 is applied to the frag-
ment. In RGBA mode, the fade factor is multiplied by the fragment’s alpha value
to yield a final alpha value. In color index mode, the fade factor has no effect.
The fade factor is applied separately to each fragment color, and only applied
if the corresponding color buffer in the framebuffer has a fixed- or floating-point
format.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Chapter 4

Per-Fragment Operations and the
Framebuffer

The framebuffer, whether it is the default framebuffer or a framebuffer object (see
section 2.1), consists of a set of pixels arranged as a two-dimensional array. For
purposes of this discussion, each pixel in the framebuffer is simply a set of some
number of bits. The number of bits per pixel may vary depending on the GL im-
plementation, the type of framebuffer selected, and parameters specified when the
framebuffer was created. Creation and management of the default framebuffer is
outside the scope of this specification, while creation and management of frame-
buffer objects is described in detail in section 4.4.
     Corresponding bits from each pixel in the framebuffer are grouped together into
a bitplane; each bitplane contains a single bit from each pixel. These bitplanes are
grouped into several logical buffers. These are the color, accumulation, depth, and
stencil buffers. The color buffer actually consists of a number of buffers, and these
color buffers serve related but slightly different purposes depending on whether the
GL is bound to the default framebuffer or a framebuffer object.
     For the default framebuffer, the color buffers are the front left buffer, the front
right buffer, the back left buffer, the back right buffer, and some number of auxil-
iary buffers. Typically the contents of the front buffers are displayed on a color
monitor while the contents of the back buffers are invisible. (Monoscopic contexts
display only the front left buffer; stereoscopic contexts display both the front left
and the front right buffers.) The contents of the auxiliary buffers are never visible.
All color buffers must have the same number of bitplanes, although an implemen-
tation or context may choose not to provide right buffers, back buffers, or auxiliary
buffers at all. Further, an implementation or context may choose not to provide
accumulation, depth or stencil buffers. If no default framebuffer is associated with


                                         260
                                                                                          261


the GL context, the framebuffer is incomplete except when a framebuffer object is
bound (see sections 4.4.1 and 4.4.4).
     Framebuffer objects are not visible, and do not have any of the color buffers
present in the default framebuffer. Instead, the buffers of an framebuffer object
are specified by attaching individual textures or renderbuffers (see section 4.4) to
a set of attachment points. A framebuffer object has an array of color buffer at-
tachment points, numbered zero through n, a depth buffer attachment point, and
a stencil buffer attachment point. In order to be used for rendering, a framebuffer
object must be complete, as described in section 4.4.4. Not all attachments of a
framebuffer object need to be populated.
     Each pixel in a color buffer consists of either a single unsigned integer color
index or up to four color components. The four color components are named R, G,
B, and A, in that order; color buffers are not required to have all four color com-
ponents. R, G, B, and A components may be represented as signed or unsigned
normalized fixed-point, floating-point, or signed or unsigned integer values; all
components must have the same representation. Each pixel in a depth buffer con-
sists of a single unsigned integer value in the format described in section 2.15.1 or
a floating-point value. Each pixel in a stencil buffer consists of a single unsigned
integer value. Each pixel in an accumulation buffer consists of up to four color
components. If an accumulation buffer is present, it must have at least as many
bitplanes per component as in the color buffers.
     The number of bitplanes in the accumulation, color, depth, and stencil buffers
is dependent on the currently bound framebuffer. For the default framebuffer, the
number of bitplanes is fixed. For framebuffer objects, the number of bitplanes
in a given logical buffer may change if the image attached to the corresponding
attachment point changes.
     The GL has two active framebuffers; the draw framebuffer is the destination
for rendering operations, and the read framebuffer is the source for readback op-
erations. The same framebuffer may be used for both drawing and reading. Sec-
tion 4.4.1 describes the mechanism for controlling framebuffer usage.
     The default framebuffer is initially used as the draw and read framebuffer 1 ,
and the initial state of all provided bitplanes is undefined. The format and encod-
ing of buffers in the draw and read framebuffers can be queried as described in
section 6.1.3.
   1
    The window system binding API may allow associating a GL context with two separate “default
framebuffers” provided by the window system as the draw and read framebuffers, but if so, both
default framebuffers are referred to by the name zero at their respective binding points.




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                           262




         Fragment
        (or sample)         Pixel                     Multisample           Alpha
                                        Scissor
             +            Ownership                    Fragment             Test
                                         Test
        Associated          Test                      Operations         (RGBA only)
            Data




                                       Occlusion      Depth Buffer         Stencil
                           Blending
                                        Query            Test               Test


                      Framebuffer                  Framebuffer       Framebuffer




                            SRGB                                          To
                                       Dithering         Logicop
                          Conversion                                  Framebuffer


                                                   Framebuffer




   Figure 4.1. Per-fragment operations.




4.1     Per-Fragment Operations
A fragment produced by rasterization with window coordinates of (xw , yw ) mod-
ifies the pixel in the framebuffer at that location based on a number of parame-
ters and conditions. We describe these modifications and tests, diagrammed in
figure 4.1, in the order in which they are performed. Figure 4.1 diagrams these
modifications and tests.

4.1.1    Pixel Ownership Test
The first test is to determine if the pixel at location (xw , yw ) in the framebuffer
is currently owned by the GL (more precisely, by this GL context). If it is not,
the window system decides the fate the incoming fragment. Possible results are
that the fragment is discarded or that some subset of the subsequent per-fragment
operations are applied to the fragment. This test allows the window system to
control the GL’s behavior, for instance, when a GL window is obscured.
    If the draw framebuffer is a framebuffer object (see section 4.2.1), the pixel
ownership test always passes, since the pixels of framebuffer objects are owned by
the GL, not the window system. If the draw framebuffer is the default framebuffer,


               OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                      263


the window system controls pixel ownership.

4.1.2    Scissor Test
The scissor test determines if (xw , yw ) lies within the scissor rectangle defined by
four values. These values are set with

        void Scissor( int left, int bottom, sizei width,
           sizei height );

If left ≤ xw < left + width and bottom ≤ yw < bottom + height, then the
scissor test passes. Otherwise, the test fails and the fragment is discarded. The
test is enabled or disabled using Enable or Disable using the constant SCISSOR_-
TEST. When disabled, it is as if the scissor test always passes. If either width or
height is less than zero, then the error INVALID_VALUE is generated. The state
required consists of four integer values and a bit indicating whether the test is
enabled or disabled. In the initial state, left = bottom = 0. width and height are
set to the width and height, respectively, of the window into which the GL is to
do its rendering. If the default framebuffer is bound but no default framebuffer is
associated with the GL context (see chapter 4), then width and height are initially
set to zero. Initially, the scissor test is disabled.

4.1.3    Multisample Fragment Operations
This step modifies fragment alpha and coverage values based on the val-
ues of SAMPLE_ALPHA_TO_COVERAGE, SAMPLE_ALPHA_TO_ONE, SAMPLE_-
COVERAGE, SAMPLE_COVERAGE_VALUE, and SAMPLE_COVERAGE_INVERT. No
changes to the fragment alpha or coverage values are made at this step if
MULTISAMPLE is disabled, or if the value of SAMPLE_BUFFERS is not one.
     SAMPLE_ALPHA_TO_COVERAGE, SAMPLE_ALPHA_TO_ONE, and SAMPLE_-
COVERAGE are enabled and disabled by calling Enable and Disable with cap spec-
ified as one of the three token values. All three values are queried by calling IsEn-
abled with cap set to the desired token value. If SAMPLE_ALPHA_TO_COVERAGE
is enabled and the color buffer has a fixed-point or floating-point format, a tempo-
rary coverage value is generated where each bit is determined by the alpha value at
the corresponding sample location. The temporary coverage value is then ANDed
with the fragment coverage value. Otherwise the fragment coverage value is un-
changed at this point. If multiple colors are written by a fragment shader, the alpha
value of fragment color zero is used to determine the temporary coverage value.
     No specific algorithm is required for converting the sample alpha values to a
temporary coverage value. It is intended that the number of 1’s in the temporary

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                      264


coverage be proportional to the set of alpha values for the fragment, with all 1’s
corresponding to the maximum of all alpha values, and all 0’s corresponding to
all alpha values being 0. The alpha values used to generate a coverage value are
clamped to the range [0, 1]. It is also intended that the algorithm be pseudo-random
in nature, to avoid image artifacts due to regular coverage sample locations. The
algorithm can and probably should be different at different pixel locations. If it
does differ, it should be defined relative to window, not screen, coordinates, so that
rendering results are invariant with respect to window position.
     Next, if SAMPLE_ALPHA_TO_ONE is enabled, each alpha value is replaced
by the maximum representable alpha value. Otherwise, the alpha values are not
changed.
     Finally, if SAMPLE_COVERAGE is enabled, the fragment coverage is ANDed
with another temporary coverage. This temporary coverage is generated in the
same manner as the one described above, but as a function of the value of
SAMPLE_COVERAGE_VALUE. The function need not be identical, but it must have
the same properties of proportionality and invariance. If SAMPLE_COVERAGE_-
INVERT is TRUE, the temporary coverage is inverted (all bit values are inverted)
before it is ANDed with the fragment coverage.
     The values of SAMPLE_COVERAGE_VALUE and SAMPLE_COVERAGE_INVERT
are specified by calling

        void SampleCoverage( clampf value, boolean invert );

with value set to the desired coverage value, and invert set to TRUE or FALSE.
value is clamped to [0,1] before being stored as SAMPLE_COVERAGE_VALUE.
SAMPLE_COVERAGE_VALUE is queried by calling GetFloatv with pname set to
SAMPLE_COVERAGE_VALUE. SAMPLE_COVERAGE_INVERT is queried by calling
GetBooleanv with pname set to SAMPLE_COVERAGE_INVERT.

4.1.4    Alpha Test
This step applies only in RGBA mode, and only if the color buffer has a fixed-point
or floating-point format. In color index mode, or if the color buffer has an integer
format, proceed to the next operation.
     The alpha test discards a fragment conditional on the outcome of a compari-
son between the incoming fragment’s alpha value and a constant value. If multiple
colors are written by a fragment shader, the alpha value of fragment color zero is
used to determine the result of the alpha test. The comparison is enabled or dis-
abled with the generic Enable and Disable commands using the symbolic constant
ALPHA_TEST. When disabled, it is as if the comparison always passes. The test is
controlled with

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                        265


        void AlphaFunc( enum func, clampf ref );

func is a symbolic constant indicating the alpha test function; ref is a reference
value. When performing the alpha test, the GL will convert the reference value to
the same representation as the the fragment’s alpha value (floating-point or fixed-
point). For fixed-point, the reference value is converted according to equation 2.4
using the bit-width rule for an A component described in section 2.1.5, and the
fragment’s alpha value is rounded to the nearest integer.
    The possible constants specifying the test function are NEVER, ALWAYS, LESS,
LEQUAL, EQUAL, GEQUAL, GREATER, or NOTEQUAL, meaning pass the fragment
never, always, if the fragment’s alpha value is less than, less than or equal to,
equal to, greater than or equal to, greater than, or not equal to the reference value,
respectively.
    The required state consists of the floating-point reference value, an eight-
valued integer indicating the comparison function, and a bit indicating if the com-
parison is enabled or disabled. The initial state is for the reference value to be 0
and the function to be ALWAYS. Initially, the alpha test is disabled.

4.1.5    Stencil Test
The stencil test conditionally discards a fragment based on the outcome of a com-
parison between the value in the stencil buffer at location (xw , yw ) and a reference
value. The test is enabled or disabled with the Enable and Disable commands,
using the symbolic constant STENCIL_TEST. When disabled, the stencil test and
associated modifications are not made, and the fragment is always passed.
    The stencil test is controlled with

        void StencilFunc( enum func, int ref, uint mask );
        void StencilFuncSeparate( enum face, enum func, int ref,
           uint mask );
        void StencilOp( enum sfail, enum dpfail, enum dppass );
        void StencilOpSeparate( enum face, enum sfail, enum dpfail,
           enum dppass );

    There are two sets of stencil-related state, the front stencil state set and the back
stencil state set. Stencil tests and writes use the front set of stencil state when pro-
cessing fragments rasterized from non-polygon primitives (points, lines, bitmaps,
and image rectangles) and front-facing polygon primitives while the back set of
stencil state is used when processing fragments rasterized from back-facing poly-
gon primitives. For the purposes of stencil testing, a primitive is still considered


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                       266


a polygon even if the polygon is to be rasterized as points or lines due to the cur-
rent polygon mode. Whether a polygon is front- or back-facing is determined in
the same manner used for two-sided lighting and face culling (see sections 2.13.1
and 3.6.1).
    StencilFuncSeparate and StencilOpSeparate take a face argument which can
be FRONT, BACK, or FRONT_AND_BACK and indicates which set of state is affected.
StencilFunc and StencilOp set front and back stencil state to identical values.
    StencilFunc and StencilFuncSeparate take three arguments that control
whether the stencil test passes or fails. ref is an integer reference value that is used
in the unsigned stencil comparison. Stencil comparison operations and queries of
ref clamp its value to the range [0, 2s − 1], where s is the number of bits in the
stencil buffer attached to the draw framebuffer. The s least significant bits of mask
are bitwise ANDed with both the reference and the stored stencil value, and the
resulting masked values are those that participate in the comparison controlled by
func. func is a symbolic constant that determines the stencil comparison function;
the eight symbolic constants are NEVER, ALWAYS, LESS, LEQUAL, EQUAL, GEQUAL,
GREATER, or NOTEQUAL. Accordingly, the stencil test passes never, always, and if
the masked reference value is less than, less than or equal to, equal to, greater than
or equal to, greater than, or not equal to the masked stored value in the stencil
buffer.
    StencilOp and StencilOpSeparate take three arguments that indicate what
happens to the stored stencil value if this or certain subsequent tests fail or pass.
sfail indicates what action is taken if the stencil test fails. The symbolic constants
are KEEP, ZERO, REPLACE, INCR, DECR, INVERT, INCR_WRAP, and DECR_WRAP.
These correspond to keeping the current value, setting to zero, replacing with the
reference value, incrementing with saturation, decrementing with saturation, bit-
wise inverting it, incrementing without saturation, and decrementing without satu-
ration.
    For purposes of increment and decrement, the stencil bits are considered as an
unsigned integer. Incrementing or decrementing with saturation clamps the stencil
value at 0 and the maximum representable value. Incrementing or decrementing
without saturation will wrap such that incrementing the maximum representable
value results in 0, and decrementing 0 results in the maximum representable value.
    The same symbolic values are given to indicate the stencil action if the depth
buffer test (see section 4.1.6) fails (dpfail), or if it passes (dppass).
    If the stencil test fails, the incoming fragment is discarded. The state required
consists of the most recent values passed to StencilFunc or StencilFuncSeparate
and to StencilOp or StencilOpSeparate, and a bit indicating whether stencil test-
ing is enabled or disabled. In the initial state, stenciling is disabled, the front and
back stencil reference value are both zero, the front and back stencil comparison

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                        267


functions are both ALWAYS, and the front and back stencil mask are both set to the
value 2s − 1, where s is greater than or equal to the number of bits in the deepest
stencil buffer supported by the GL implementation. Initially, all three front and
back stencil operations are KEEP.
    If there is no stencil buffer, no stencil modification can occur, and it is as if the
stencil tests always pass, regardless of any calls to StencilFunc.

4.1.6    Depth Buffer Test
The depth buffer test discards the incoming fragment if a depth comparison fails.
The comparison is enabled or disabled with the generic Enable and Disable com-
mands using the symbolic constant DEPTH_TEST. When disabled, the depth com-
parison and subsequent possible updates to the depth buffer value are bypassed and
the fragment is passed to the next operation. The stencil value, however, is modi-
fied as indicated below as if the depth buffer test passed. If enabled, the comparison
takes place and the depth buffer and stencil value may subsequently be modified.
    The comparison is specified with

        void DepthFunc( enum func );

This command takes a single symbolic constant: one of NEVER, ALWAYS, LESS,
LEQUAL, EQUAL, GREATER, GEQUAL, NOTEQUAL. Accordingly, the depth buffer
test passes never, always, if the incoming fragment’s zw value is less than, less
than or equal to, equal to, greater than, greater than or equal to, or not equal to
the depth value stored at the location given by the incoming fragment’s (xw , yw )
coordinates.
    If the depth buffer test fails, the incoming fragment is discarded. The stencil
value at the fragment’s (xw , yw ) coordinates is updated according to the function
currently in effect for depth buffer test failure. Otherwise, the fragment continues
to the next operation and the value of the depth buffer at the fragment’s (xw , yw )
location is set to the fragment’s zw value. In this case the stencil value is updated
according to the function currently in effect for depth buffer test success.
    The necessary state is an eight-valued integer and a single bit indicating
whether depth buffering is enabled or disabled. In the initial state the function
is LESS and the test is disabled.
    If there is no depth buffer, it is as if the depth buffer test always passes.

4.1.7    Occlusion Queries
Occlusion queries use query objects to track the number of fragments or samples
that pass the depth test. An occlusion query can be started and finished by calling

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                             268


BeginQuery and EndQuery, respectively, with a target of SAMPLES_PASSED.
     When an occlusion query is started, the samples-passed count maintained by
the GL is set to zero. When an occlusion query is active, the samples-passed
count is incremented for each fragment that passes the depth test. If the value
of SAMPLE_BUFFERS is 0, then the samples-passed count is incremented by 1 for
each fragment. If the value of SAMPLE_BUFFERS is 1, then the samples-passed
count is incremented by the number of samples whose coverage bit is set. How-
ever, implementations, at their discretion, may instead increase the samples-passed
count by the value of SAMPLES if any sample in the fragment is covered.
     When an occlusion query finishes and all fragments generated by commands
issued prior to EndQuery have been generated, the samples-passed count is written
to the corresponding query object as the query result value, and the query result for
that object is marked as available.
     If the samples-passed count overflows (exceeds the value 2n − 1, where n is
the number of bits in the samples-passed count), its value becomes undefined. It is
recommended, but not required, that implementations handle this overflow case by
saturating at 2n − 1 and incrementing no further.
     The necessary state is a single bit indicating whether an occlusion query is
active, the identifier of the currently active occlusion query, and a counter keeping
track of the number of samples that have passed.

4.1.8   Blending
Blending combines the incoming source fragment’s R, G, B, and A values with
the destination R, G, B, and A values stored in the framebuffer at the fragment’s
(xw , yw ) location.
     Source and destination values are combined according to the blend equation,
quadruplets of source and destination weighting factors determined by the blend
functions, and a constant blend color to obtain a new set of R, G, B, and A values,
as described below.
     If the color buffer is fixed-point, the components of the source and destination
values and blend factors are clamped to [0, 1] prior to evaluating the blend equation.
If the color buffer is floating-point, no clamping occurs. The resulting four values
are sent to the next operation.
     Blending applies only in RGBA mode; and only if the color buffer has a fixed-
point or floating-point format. In color index mode, or if the color buffer has an
integer format, proceed to the next operation.
     Blending is enabled or disabled for an individual draw buffer with the com-
mands



                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                    269


      void Enablei( enum target, uint index );
      void Disablei( enum target, uint index );

target is the symbolic constant BLEND and index is an integer i specifying the draw
buffer associated with the symbolic constant DRAW_BUFFERi. If the color buffer
associated with DRAW_BUFFERi is one of FRONT, BACK, LEFT, RIGHT, or FRONT_-
AND_BACK (specifying multiple color buffers), then the state enabled or disabled is
applicable for all of the buffers. Blending can be enabled or disabled for all draw
buffers using Enable or Disable with the symbolic constant BLEND. If blending
is disabled for a particular draw buffer, or if logical operation on color values is
enabled (section 4.1.11), proceed to the next operation.
    An INVALID_VALUE error is generated if index is greater than the value of
MAX_DRAW_BUFFERS minus one.
    If multiple fragment colors are being written to multiple buffers (see sec-
tion 4.2.1), blending is computed and applied separately for each fragment color
and the corresponding buffer.

Blend Equation
Blending is controlled by the blend equations, defined by the commands

      void BlendEquation( enum mode );
      void BlendEquationSeparate( enum modeRGB,
         enum modeAlpha );

BlendEquationSeparate argument modeRGB determines the RGB blend func-
tion while modeAlpha determines the alpha blend equation. BlendEquation ar-
gument mode determines both the RGB and alpha blend equations. modeRGB and
modeAlpha must each be one of FUNC_ADD, FUNC_SUBTRACT, FUNC_REVERSE_-
SUBTRACT, MIN, or MAX.
    Signed or unsigned normalized fixed-point destination (framebuffer) compo-
nents are represented as described in section 2.1.5.          Constant color compo-
nents, floating-point destination components, and source (fragment) components
are taken to be floating point values. If source components are represented in-
ternally by the GL as fixed-point values, they are also interpreted according to
section 2.1.5.
    Prior to blending, signed and unsigned normalized fixed-point color compo-
nents undergo an implied conversion to floating-point using equations 2.1 and 2.3,
respectively. This conversion must leave the values 0 and 1 invariant. Blending
computations are treated as if carried out in floating-point.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                      270


    If FRAMEBUFFER_SRGB is enabled and the value of FRAMEBUFFER_-
ATTACHMENT_COLOR_ENCODING for the framebuffer attachment corresponding
to the destination buffer is SRGB (see section 6.1.3), the R, G, and B destination
color values (after conversion from fixed-point to floating-point) are considered to
be encoded for the sRGB color space and hence must be linearized prior to their
use in blending. Each R, G, and B component is converted in the same fashion
described for sRGB texture components in section 3.9.16.
    If FRAMEBUFFER_SRGB is disabled or the value of FRAMEBUFFER_-
ATTACHMENT_COLOR_ENCODING is not SRGB, no linearization is performed.
    The resulting linearized R, G, and B and unmodified A values are recombined
as the destination color used in blending computations.
    Table 4.1 provides the corresponding per-component blend equations for each
mode, whether acting on RGB components for modeRGB or the alpha component
for modeAlpha.
    In the table, the s subscript on a color component abbreviation (R, G, B, or
A) refers to the source color component for an incoming fragment, the d subscript
on a color component abbreviation refers to the destination color component at
the corresponding framebuffer location, and the c subscript on a color component
abbreviation refers to the constant blend color component. A color component ab-
breviation without a subscript refers to the new color component resulting from
blending. Additionally, Sr , Sg , Sb , and Sa are the red, green, blue, and alpha com-
ponents of the source weighting factors determined by the source blend function,
and Dr , Dg , Db , and Da are the red, green, blue, and alpha components of the
destination weighting factors determined by the destination blend function. Blend
functions are described below.

Blend Functions
The weighting factors used by the blend equation are determined by the blend
functions. Blend functions are specified with the commands

      void BlendFuncSeparate( enum srcRGB, enum dstRGB,
         enum srcAlpha, enum dstAlpha );
      void BlendFunc( enum src, enum dst );

    BlendFuncSeparate arguments srcRGB and dstRGB determine the source and
destination RGB blend functions, respectively, while srcAlpha and dstAlpha deter-
mine the source and destination alpha blend functions. BlendFunc argument src
determines both RGB and alpha source functions, while dst determines both RGB
and alpha destination functions.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                   271


 Mode                            RGB Components              Alpha Component
 FUNC_ADD                        R = Rs ∗ Sr + Rd ∗ Dr       A = As ∗ Sa + Ad ∗ Da
                                 G = Gs ∗ S g + Gd ∗ D g
                                 B = Bs ∗ Sb + Bd ∗ Db
 FUNC_SUBTRACT                   R = Rs ∗ Sr − Rd ∗ Dr       A = As ∗ Sa − Ad ∗ Da
                                 G = Gs ∗ S g − Gd ∗ D g
                                 B = Bs ∗ Sb − Bd ∗ Db
 FUNC_REVERSE_SUBTRACT           R = Rd ∗ Dr − Rs ∗ Sr       A = Ad ∗ D a − As ∗ S a
                                 G = Gd ∗ Dg − Gs ∗ Sg
                                 B = Bd ∗ Db − Bs ∗ Sb
 MIN                             R = min(Rs , Rd )           A = min(As , Ad )
                                 G = min(Gs , Gd )
                                 B = min(Bs , Bd )
 MAX                             R = max(Rs , Rd )           A = max(As , Ad )
                                 G = max(Gs , Gd )
                                 B = max(Bs , Bd )

                   Table 4.1: RGB and alpha blend equations.


   The possible source and destination blend functions and their corresponding
computed blend factors are summarized in table 4.2.

Blend Color
The constant color Cc to be used in blending is specified with the command

       void BlendColor( clampf red, clampf green, clampf blue,
          clampf alpha );

    The constant color can be used in both the source and destination blending
functions
    The state required for blending is two integers for the RGB and alpha blend
equations, four integers indicating the source and destination RGB and alpha
blending functions, four floating-point values to store the RGBA constant blend
color, and a bit indicating whether blending is enabled or disabled for each of the
MAX_DRAW_BUFFERS draw buffers.
    The initial blend equations for RGB and alpha are both FUNC_ADD. The initial
blending functions are ONE for the source RGB and alpha functions and ZERO
for the destination RGB and alpha functions. The initial constant blend color is
(R, G, B, A) = (0, 0, 0, 0). Initially, blending is disabled for all draw buffers.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                    272




 Function                          RGB Blend Factors                    Alpha Blend Factor
                                   (Sr , Sg , Sb ) or (Dr , Dg , Db )   Sa or Da
 ZERO                              (0, 0, 0)                            0
 ONE                               (1, 1, 1)                            1
 SRC_COLOR                         (Rs , Gs , Bs )                      As
 ONE_MINUS_SRC_COLOR               (1, 1, 1) − (Rs , Gs , Bs )          1 − As
 DST_COLOR                         (Rd , Gd , Bd )                      Ad
 ONE_MINUS_DST_COLOR               (1, 1, 1) − (Rd , Gd , Bd )          1 − Ad
 SRC_ALPHA                         (As , As , As )                      As
 ONE_MINUS_SRC_ALPHA               (1, 1, 1) − (As , As , As )          1 − As
 DST_ALPHA                         (Ad , Ad , Ad )                      Ad
 ONE_MINUS_DST_ALPHA               (1, 1, 1) − (Ad , Ad , Ad )          1 − Ad
 CONSTANT_COLOR                    (Rc , Gc , Bc )                      Ac
 ONE_MINUS_CONSTANT_COLOR          (1, 1, 1) − (Rc , Gc , Bc )          1 − Ac
 CONSTANT_ALPHA                    (Ac , Ac , Ac )                      Ac
 ONE_MINUS_CONSTANT_ALPHA          (1, 1, 1) − (Ac , Ac , Ac )          1 − Ac
 SRC_ALPHA_SATURATE1               (f, f, f )2                          1

Table 4.2: RGB and ALPHA source and destination blending functions and the
corresponding blend factors. Addition and subtraction of triplets is performed
component-wise.
1 SRC_ALPHA_SATURATE is valid only for source RGB and alpha blending func-

tions.
2 f = min(A , 1 − A ).
            s       d




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                       273


    The value of the blend enable for draw buffer i can be queried by calling IsEn-
abledi with target BLEND and index i. The value of the blend enable for draw
buffer zero may also be queried by calling IsEnabled with value BLEND.
    Blending occurs once for each color buffer currently enabled for blending and
for writing (section 4.2.1) using each buffer’s color for Cd . If a color buffer has no
A value, then Ad is taken to be 1.

4.1.9    sRGB Conversion
If FRAMEBUFFER_SRGB is enabled and the value of FRAMEBUFFER_-
ATTACHMENT_COLOR_ENCODING for the framebuffer attachment corresponding
to the destination buffer is SRGB (see section 6.1.3), the R, G, and B values after
blending are converted into the non-linear sRGB color space by computing
                    
                    
                    
                      0.0,                     cl ≤ 0
                    
                    12.92c ,
                              l                 0 < cl < 0.0031308
               cs =           0.41666
                                                                              (4.1)
                    
                    
                      1.055cl        − 0.055, 0.0031308 ≤ cl < 1
                    
                    1.0,                       cl ≥ 1
where cl is the R, G, or B element and cs is the result (effectively converted into an
sRGB color space).
   If FRAMEBUFFER_SRGB is disabled or the value of FRAMEBUFFER_-
ATTACHMENT_COLOR_ENCODING is not SRGB, then

                                       cs = cl .
    The resulting cs values for R, G, and B, and the unmodified A form a new
RGBA color value. If the color buffer is fixed-point, each component is clamped to
the range [0, 1] and then converted to a fixed-point value using equation 2.4. The
resulting four values are sent to the subsequent dithering operation.

4.1.10    Dithering
Dithering selects between two representable color values or indices. A repre-
sentable value is a value that has an exact representation in the color buffer. In
RGBA mode dithering selects, for each color component, either the largest posi-
tive representable color value (for that particular color component) that is less than
or equal to the incoming color component value, c, or the smallest negative repre-
sentable color value that is greater than or equal to c. The selection may depend on
the xw and yw coordinates of the pixel, as well as on the exact value of c. If one of
the two values does not exist, then the selection defaults to the other value.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                       274


     In color index mode dithering selects either the largest representable index that
is less than or equal to the incoming color value, c, or the smallest representable
index that is greater than or equal to c. If one of the two indices does not exist, then
the selection defaults to the other value.
     Many dithering selection algorithms are possible, but an individual selection
must depend only on the incoming color index or component value and the frag-
ment’s x and y window coordinates. If dithering is disabled, then each incoming
color component c is replaced with the largest positive representable color value
(for that particular component) that is less than or equal to c, or by the smallest
negative representable value, if no representable value is less than or equal to c. A
color index is rounded to the nearest representable index value.
     Dithering is enabled with Enable and disabled with Disable using the symbolic
constant DITHER. The state required is thus a single bit. Initially, dithering is
enabled.

4.1.11    Logical Operation
Finally, a logical operation is applied between the incoming fragment’s color or
index values and the color or index values stored at the corresponding location in
the framebuffer. The result replaces the values in the framebuffer at the fragment’s
(xw , yw ) coordinates. If the selected draw buffers refer to the same framebuffer-
attachable image more than once, then the values stored in that image are unde-
fined.
    The logical operation on color indices is enabled or disabled with Enable or
Disable using the symbolic constant INDEX_LOGIC_OP. (For compatibility with
GL version 1.0, the symbolic constant LOGIC_OP may also be used.) The logical
operation on color values is enabled or disabled with Enable or Disable using
the symbolic constant COLOR_LOGIC_OP. If the logical operation is enabled for
color values, it is as if blending were disabled, regardless of the value of BLEND. If
multiple fragment colors are being written to multiple buffers (see section 4.2.1),
the logical operation is computed and applied separately for each fragment color
and the corresponding buffer.
    Logical operation has no effect on a floating-point destination color buffer.
However, if logical operation is enabled, blending is still disabled.
    The logical operation is selected by

      void LogicOp( enum op );

op is a symbolic constant; the possible constants and corresponding operations are
enumerated in table 4.3. In this table, s is the value of the incoming fragment and d


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.1. PER-FRAGMENT OPERATIONS                                                      275


                          Argument value        Operation
                          CLEAR                 0
                          AND                   s∧d
                          AND_REVERSE           s ∧ ¬d
                          COPY                  s
                          AND_INVERTED          ¬s ∧ d
                          NOOP                  d
                          XOR                   s xor d
                          OR                    s∨d
                          NOR                   ¬(s ∨ d)
                          EQUIV                 ¬(s xor d)
                          INVERT                ¬d
                          OR_REVERSE            s ∨ ¬d
                          COPY_INVERTED         ¬s
                          OR_INVERTED           ¬s ∨ d
                          NAND                  ¬(s ∧ d)
                          SET                   all 1’s

      Table 4.3: Arguments to LogicOp and their corresponding operations.



is the value stored in the framebuffer. The numeric values assigned to the symbolic
constants are the same as those assigned to the corresponding symbolic values in
the X window system.
     Logical operations are performed independently for each color index buffer
that is selected for writing, or for each red, green, blue, and alpha value of each
color buffer that is selected for writing. The required state is an integer indicating
the logical operation, and two bits indicating whether the logical operation is en-
abled or disabled. The initial state is for the logic operation to be given by COPY,
and to be disabled.

4.1.12    Additional Multisample Fragment Operations
If the DrawBuffer mode is NONE, no change is made to any multisample or color
buffer. Otherwise, fragment processing is as described below.
     If MULTISAMPLE is enabled, and the value of SAMPLE_BUFFERS is one, the
alpha test, stencil test, depth test, blending, dithering, and logical operations are
performed for each pixel sample, rather than just once for each fragment. Failure
of the alpha, stencil, or depth test results in termination of the processing of that
sample, rather than discarding of the fragment. All operations are performed on the


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                        276


color, depth, and stencil values stored in the multisample buffer (to be described
in a following section). The contents of the color buffers are not modified at this
point.
     Stencil, depth, blending, dithering, and logical operations are performed for
a pixel sample only if that sample’s fragment coverage bit is a value of 1. If the
corresponding coverage bit is 0, no operations are performed for that sample.
     If MULTISAMPLE is disabled, and the value of SAMPLE_BUFFERS is one, the
fragment may be treated exactly as described above, with optimization possible
because the fragment coverage must be set to full coverage. Further optimization is
allowed, however. An implementation may choose to identify a centermost sample,
and to perform alpha, stencil, and depth tests on only that sample. Regardless of
the outcome of the stencil test, all multisample buffer stencil sample values are set
to the appropriate new stencil value. If the depth test passes, all multisample buffer
depth sample values are set to the depth of the fragment’s centermost sample’s
depth value, and all multisample buffer color sample values are set to the color
value of the incoming fragment. Otherwise, no change is made to any multisample
buffer color or depth value.
     After all operations have been completed on the multisample buffer, the sample
values for each color in the multisample buffer are combined to produce a single
color value, and that value is written into the corresponding color buffers selected
by DrawBuffer or DrawBuffers. An implementation may defer the writing of the
color buffers until a later time, but the state of the framebuffer must behave as if
the color buffers were updated as each fragment was processed. The method of
combination is not specified. If the framebuffer contains sRGB values, then it
is recommended that the an average of sample values is computed in a linearized
space, as for blending (see section 4.1.8). Otherwise, a simple average computed
independently for each color component is recommended.


4.2     Whole Framebuffer Operations
The preceding sections described the operations that occur as individual fragments
are sent to the framebuffer. This section describes operations that control or affect
the whole framebuffer.

4.2.1   Selecting a Buffer for Writing
The first such operation is controlling the color buffers into which each of the
fragment color values is written. This is accomplished with either DrawBuffer or
DrawBuffers.


                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                  277


    The command

      void DrawBuffer( enum buf );

defines the set of color buffers to which fragment color zero is written. buf
must be one of the values from tables 4.4 or 4.5. In addition, acceptable val-
ues for buf depend on whether the GL is using the default framebuffer (i.e.,
DRAW_FRAMEBUFFER_BINDING is zero), or a framebuffer object (i.e., DRAW_-
FRAMEBUFFER_BINDING is non-zero). In the initial state, the GL is bound to
the default framebuffer. For more information about framebuffer objects, see sec-
tion 4.4.
     If the GL is bound to the default framebuffer, then buf must be one of the values
listed in table 4.4, which summarizes the constants and the buffers they indicate.
In this case, buf is a symbolic constant specifying zero, one, two, or four buffers
for writing. These constants refer to the four potentially visible buffers (front left,
front right, back left, and back right), and to the auxiliary buffers. Arguments
other than AUXi that omit reference to LEFT or RIGHT refer to both left and right
buffers. Arguments other than AUXi that omit reference to FRONT or BACK refer
to both front and back buffers. AUXi enables drawing only to auxiliary buffer i.
Each AUXi adheres to AUXi = AUX0 + i, and i must be in the range 0 to the value of
AUX_BUFFERS minus one.
     If the GL is bound to a framebuffer object, buf must be one of the values listed
in table 4.5, which summarizes the constants and the buffers they indicate. In
this case, buf is a symbolic constant specifying a single color buffer for writing.
Specifying COLOR_ATTACHMENTi enables drawing only to the image attached to
the framebuffer at COLOR_ATTACHMENTi. Each COLOR_ATTACHMENTi adheres to
COLOR_ATTACHMENTi = COLOR_ATTACHMENT0 + i. The intial value of DRAW_-
BUFFER for framebuffer objects is COLOR_ATTACHMENT0.
     If the GL is bound to the default framebuffer and DrawBuffer is supplied with
a constant (other than NONE) that does not indicate any of the color buffers allocated
to the GL context, the error INVALID_OPERATION results.
     If the GL is bound to a framebuffer object and buf is one of the constants
from table 4.4, then the error INVALID_OPERATION results. If buf is COLOR_-
ATTACHMENTm and m is greater than or equal to the value of MAX_COLOR_-
ATTACHMENTS, then the error INVALID_VALUE results.
     If DrawBuffer is supplied with a constant that is legal for neither the default
framebuffer nor a framebuffer object, then the error INVALID_ENUM results.
     DrawBuffer will set the draw buffer for fragment colors other than zero to
NONE.
     The command


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                         278




          Symbolic            Front    Front   Back   Back    Aux
          Constant            Left     Right   Left   Right    i
          NONE
          FRONT_LEFT           •
          FRONT_RIGHT                    •
          BACK_LEFT                              •
          BACK_RIGHT                                    •
          FRONT                •         •
          BACK                                   •      •
          LEFT                 •                 •
          RIGHT                          •              •
          FRONT_AND_BACK       •         •       •      •
          AUXi                                                  •

Table 4.4: Arguments to DrawBuffer(s) and ReadBuffer when the context is
bound to a default framebuffer, and the buffers they indicate.




 Symbolic Constant                    Meaning
 NONE                                 No buffer
 COLOR_ATTACHMENTi (see caption)      Output fragment color to image attached
                                      at color attachment point i

Table 4.5: Arguments to DrawBuffer(s) and ReadBuffer when the context is
bound to a framebuffer object, and the buffers they indicate. i in COLOR_-
ATTACHMENTi may range from zero to the value of MAX_COLOR_ATTACHMENTS
- 1.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                 279


              Symbolic          Front    Front    Back    Back     Aux
              Constant          Left     Right    Left    Right     i
              NONE
              FRONT_LEFT           •
              FRONT_RIGHT                  •
              BACK_LEFT                             •
              BACK_RIGHT                                    •
              AUXi                                                  •

Table 4.6: Arguments to DrawBuffers when the context is bound to the default
framebuffer, and the buffers they indicate.



      void DrawBuffers( sizei n, const enum *bufs );

defines the draw buffers to which all fragment colors are written. n specifies the
number of buffers in bufs. bufs is a pointer to an array of symbolic constants
specifying the buffer to which each fragment color is written.
     Each buffer listed in bufs must be one of the values from tables 4.5 or 4.6. Oth-
erwise, an INVALID_ENUM error is generated. Further, acceptable values for the
constants in bufs depend on whether the GL is using the default framebuffer (i.e.,
DRAW_FRAMEBUFFER_BINDING is zero), or a framebuffer object (i.e., DRAW_-
FRAMEBUFFER_BINDING is non-zero). For more information about framebuffer
objects, see section 4.4.
     If the GL is bound to the default framebuffer, then each of the constants must
be one of the values listed in table 4.6.
     If the GL is bound to an framebuffer object, then each of the constants must be
one of the values listed in table 4.5.
     In both cases, the draw buffers being defined correspond in order to the re-
spective fragment colors. The draw buffer for fragment colors beyond n is set to
NONE.
     The maximum number of draw buffers is implementation-dependent. The
number of draw buffers supported can be queried by calling GetIntegerv with the
symbolic constant MAX_DRAW_BUFFERS. An INVALID_VALUE error is generated
if n is greater than MAX_DRAW_BUFFERS.
     Except for NONE, a buffer may not appear more then once in the array pointed
to by bufs. Specifying a buffer more then once will result in the error INVALID_-
OPERATION.
     If fixed-function fragment shading is being performed, DrawBuffers specifies
a set of draw buffers into which the fragment color is written.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                        280


     If a fragment shader writes to gl_FragColor, DrawBuffers specifies a set
of draw buffers into which the single fragment color defined by gl_FragColor
is written. If a fragment shader writes to gl_FragData, or a user-defined vary-
ing out variable, DrawBuffers specifies a set of draw buffers into which each of
the multiple output colors defined by these variables are separately written. If a
fragment shader writes to none of gl_FragColor, gl_FragData, nor any user-
defined varying out variables, the values of the fragment colors following shader
execution are undefined, and may differ for each fragment color.
     For both the default framebuffer and framebuffer objects, the constants FRONT,
BACK, LEFT, RIGHT, and FRONT_AND_BACK are not valid in the bufs array passed
to DrawBuffers, and will result in the error INVALID_OPERATION. This restric-
tion is because these constants may themselves refer to multiple buffers, as shown
in table 4.4.
     If the GL is bound to the default framebuffer and DrawBuffers is supplied with
a constant (other than NONE) that does not indicate any of the color buffers allocated
to the GL context by the window system, the error INVALID_OPERATION will be
generated.
     If the GL is bound to a framebuffer object and DrawBuffers is supplied with
a constant from table 4.6, or COLOR_ATTACHMENTm where m is greater than
or equal to the value of MAX_COLOR_ATTACHMENTS, then the error INVALID_-
OPERATION results.
     Indicating a buffer or buffers using DrawBuffer or DrawBuffers causes sub-
sequent pixel color value writes to affect the indicated buffers.
     Specifying NONE as the draw buffer for a fragment color will inhibit that frag-
ment color from being written to any buffer.
     Monoscopic contexts include only left buffers, while stereoscopic contexts in-
clude both left and right buffers. Likewise, single buffered contexts include only
front buffers, while double buffered contexts include both front and back buffers.
The type of context is selected at GL initialization.
     The state required to handle color buffer selection for each framebuffer is an
integer for each supported fragment color. For the default framebuffer, in the initial
state the draw buffer for fragment color zero is BACK if there is a back buffer;
FRONT if there is no back buffer; and NONE if no default framebuffer is associated
with the context. For framebuffer objects, in the initial state the draw buffer for
fragment color zero is COLOR_ATTACHMENT0. For both the default framebuffer
and framebuffer objects, the initial state of draw buffers for fragment colors other
then zero is NONE.
     The value of the draw buffer selected for fragment color i can be queried by
calling GetIntegerv with the symbolic constant DRAW_BUFFERi. DRAW_BUFFER
is equivalent to DRAW_BUFFER0.

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                          281


4.2.2    Fine Control of Buffer Updates
Writing of bits to each of the logical framebuffers after all per-fragment operations
have been performed may be masked. The commands

        void IndexMask( uint mask );
        void ColorMask( boolean r, boolean g, boolean b,
           boolean a );
        void ColorMaski( uint buf, boolean r, boolean g,
           boolean b, boolean a );

control writes to the active draw buffers.
     The least significant n bits of mask, where n is the number of bits in a color
index buffer, specify a mask. Where a 1 appears in this mask, the corresponding
bit in the color index buffer (or buffers) is written; where a 0 appears, the bit is not
written. This mask applies only in color index mode.
     In RGBA mode, ColorMask and ColorMaski are used to mask the writing of
R, G, B and A values to the draw buffer or buffers. ColorMaski sets the mask
for a particular draw buffer. The mask for DRAW_BUFFERi is modified by passing
i as the parameter buf. r, g, b, and a indicate whether R, G, B, or A values, re-
spectively, are written or not (a value of TRUE means that the corresponding value
is written). The mask specified by r, g, b, and a is applied to the color buffer as-
sociated with DRAW_BUFFERi. If DRAW_BUFFERi is one of FRONT, BACK, LEFT,
RIGHT, or FRONT_AND_BACK (specifying multiple color buffers) then the mask is
applied to all of the buffers.
     ColorMask sets the mask for all draw buffers to the same values as specified
by r, g, b, and a.
     An INVALID_VALUE error is generated if index is greater than the value of
MAX_DRAW_BUFFERS minus one.
     In the initial state, all bits (in color index mode) and all color values (in RGBA
mode) are enabled for writing for all draw buffers.
     The value of the color writemask for draw buffer i can be queried by calling
GetBooleani v with target COLOR_WRITEMASK and index i. The value of the color
writemask for draw buffer zero may also be queried by calling GetBooleanv with
value COLOR_WRITEMASK.
     The depth buffer can be enabled or disabled for writing zw values using

        void DepthMask( boolean mask );

If mask is non-zero, the depth buffer is enabled for writing; otherwise, it is disabled.
In the initial state, the depth buffer is enabled for writing.
    The commands

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                           282


        void StencilMask( uint mask );
        void StencilMaskSeparate( enum face, uint mask );

control the writing of particular bits into the stencil planes.
     The least significant s bits of mask, where s is the number of bits in the stencil
buffer, specify an integer mask. Where a 1 appears in this mask, the corresponding
bit in the stencil buffer is written; where a 0 appears, the bit is not written. The face
parameter of StencilMaskSeparate can be FRONT, BACK, or FRONT_AND_BACK
and indicates whether the front or back stencil mask state is affected. StencilMask
sets both front and back stencil mask state to identical values.
     Fragments generated by front-facing primitives use the front mask and frag-
ments generated by back-facing primitives use the back mask (see section 4.1.5).
The clear operation always uses the front stencil write mask when clearing the
stencil buffer.
     The state required for the various masking operations is an integer for color
indices, two integers for the front and back stencil values, and a bit for depth values.
A set of four bits is also required indicating which color components of an RGBA
value should be written. In the initial state, the integer masks are all ones, as are
the bits controlling depth value and RGBA component writing.

Fine Control of Multisample Buffer Updates
When the value of SAMPLE_BUFFERS is one, ColorMask, DepthMask, and Sten-
cilMask or StencilMaskSeparate control the modification of values in the multi-
sample buffer. The color mask has no effect on modifications to the color buffers.
If the color mask is entirely disabled, the color sample values must still be com-
bined (as described above) and the result used to replace the color values of the
buffers enabled by DrawBuffer.

4.2.3    Clearing the Buffers
The GL provides a means for setting portions of every pixel in a particular buffer
to the same value. The argument to

        void Clear( bitfield buf );

is the bitwise OR of a number of values indicating which buffers are to be cleared.
The values are COLOR_BUFFER_BIT, ACCUM_BUFFER_BIT, DEPTH_BUFFER_-
BIT, STENCIL_BUFFER_BIT, and indicating the buffers currently enabled for
color writing, the accumulation buffer, the depth buffer, and the stencil buffer (see
below), respectively. The value to which each buffer is cleared depends on the

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                  283


setting of the clear value for that buffer. If the mask is not a bitwise OR of the
specified values, then the error INVALID_VALUE is generated.

      void ClearColor( clampf r, clampf g, clampf b,
         clampf a );

sets the clear value for fixed- and floating-point color buffers in RGBA mode. The
specified components are stored as floating-point values.
    The command

      void ClearIndex( float index );

sets the clear color index. index is converted to a fixed-point value with unspecified
precision to the left of the binary point; the integer part of this value is then masked
with 2m − 1, where m is the number of bits in a color index value stored in the
framebuffer.
    The command

      void ClearDepth( clampd d );

sets the depth value used when clearing the depth buffer. d is clamped to the
range [0, 1]. When clearing a fixed-point depth buffer, d is converted to fixed-point
according to the rules for a window z value given in section 2.15.1. No conversion
is applied when clearing a floating-point depth buffer.
    The command

      void ClearStencil( int s );

takes a single integer argument that is the value to which to clear the stencil buffer.
s is masked to the number of bitplanes in the stencil buffer.
     The command

      void ClearAccum( float r, float g, float b, float a );

takes four floating-point arguments that are the values, in order, to which to set the
R, G, B, and A values of the accumulation buffer (see the next section). These
values are clamped to the range [−1, 1] when they are specified.
    When Clear is called, the only per-fragment operations that are applied (if
enabled) are the pixel ownership test, the scissor test, and dithering. The masking
operations described in section 4.2.2 are also applied. If a buffer is not present,
then a Clear directed at that buffer has no effect. Unsigned normalized fixed-
point and signed normalized fixed-point RGBA color buffers are cleared to color

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                  284


values derived by clamping each component of the clear color to the range [0, 1]
or [−1, 1] respectively, then converting to fixed-point using equations 2.4 or 2.6,
respectively. The result of clearing integer color buffers is undefined.
    The state required for clearing is a clear value for each of the color buffer, the
accumulation buffer, the depth buffer, and the stencil buffer. Initially, the RGBA
color clear value is (0, 0, 0, 0), the accumulation buffer clear value is (0, 0, 0, 0),
the clear color index is 0, the depth buffer clear value is 1.0, and the stencil buffer
clear index is 0.
    Individual buffers of the currently bound draw framebuffer may be cleared with
the command

      void ClearBuffer{if ui}v( enum buffer, int drawbuffer,
         const T *value );

where buffer and drawbuffer identify a buffer to clear, and value specifies the value
or values to clear it to.
    If buffer is COLOR, a particular draw buffer DRAW_BUFFERi is specified by
passing i as the parameter drawbuffer, and value points to a four-element vec-
tor specifying the R, G, B, and A color to clear that draw buffer to. If the draw
buffer is one of FRONT, BACK, LEFT, RIGHT, or FRONT_AND_BACK, identifying
multiple buffers, each selected buffer is cleared to the same value. The Clear-
Bufferfv, ClearBufferiv, and ClearBufferuiv commands should be used to clear
fixed- and floating-point, signed integer, and unsigned integer color buffers respec-
tively. Clamping and conversion for fixed-point color buffers are performed in the
same fashion as ClearColor.
    If buffer is DEPTH, drawbuffer must be zero, and value points to the single
depth value to clear the depth buffer to. Clamping and type conversion for fixed-
point depth buffers are performed in the same fashion as ClearDepth. Only Clear-
Bufferfv should be used to clear depth buffers.
    If buffer is STENCIL, drawbuffer must be zero, and value points to the single
stencil value to clear the stencil buffer to. Masking and type conversion are per-
formed in the same fashion as ClearStencil. Only ClearBufferiv should be used
to clear stencil buffers.
    The command

      void ClearBufferfi( enum buffer, int drawbuffer,
         float depth, int stencil );

clears both depth and stencil buffers of the currently bound draw framebuffer.
buffer must be DEPTH_STENCIL and drawbuffer must be zero. depth and sten-
cil are the values to clear the depth and stencil buffers to, respectively. Clamping

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                285


and type conversion of depth for fixed-point depth buffers is performed in the same
fashion as ClearDepth. Masking of stencil for stencil buffers is performed in the
same fashion as ClearStencil. ClearBufferfi is equivalent to clearing the depth
and stencil buffers separately, but may be faster when a buffer of internal format
DEPTH_STENCIL is being cleared.
    The result of ClearBuffer is undefined if no conversion between the type of
the specified value and the type of the buffer being cleared is defined (for example,
if ClearBufferiv is called for a fixed- or floating-point buffer, or if ClearBufferfv
is called for a signed or unsigned integer buffer). This is not an error.
    When ClearBuffer is called, the same per-fragment and masking operations
defined for Clear are applied.
Errors
    ClearBuffer{if ui}v generates an INVALID_ENUM error if buffer is not COLOR,
DEPTH, or STENCIL. ClearBufferfi generates an INVALID_ENUM error if buffer is
not DEPTH_STENCIL.
    ClearBuffer generates an INVALID_VALUE error if buffer is COLOR and draw-
buffer is less than zero, or greater than the value of MAX_DRAW_BUFFERS minus
one; or if buffer is DEPTH, STENCIL, or DEPTH_STENCIL and drawbuffer is not
zero.
    ClearBuffer generates an INVALID_OPERATION error if buffer is COLOR and
the GL is in color index mode.

Clearing the Multisample Buffer
The color samples of the multisample buffer are cleared when one or more color
buffers are cleared, as specified by the Clear mask bit COLOR_BUFFER_BIT and
the DrawBuffer mode. If the DrawBuffer mode is NONE, the color samples of the
multisample buffer cannot be cleared using Clear.
     If the Clear mask bits DEPTH_BUFFER_BIT or STENCIL_BUFFER_BIT are
set, then the corresponding depth or stencil samples, respectively, are cleared.
     The ClearBuffer commands also clear color, depth, or stencil samples of mul-
tisample buffers corresponding to the specified buffer.

4.2.4    The Accumulation Buffer
Each portion of a pixel in the accumulation buffer consists of four values: one for
each of R, G, B, and A. The accumulation buffer is controlled exclusively through
the use of

        void Accum( enum op, float value );


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.2. WHOLE FRAMEBUFFER OPERATIONS                                                  286


(except for clearing it). op is a symbolic constant indicating an accumulation buffer
operation, and value is a floating-point value to be used in that operation. The
possible operations are ACCUM, LOAD, RETURN, MULT, and ADD.
    When the scissor test is enabled (section 4.1.2), then only those pixels within
the current scissor box are updated by any Accum operation; otherwise, all pixels
in the window are updated. The accumulation buffer operations apply identically
to every affected pixel, so we describe the effect of each operation on an individ-
ual pixel. Accumulation buffer values are taken to be signed values in the range
[−1, 1]. Using ACCUM obtains R, G, B, and A components from the buffer cur-
rently selected for reading (section 4.3.2). If the color buffer is fixed-point, each
component is considered as an unsigned normalized value in the range [0, 1] and is
converted to floating-point using equation 2.1. Each result is then multiplied by
value. The results of this multiplication are then added to the corresponding color
component currently in the accumulation buffer, and the resulting color value re-
places the current accumulation buffer color value.
    The LOAD operation has the same effect as ACCUM, but the computed values
replace the corresponding accumulation buffer components rather than being added
to them.
    The RETURN operation takes each color value from the accumulation buffer,
multiplies each of the R, G, B, and A components by value. If fragment color
clamping is enabled, the results are then clamped to the range [0, 1]. The result-
ing color value is placed in the buffers currently enabled for color writing as if
it were a fragment produced from rasterization, except that the only per-fragment
operations that are applied (if enabled) are the pixel ownership test, the scissor test
(section 4.1.2), and dithering (section 4.1.10). Color masking (section 4.2.2) is also
applied.
    The MULT operation multiplies each R, G, B, and A in the accumulation buffer
by value and then returns the scaled color components to their corresponding ac-
cumulation buffer locations. ADD is the same as MULT except that value is added to
each of the color components.
    The color components operated on by Accum must be clamped only if the
operation is RETURN. In this case, a value sent to the enabled color buffers is first
clamped to [0, 1]. Otherwise, results are undefined if the result of an operation on
a color component is out of the range [−1, 1].
    If there is no accumulation buffer; if the DRAW_FRAMEBUFFER and READ_-
FRAMEBUFFER bindings (see section 4.4.4) do not refer to the same object; or if
the GL is in color index mode, Accum generates the error INVALID_OPERATION.
    No state (beyond the accumulation buffer itself) is required for accumulation
buffering.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                         287


4.3     Drawing, Reading, and Copying Pixels
   Pixels may be written to the framebuffer using DrawPixels. Pixels may be read
from the framebuffer using ReadPixels. CopyPixels and BlitFramebuffer can be
used to copy a block of pixels from one portion of the framebuffer to another.
4.3.1    Writing to the Stencil or Depth/Stencil Buffers
The operation of DrawPixels was described in section 3.7.5, except if the format
argument was STENCIL_INDEX or DEPTH_STENCIL. In this case, all operations
described for DrawPixels take place, but window (x, y) coordinates, each with
the corresponding stencil index, or depth value and stencil index, are produced in
lieu of fragments. Each coordinate-data pair is sent directly to the per-fragment
operations, bypassing the texture, fog, and antialiasing application stages of raster-
ization. Each pair is then treated as a fragment for purposes of the pixel ownership
and scissor tests; all other per-fragment operations are bypassed. Finally, each
stencil index is written to its indicated location in the framebuffer, subject to the
current front stencil mask (set with StencilMask or StencilMaskSeparate). If a
depth component is present, and the setting of DepthMask is not FALSE, it is also
written to the framebuffer; the setting of DepthFunc is ignored.
    The error INVALID_OPERATION results if the format argument is STENCIL_-
INDEX and there is no stencil buffer, or if format is DEPTH_STENCIL and there is
not both a depth buffer and a stencil buffer.

4.3.2    Reading Pixels
The method for reading pixels from the framebuffer and placing them in pixel pack
buffer or client memory is diagrammed in figure 4.2. We describe the stages of the
pixel reading process in the order in which they occur.
    Initially, zero is bound for the PIXEL_PACK_BUFFER, indicating that image
read and query commands such as ReadPixels return pixel results into client mem-
ory pointer parameters. However, if a non-zero buffer object is bound as the current
pixel pack buffer, then the pointer parameter is treated as an offset into the desig-
nated buffer object.
    Pixels are read using

        void ReadPixels( int x, int y, sizei width, sizei height,
           enum format, enum type, void *data );

The arguments after x and y to ReadPixels are described in section 3.7.4. The pixel
storage modes that apply to ReadPixels and other commands that query images
(see section 6.1) are summarized in table 4.7.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                                                                                            288



        RGBA pixel                                                                color index pixel
          data in                                                                      data in

                                      convert
                                      to float
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                                   




                                   scale                             
                                                                        Pixel Transfer
                                                                                                                         




                                                                                                                          shift
                                                                                                                                                  




                              




                                  and bias
                                                                     
                                                                         Operations
                                                                                                                     




                                                                                                                        and offset
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                             RGBA to RGBA                                index to RGBA                              index to index
                                lookup                                       lookup                                    lookup
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                              




                                 color table
                                                                                                                                                  




                                   




                                   lookup
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                                         




                              convolution
                                                                                        




                                                                             color table
                                                                                                         




                                                                                                           post
                                                                                                                                                  




                          




                             scale and bias
                                                                               




                                                                               lookup
                                                                                                    




                                                                                                       color matrix
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




        post                  




                                 color table
                                                                          




                                                                             histogram
                                                                                                                                                  




     convolution                   




                                   lookup
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                              color matrix                                        minmax
                             scale and bias
                                                                                                                                                  




                                                                                                                                                  




                                                                                                                                                  




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡




                                 convert
                                  ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡




                                                                        Pixel Storage
                                                                         ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡
                                 RGB to L
                                  ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡




                                                                         Operations
                                                                         ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡




                                       clamp
                                        ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡




                                                                                                                            mask to
                                                                                                                             ¡   ¡   ¡   ¡   ¡   ¡




                                      to [0,1]                                                                              (2n − 1)
                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡




                                                                                   pack
                                                                                   ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                ¡    ¡   ¡   ¡    ¡     ¡   ¡   ¡   ¡   ¡   ¡   ¡   ¡    ¡    ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡    ¡   ¡   ¡   ¡   ¡   ¡




                        byte, short, int, or float pixel
                     data stream (index or component)




  Figure 4.2. Operation of ReadPixels. Operations in dashed boxes may be enabled
  or disabled, except in the case of ”convert RGB to L”, which is only applied when
  reading color data in luminosity formats. RGBA and color index pixel paths are
  shown; depth and stencil pixel paths are not shown.
           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                         289


        Parameter Name               Type      Initial Value   Valid Range
        PACK_SWAP_BYTES             boolean       FALSE        TRUE/FALSE
        PACK_LSB_FIRST              boolean       FALSE        TRUE/FALSE
        PACK_ROW_LENGTH             integer          0           [0, ∞)
        PACK_SKIP_ROWS              integer          0           [0, ∞)
        PACK_SKIP_PIXELS            integer          0           [0, ∞)
        PACK_ALIGNMENT              integer          4           1,2,4,8
        PACK_IMAGE_HEIGHT           integer          0           [0, ∞)
        PACK_SKIP_IMAGES            integer          0           [0, ∞)

Table 4.7: PixelStore parameters pertaining to ReadPixels, GetColorTable, Get-
ConvolutionFilter, GetSeparableFilter, GetHistogram, GetMinmax, GetPoly-
gonStipple, and GetTexImage.



    ReadPixels         generates     an       INVALID_OPERATION        error
if READ_FRAMEBUFFER_BINDING (see section 4.4) is non-zero, the read frame-
buffer is framebuffer complete, and the value of SAMPLE_BUFFERS for the read
framebuffer is greater than zero.

Obtaining Pixels from the Framebuffer
If the format is DEPTH_COMPONENT, then values are obtained from the depth buffer.
If there is no depth buffer, the error INVALID_OPERATION occurs.
     If there is a multisample buffer (the value of SAMPLE_BUFFERS is one), then
values are obtained from the depth samples in this buffer. It is recommended that
the depth value of the centermost sample be used, though implementations may
choose any function of the depth sample values at each pixel.
     If the format is DEPTH_STENCIL, then values are taken from both the depth
buffer and the stencil buffer. If there is no depth buffer or if there is no stencil
buffer, then the error INVALID_OPERATION occurs. If the type parameter is not
UNSIGNED_INT_24_8 or FLOAT_32_UNSIGNED_INT_24_8_REV, then the error
INVALID_ENUM occurs.
     If there is a multisample buffer, then values are obtained from the depth and
stencil samples in this buffer. It is recommended that the depth and stencil values of
the centermost sample be used, though implementations may choose any function
of the depth and stencil sample values at each pixel.
     If the format is STENCIL_INDEX, then values are taken from the stencil buffer;
again, if there is no stencil buffer, the error INVALID_OPERATION occurs.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                       290


    If there is a multisample buffer, then values are obtained from the stencil sam-
ples in this buffer. It is recommended that the stencil value of the centermost sam-
ple be used, though implementations may choose any function of the stencil sample
values at each pixel.
    For all other formats, the read buffer from which values are obtained is one of
the color buffers; the selection of color buffer is controlled with ReadBuffer.
    The command

      void ReadBuffer( enum src );

takes a symbolic constant as argument. src must be one of the values from ta-
bles 4.4 or 4.5. Otherwise, an INVALID_ENUM error is generated. Further, the
acceptable values for src depend on whether the GL is using the default frame-
buffer (i.e., READ_FRAMEBUFFER_BINDING is zero), or a framebuffer object (i.e.,
READ_FRAMEBUFFER_BINDING is non-zero). For more information about frame-
buffer objects, see section 4.4.
     If the object bound to READ_FRAMEBUFFER_BINDING is not framebuffer com-
plete (as defined in section 4.4.4), then ReadPixels generates the error INVALID_-
FRAMEBUFFER_OPERATION. If ReadBuffer is supplied with a constant that is nei-
ther legal for the default framebuffer, nor legal for a framebuffer object, then the
error INVALID_ENUM results.
     When READ_FRAMEBUFFER_BINDING is zero, i.e. the default framebuffer, src
must be one of the values listed in table 4.4, including NONE. FRONT_AND_BACK,
FRONT, and LEFT refer to the front left buffer, BACK refers to the back left buffer,
and RIGHT refers to the front right buffer. The other constants correspond directly
to the buffers that they name. If the requested buffer is missing, then the error
INVALID_OPERATION is generated. For the default framebuffer, the initial setting
for ReadBuffer is FRONT if there is no back buffer and BACK otherwise.
     When the GL is using a framebuffer object, src must be one of the values listed
in table 4.5, including NONE. In a manner analogous to how the DRAW_BUFFERs
state is handled, specifying COLOR_ATTACHMENTi enables reading from the image
attached to the framebuffer at COLOR_ATTACHMENTi. For framebuffer objects, the
initial setting for ReadBuffer is COLOR_ATTACHMENT0.
     ReadPixels generates an INVALID_OPERATION error if it attempts to select a
color buffer while READ_BUFFER is NONE.
     ReadPixels obtains values from the selected buffer from each pixel with lower
left hand corner at (x + i, y + j) for 0 ≤ i < width and 0 ≤ j < height;
this pixel is said to be the ith pixel in the jth row. If any of these pixels lies
outside of the window allocated to the current GL context, or outside of the image
attached to the currently bound framebuffer object, then the values obtained for


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                          291


those pixels are undefined. When READ_FRAMEBUFFER_BINDING is zero, values
are also undefined for individual pixels that are not owned by the current context.
Otherwise, ReadPixels obtains values from the selected buffer, regardless of how
those values were placed there.
    If the GL is in RGBA mode, and format is one of LUMINANCE, LUMINANCE_-
ALPHA, RED, GREEN, BLUE, ALPHA, RG, RGB, RGBA, BGR, or BGRA, then red, green,
blue, and alpha values are obtained from the selected buffer at each pixel loca-
tion. If the framebuffer does not support alpha values then the A that is obtained
is 1.0. If format is COLOR_INDEX and the GL is in RGBA mode then the error
INVALID_OPERATION occurs. If the GL is in color index mode, and format is not
DEPTH_COMPONENT, DEPTH_STENCIL, or STENCIL_INDEX, then the color index
is obtained at each pixel location.
    If format is an integer format and the color buffer is not an integer format; if the
color buffer is an integer format and format is not an integer format; or if format
is an integer format and type is FLOAT or HALF_FLOAT, the error INVALID_-
OPERATION occurs.
    When READ_FRAMEBUFFER_BINDING is non-zero, the red, green, blue, and
alpha values are obtained by first reading the internal component values of the
corresponding value in the image attached to the selected logical buffer. Internal
components are converted to an RGBA color by taking each R, G, B, and A com-
ponent present according to the base internal format of the buffer (as shown in
table 3.16). If G, B, or A values are not present in the internal format, they are
taken to be zero, zero, and one respectively.

Conversion of RGBA values
This step applies only if the GL is in RGBA mode, and then only if format is not
STENCIL_INDEX, DEPTH_COMPONENT, or DEPTH_STENCIL. The R, G, B, and A
values form a group of elements.
     For a signed or unsigned normalized fixed-point color buffer, each element is
converted to floating-point using equations 2.3 or 2.1, respectively. For an integer
or floating-point color buffer, the elements are unmodified.

Conversion of Depth values
This step applies only if format is DEPTH_COMPONENT or DEPTH_STENCIL and
the depth buffer uses a fixed-point representation. An element is taken to be a
fixed-point value in [0, 1] with m bits, where m is the number of bits in the depth
buffer (see section 2.15.1). No conversion is necessary if the depth buffer uses a
floating-point representation.


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                        292


Pixel Transfer Operations
This step is actually the sequence of steps that was described separately in sec-
tion 3.7.6. After the processing described in that section is completed, groups are
processed as described in the following sections.

Conversion to L
This step applies only to RGBA component groups. If the format is either
LUMINANCE or LUMINANCE_ALPHA, a value L is computed as

                                 L=R+G+B

where R, G, and B are the values of the R, G, and B components. The single
computed L component replaces the R, G, and B components in the group.

Final Conversion
For an index, if the type is not FLOAT or HALF_FLOAT, final conversion consists
of masking the index with the value given in table 4.8; if the type is FLOAT or
HALF_FLOAT, then the integer index is converted to a GL float or half data
value.
    Read color clamping is controlled by calling ClampColor (see section 3.8)
with target set to CLAMP_READ_COLOR. If clamp is TRUE, read color clamping is
enabled; if clamp is FALSE, read color clamping is disabled. If clamp is FIXED_-
ONLY, read color clamping is enabled if the selected read color buffer has fixed-
point components.
    For a floating-point RGBA color, if type is not one of FLOAT, HALF,
UNSIGNED_INT_5_9_9_9_REV, or UNSIGNED_INT_10F_11F_11F_REV; or if
read color clamping is enabled, each component is first clamped to [0, 1]. Then the
appropriate conversion formula from table 4.9 is applied to the component.
    In the special case of calling ReadPixels with type of UNSIGNED_INT_10F_-
11F_11F_REV and format of RGB, conversion is performed as follows: the returned
data are packed into a series of uint values. The red, green, and blue components
are converted to unsigned 11-bit floating-point, unsigned 11-bit floating-point, and
unsigned 10-bit floating point as described in sections 2.1.3 and 2.1.4. The result-
ing red 11 bits, green 11 bits, and blue 10 bits are then packed as the 1st, 2nd, and
3rd components of the UNSIGNED_INT_10F_11F_11F_REV format as shown in
table 3.11.
    In the special case of calling ReadPixels with type of UNSIGNED_INT_5_-
9_9_9_REV and format RGB, the conversion is performed as follows: the returned


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                          293


             type Parameter                                 Index Mask
             UNSIGNED_BYTE                                  28 − 1
             BITMAP                                         1
             BYTE                                           27 − 1
             UNSIGNED_SHORT                                 216 − 1
             SHORT                                          215 − 1
             UNSIGNED_INT                                   232 − 1
             INT                                            231 − 1
             UNSIGNED_INT_24_8                              28 − 1
             FLOAT_32_UNSIGNED_INT_24_8_REV                 28 − 1

Table 4.8: Index masks used by ReadPixels. Floating point data are not masked.



data are packed into a series of uint values. The red, green, and blue compo-
nents are converted to reds , greens , blues , and expshared integers as described
in section 3.9.1 when internalformat is RGB9_E5. The reds , greens , blues ,
and expshared are then packed as the 1st, 2nd, 3rd, and 4th components of the
UNSIGNED_INT_5_9_9_9_REV format as shown in table 3.11.
    For an integer RGBA color, each component is clamped to the representable
range of type.

Placement in Pixel Pack Buffer or Client Memory
If a pixel pack buffer is bound (as indicated by a non-zero value of PIXEL_PACK_-
BUFFER_BINDING), data is an offset into the pixel pack buffer and the pixels are
packed into the buffer relative to this offset; otherwise, data is a pointer to a block
client memory and the pixels are packed into the client memory relative to the
pointer. If a pixel pack buffer object is bound and packing the pixel data according
to the pixel pack storage state would access memory beyond the size of the pixel
pack buffer’s memory size, an INVALID_OPERATION error results. If a pixel pack
buffer object is bound and data is not evenly divisible by the number of basic
machine units needed to store in memory the corresponding GL data type from
table 3.5 for the type parameter, an INVALID_OPERATION error results.
     Groups of elements are placed in memory just as they are taken from mem-
ory when transferring pixel rectangles to the GL. That is, the ith group of the
jth row (corresponding to the ith pixel in the jth row) is placed in memory just
where the ith group of the jth row would be taken from when transferring pix-
els. See Unpacking under section 3.7.1. The only difference is that the storage


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                       294


 type Parameter                              GL Data Type      Component
                                                               Conversion Formula
 UNSIGNED_BYTE                                   ubyte         c = (28 − 1)f
                                                                     8
 BYTE                                            byte          c = (2 −1)f
                                                                        2
                                                                           −1

 UNSIGNED_SHORT                                 ushort               16
                                                               c = (2 − 1)f
                                                                     16
 SHORT                                           short         c = (2 −1)f
                                                                        2
                                                                           −1

 UNSIGNED_INT                                    uint          c = (232 − 1)f
                                                                     32
 INT                                              int          c = (2 −1)f
                                                                        2
                                                                           −1

 HALF_FLOAT                                      half          c=f
 FLOAT                                           float         c=f
 UNSIGNED_BYTE_3_3_2                             ubyte         c = (2N − 1)f
 UNSIGNED_BYTE_2_3_3_REV                         ubyte         c = (2N − 1)f
 UNSIGNED_SHORT_5_6_5                           ushort         c = (2N − 1)f
 UNSIGNED_SHORT_5_6_5_REV                       ushort         c = (2N − 1)f
 UNSIGNED_SHORT_4_4_4_4                         ushort         c = (2N − 1)f
 UNSIGNED_SHORT_4_4_4_4_REV                     ushort         c = (2N − 1)f
 UNSIGNED_SHORT_5_5_5_1                         ushort         c = (2N − 1)f
 UNSIGNED_SHORT_1_5_5_5_REV                     ushort         c = (2N − 1)f
 UNSIGNED_INT_8_8_8_8                            uint          c = (2N − 1)f
 UNSIGNED_INT_8_8_8_8_REV                        uint          c = (2N − 1)f
 UNSIGNED_INT_10_10_10_2                         uint          c = (2N − 1)f
 UNSIGNED_INT_2_10_10_10_REV                     uint          c = (2N − 1)f
 UNSIGNED_INT_24_8                               uint          c = (2N − 1)f
 UNSIGNED_INT_10F_11F_11F_REV                    uint          Special
 UNSIGNED_INT_5_9_9_9_REV                        uint          Special
 FLOAT_32_UNSIGNED_INT_24_8_REV                  float         c = f (depth only)

Table 4.9: Reversed component conversions, used when component data are being
returned to client memory. Color, normal, and depth components are converted
from the internal floating-point representation (f ) to a datum of the specified GL
data type (c) using the specified equation. All arithmetic is done in the internal
floating point format. These conversions apply to component data returned by GL
query commands and to components of pixel data returned to client memory. The
equations remain the same even if the implemented ranges of the GL data types are
greater than the minimum required ranges. (See table 2.2.) Equations with N as
the exponent are performed for each bitfield of the packed data type, with N set to
the number of bits in the bitfield.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                        295


mode parameters whose names begin with PACK_ are used instead of those whose
names begin with UNPACK_. If the format is LUMINANCE, RED, GREEN, BLUE, or
ALPHA, only the corresponding single element is written. Likewise if the format
is LUMINANCE_ALPHA, RG, RGB, or BGR, only the corresponding two or three ele-
ments are written. Otherwise all the elements of each group are written.

4.3.3    Copying Pixels
The command

        void CopyPixels( int x, int y, sizei width, sizei height,
           enum type );

transfers a rectangle of pixel values from one region of the read framebuffer to
another in the draw framebuffer. Pixel copying is diagrammed in figure 4.3.
type is a symbolic constant that must be one of COLOR, STENCIL, DEPTH, or
DEPTH_STENCIL, indicating that the values to be transferred are colors, stencil
values, depth values, or depth/stencil values, respectively. The first four arguments
have the same interpretation as the corresponding arguments to ReadPixels.
    Values are obtained from the framebuffer, converted (if appropriate), then sub-
jected to the pixel transfer operations described in section 3.7.6, just as if Read-
Pixels were called with the corresponding arguments.
    If the type is STENCIL or DEPTH, then it is as if the format for ReadPixels were
STENCIL_INDEX or DEPTH_COMPONENT, respectively. If the type is DEPTH_-
STENCIL, then it is as if the format for ReadPixels were specified as described in
table 4.10. If the type is COLOR, then if the GL is in RGBA mode, it is as if the
format were RGBA, while if the GL is in color index mode, it is as if the format
were COLOR_INDEX .
    The groups of elements so obtained are then written to the framebuffer just as
if DrawPixels had been given width and height, beginning with final conversion
of elements. The effective format is the same as that already described.
    Finally, the behavior of several GL operations is specified as if the argu-
ments were passed to CopyPixels. These operations include CopyTexImage*,
CopyTexSubImage*, CopyColorTable, CopyColorSubTable, and CopyConvo-
lutionFilter*. An INVALID_FRAMEBUFFER_OPERATION error will be generated
if an attempt is made to execute one of these operations, or CopyPixels, while the
object bound to READ_FRAMEBUFFER_BINDING (see section 4.4) is not frame-
buffer complete (as defined in section 4.4.4). An INVALID_OPERATION error will
be generated if the object bound to READ_FRAMEBUFFER_BINDING is framebuffer
complete and the value of SAMPLE_BUFFERS is greater than zero.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                                                                                              296




        RGBA pixel                                                        color index pixel
   data from framebuffer                                                data from framebuffer

                                   convert
                                   to float
                                                                                                                                                    




                                                                                                                                                    




                               




                                    scale
                                                                 



                                                                    Pixel Transfer
                                                                                                                            




                                                                                                                            shift
                                                                                                                                                    




                               




                                   and bias
                                                                     




                                                                     Operations
                                                                                                                       




                                                                                                                          and offset
                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                          
                             RGBA to RGBA
                                                                     
                                                                        index to RGBA
                                                                                                                  
                                                                                                                     index to index
                                                                                                                                                    




                               
                                lookup
                                                                          
                                                                            lookup
                                                                                                                       
                                                                                                                        lookup
                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                               




                                  color table
                                                                                                                                                    




                               




                                    lookup
                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                                                                                                           post
                                                                                                                                                    




                              convolution                                    color table
                                         




                             scale and bias
                                                                                    




                                                                               lookup
                                                                                                    




                                                                                                       color matrix
                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




      post                     




                                  color table
                                                                          




                                                                             histogram
                                                                                                                                                    




   convolution                 




                                    lookup
                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                                                                                                                                                    




                          
                              color matrix
                                                                          
                                                                              minmax
                                                                                                                                                    




                          
                             scale and bias
                                                                                                                                                    




                                                                                                                                                    




                                    clamp                                   final                                         mask to
                                   to [0,1]                              conversion                                       (2n − 1)

           RGBA pixel                                                                          color index pixel
            data out                                                                               data out




  Figure 4.3. Operation of CopyPixels. Operations in dashed boxes may be enabled
  or disabled. Index-to-RGBA lookup is currently never performed. RGBA and color
  index pixel paths are shown; depth and stencil pixel paths are not shown.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                         297


             DEPTH_BITS       STENCIL_BITS        format
             zero             zero                DEPTH_STENCIL
             zero             non-zero            DEPTH_COMPONENT
             non-zero         zero                STENCIL_INDEX
             non-zero         non-zero            DEPTH_STENCIL

Table 4.10: Effective ReadPixels format for DEPTH_STENCIL CopyPixels opera-
tion.


    CopyPixels will generate an INVALID_FRAMEBUFFER_OPERATION error if
the object bound to DRAW_FRAMEBUFFER_BINDING (see section 4.4) is not frame-
buffer complete.
    If the read buffer contains integer or unsigned integer components, an
INVALID_OPERATION error is generated.

Blitting Pixel Rectangles
The command

      void BlitFramebuffer( int srcX0, int srcY0, int srcX1,
         int srcY1, int dstX0, int dstY0, int dstX1, int dstY1,
         bitfield mask, enum filter );

transfers a rectangle of pixel values from one region of the read framebuffer to an-
other in the draw framebuffer. There are some important distinctions from Copy-
Pixels, as described below.
    mask is the bitwise OR of a number of values indicating which buffers are
to be copied. The values are COLOR_BUFFER_BIT, DEPTH_BUFFER_BIT, and
STENCIL_BUFFER_BIT, which are described in section 4.2.3. The pixels corre-
sponding to these buffers are copied from the source rectangle bounded by the lo-
cations (srcX0, srcY 0) and (srcX1, srcY 1) to the destination rectangle bounded
by the locations (dstX0, dstY 0) and (dstX1, dstY 1). The lower bounds of the
rectangle are inclusive, while the upper bounds are exclusive.
    When the color buffer is transferred, values are taken from the read buffer of the
read framebuffer and written to each of the draw buffers of the draw framebuffer,
just as with CopyPixels.
    The actual region taken from the read framebuffer is limited to the intersection
of the source buffers being transferred, which may include the color buffer selected
by the read buffer, the depth buffer, and/or the stencil buffer depending on mask.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                         298


The actual region written to the draw framebuffer is limited to the intersection of
the destination buffers being written, which may include multiple draw buffers,
the depth buffer, and/or the stencil buffer depending on mask. Whether or not the
source or destination regions are altered due to these limits, the scaling and offset
applied to pixels being transferred is performed as though no such limits were
present.
    If the source and destination rectangle dimensions do not match, the source im-
age is stretched to fit the destination rectangle. filter must be LINEAR or NEAREST,
and specifies the method of interpolation to be applied if the image is stretched.
LINEAR filtering is allowed only for the color buffer; if mask includes DEPTH_-
BUFFER_BIT or STENCIL_BUFFER_BIT, and filter is not NEAREST, no copy is
performed and an INVALID_OPERATION error is generated. If the source and
destination dimensions are identical, no filtering is applied. If either the source or
destination rectangle specifies a negative width or height (X1 < X0 or Y 1 < Y 0),
the image is reversed in the corresponding direction. If both the source and des-
tination rectangles specify a negative width or height for the same direction, no
reversal is performed. If a linear filter is selected and the rules of LINEAR sam-
pling would require sampling outside the bounds of a source buffer, it is as though
CLAMP_TO_EDGE texture sampling were being performed. If a linear filter is se-
lected and sampling would be required outside the bounds of the specified source
region, but within the bounds of a source buffer, the implementation may choose
to clamp while sampling or not.
    If the source and destination buffers are identical, and the source and destina-
tion rectangles overlap, the result of the blit operation is undefined.
    Blit operations bypass the fragment pipeline. The only fragment operations
which affect a blit are the pixel ownership test and the scissor test.
    If a buffer is specified in mask and does not exist in both the read and draw
framebuffers, the corresponding bit is silently ignored.
    If the color formats of the read and draw buffers do not match, and mask in-
cludes COLOR_BUFFER_BIT, pixel groups are converted to match the destination
format as in CopyPixels. However, no pixel transfer operations are applied, and
 colors are clamped only if all draw color buffers have fixed-point components,
as if CLAMP_FRAGMENT_COLOR were set to FIXED_ONLY. Format conversion is
not supported for all data types, and an INVALID_OPERATION error is generated
under any of the following conditions:
   • The read buffer contains floating-point values and any draw buffer does not
     contain floating-point values.
   • The read buffer contains non-floating-point values and any draw buffer con-
     tains floating-point values.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.3. DRAWING, READING, AND COPYING PIXELS                                       299


   • The read buffer contains unsigned integer values and any draw buffer does
     not contain unsigned integer values.

   • The read buffer contains signed integer values and any draw buffer does not
     contain signed integer values.

    Calling BlitFramebuffer will result in an INVALID_FRAMEBUFFER_-
OPERATION error if the objects bound to DRAW_FRAMEBUFFER_BINDING and
READ_FRAMEBUFFER_BINDING are not framebuffer complete (section 4.4.4).
    Calling BlitFramebuffer will result in an INVALID_OPERATION error if mask
includes DEPTH_BUFFER_BIT or STENCIL_BUFFER_BIT, and the source and
destination depth and stencil buffer formats do not match.
    Calling BlitFramebuffer will result in an INVALID_OPERATION error if filter
is LINEAR and read buffer contains integer data.
    If SAMPLE_BUFFERS for the read framebuffer is greater than zero and
SAMPLE_BUFFERS for the draw framebuffer is zero, the samples corresponding
to each pixel location in the source are converted to a single sample before being
written to the destination.
    If SAMPLE_BUFFERS for the read framebuffer is zero and SAMPLE_BUFFERS
for the draw framebuffer is greater than zero, the value of the source sample is
replicated in each of the destination samples.
    If SAMPLE_BUFFERS for either the read framebuffer or draw framebuffer is
greater than zero, no copy is performed and an INVALID_OPERATION error is
generated if the dimensions of the source and destination rectangles provided to
BlitFramebuffer are not identical, if the formats of the read and draw framebuffers
are not identical, or if the values of SAMPLES for the read and draw buffers are not
identical.
    If SAMPLE_BUFFERS for both the read and draw framebuffers are greater than
zero, and the values of SAMPLES for the read and draw framebuffers are identical,
the samples are copied without modification from the read framebuffer to the draw
framebuffer. Otherwise, no copy is performed and an INVALID_OPERATION error
is generated. Note that the samples in the draw buffer are not guaranteed to be at
the same sample location as the read buffer, so rendering using this newly created
buffer can potentially have geometry cracks or incorrect antialiasing. This may
occur if the sizes of the framebuffers do not match, if the formats differ, or if
the source and destination rectangles are not defined with the same (X0, Y 0) and
(X1, Y 1) bounds.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                           300


4.3.4   Pixel Draw/Read State
The state required for pixel operations consists of the parameters that are set with
PixelStore, PixelTransfer, and PixelMap. This state has been summarized in
tables 3.1, 3.2, and 3.3. Additional state includes the current raster position (sec-
tion 2.22), an integer indicating the current setting of ReadBuffer, and a three-
valued integer controlling clamping during final conversion. For the default frame-
buffer, in the initial state the read buffer is BACK if there is a back buffer; FRONT if
there is no back buffer; and NONE if no default framebuffer is associated with the
context. The initial value of read color clamping is FIXED_ONLY. State set with
PixelStore is GL client state.


4.4     Framebuffer Objects
As described in chapter 1 and section 2.1, the GL renders into (and reads values
from) a framebuffer. GL defines two classes of framebuffers: window system-
provided and application-created.
     Initially, the GL uses the default framebuffer. The storage, dimensions, allo-
cation, and format of the images attached to this framebuffer are managed entirely
by the window system. Consequently, the state of the default framebuffer, includ-
ing its images, can not be changed by the GL, nor can the default framebuffer be
deleted by the GL.
     The routines described in the following sections, however, can be used to cre-
ate, destroy, and modify the state and attachments of framebuffer objects.
     Framebuffer objects encapsulate the state of a framebuffer in a similar manner
to the way texture objects encapsulate the state of a texture. In particular, a frame-
buffer object encapsulates state necessary to describe a collection of color, depth,
and stencil logical buffers (other types of buffers are not allowed). For each logical
buffer, a framebuffer-attachable image can be attached to the framebuffer to store
the rendered output for that logical buffer. Examples of framebuffer-attachable im-
ages include texture images and renderbuffer images. Renderbuffers are described
further in section 4.4.2
     By allowing the images of a renderbuffer to be attached to a framebuffer, the
GL provides a mechanism to support off-screen rendering. Further, by allowing the
images of a texture to be attached to a framebuffer, the GL provides a mechanism
to support render to texture.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                            301


4.4.1    Binding and Managing Framebuffer Objects
The default framebuffer for rendering and readback operations is provided by the
window system. In addition, named framebuffer objects can be created and oper-
ated upon. The namespace for framebuffer objects is the unsigned integers, with
zero reserved by the GL for the default framebuffer.
    A framebuffer object is created by binding a name returned by GenFrame-
buffers (see below) to DRAW_FRAMEBUFFER or READ_FRAMEBUFFER. The bind-
ing is effected by calling

        void BindFramebuffer( enum target, uint framebuffer );

with target set to the desired framebuffer target and framebuffer set to the frame-
buffer object name. The resulting framebuffer object is a new state vector, com-
prising all the state values listed in table 6.28, as well as one set of the state values
listed in table 6.29 for each attachment point of the framebuffer, set to the same
initial values. There are MAX_COLOR_ATTACHMENTS color attachment points, plus
one each for the depth and stencil attachment points.
     BindFramebuffer may also be used to bind an existing framebuffer object
to DRAW_FRAMEBUFFER and/or READ_FRAMEBUFFER. If the bind is successful no
change is made to the state of the bound framebuffer object, and any previous
binding to target is broken.
     BindFramebuffer fails and an INVALID_OPERATION error is generated if
framebuffer is not zero or a name returned from a previous call to GenFrame-
buffers, or if such a name has since been deleted with DeleteFramebuffers.
     If a framebuffer object is bound to DRAW_FRAMEBUFFER or READ_-
FRAMEBUFFER, it becomes the target for rendering or readback operations, respec-
tively, until it is deleted or another framebuffer is bound to the corresponding bind
point. Calling BindFramebuffer with target set to FRAMEBUFFER binds frame-
buffer to both the draw and read targets.
     While a framebuffer object is bound, GL operations on the target to which it
is bound affect the images attached to the bound framebuffer object, and queries
of the target to which it is bound return state from the bound object. Queries of
the values specified in tables 6.55 and 6.31 are derived from the framebuffer object
bound to DRAW_FRAMEBUFFER.
     The initial state of DRAW_FRAMEBUFFER and READ_FRAMEBUFFER refers to
the default framebuffer. In order that access to the default framebuffer is not lost,
it is treated as a framebuffer object with the name of zero. The default framebuffer
is therefore rendered to and read from while zero is bound to the corresponding
targets. On some implementations, the properties of the default framebuffer can


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          302


change over time (e.g., in response to window system events such as attaching the
context to a new window system drawable.)
     Framebuffer objects (those with a non-zero name) differ from the default
framebuffer in a few important ways. First and foremost, unlike the default frame-
buffer, framebuffer objects have modifiable attachment points for each logical
buffer in the framebuffer. Framebuffer-attachable images can be attached to and
detached from these attachment points, which are described further in section 4.4.2.
Also, the size and format of the images attached to framebuffer objectss are con-
trolled entirely within the GL interface, and are not affected by window system
events, such as pixel format selection, window resizes, and display mode changes.
     Additionally, when rendering to or reading from an application created-
framebuffer object,

   • The pixel ownership test always succeeds. In other words, framebuffer ob-
     jects own all of their pixels.

   • There are no visible color buffer bitplanes. This means there is no color
     buffer corresponding to the back, front, left, or right color bitplanes.

   • The only color buffer bitplanes are the ones defined by the frame-
     buffer attachment points named COLOR_ATTACHMENT0 through COLOR_-
     ATTACHMENTn.

   • The only depth buffer bitplanes are the ones defined by the framebuffer at-
     tachment point DEPTH_ATTACHMENT.

   • The only stencil buffer bitplanes are the ones defined by the framebuffer
     attachment point STENCIL_ATTACHMENT.

   • There are no accumulation buffer bitplanes, so the value of the
     implementation-dependent state variables ACCUM_RED_BITS, ACCUM_-
     GREEN_BITS, ACCUM_BLUE_BITS, and ACCUM_ALPHA_BITS are all zero.

   • There are no AUX buffer bitplanes, so the value of the implementation-
     dependent state variable AUX_BUFFERS is zero.

   • If the attachment sizes are not all identical, rendering will be limited to the
     largest area that can fit in all of the attachments (an intersection of rectangles
     having a lower left of (0, 0) and an upper right of (width, height) for each
     attachment).

   • If the attachment sizes are not all identical, the values of pixels outside the
     common intersection area after rendering are undefined.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          303


    Framebuffer objects are deleted by calling

        void DeleteFramebuffers( sizei n, uint *framebuffers );

framebuffers contains n names of framebuffer objects to be deleted. After a frame-
buffer object is deleted, it has no attachments, and its name is again unused.
If a framebuffer that is currently bound to one or more of the targets DRAW_-
FRAMEBUFFER or READ_FRAMEBUFFER is deleted, it is as though BindFrame-
buffer had been executed with the corresponding target and framebuffer zero. Un-
used names in framebuffers are silently ignored, as is the value zero.
    The command

        void GenFramebuffers( sizei n, uint *ids );

returns n previously unused framebuffer object names in ids. These names are
marked as used, for the purposes of GenFramebuffers only, but they acquire state
and type only when they are first bound, just as if they were unused.
    The names bound to the draw and read framebuffer bindings can be queried by
calling GetIntegerv with the symbolic constants DRAW_FRAMEBUFFER_BINDING
and READ_FRAMEBUFFER_BINDING, respectively. FRAMEBUFFER_BINDING is
equivalent to DRAW_FRAMEBUFFER_BINDING.

4.4.2    Attaching Images to Framebuffer Objects
Framebuffer-attachable images may be attached to, and detached from, framebuffer
objects. In contrast, the image attachments of the default framebuffer may not be
changed by the GL.
     A single framebuffer-attachable image may be attached to multiple framebuffer
objects, potentially avoiding some data copies, and possibly decreasing memory
consumption.
     For each logical buffer, a framebuffer object stores a set of state which defines
the logical buffer’s attachment point. The attachment point state contains enough
information to identify the single image attached to the attachment point, or to
indicate that no image is attached. The per-logical buffer attachment point state is
listed in table 6.29
     There are two types of framebuffer-attachable images: the image of a render-
buffer object, and an image of a texture object.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          304


Renderbuffer Objects
A renderbuffer is a data storage object containing a single image of a renderable
internal format. GL provides the methods described below to allocate and delete a
renderbuffer’s image, and to attach a renderbuffer’s image to a framebuffer object.
    The name space for renderbuffer objects is the unsigned integers, with zero
reserved for the GL. A renderbuffer object is created by binding a name returned
by GenRenderbuffers (see below) to RENDERBUFFER. The binding is effected by
calling

      void BindRenderbuffer( enum target, uint renderbuffer );

with target set to RENDERBUFFER and renderbuffer set to the renderbuffer object
name. If renderbuffer is not zero, then the resulting renderbuffer object is a new
state vector, initialized with a zero-sized memory buffer, and comprising the state
values listed in table 6.31. Any previous binding to target is broken.
     BindRenderbuffer may also be used to bind an existing renderbuffer object.
If the bind is successful, no change is made to the state of the newly bound render-
buffer object, and any previous binding to target is broken.
     While a renderbuffer object is bound, GL operations on the target to which it
is bound affect the bound renderbuffer object, and queries of the target to which a
renderbuffer object is bound return state from the bound object.
     The name zero is reserved. A renderbuffer object cannot be created with the
name zero. If renderbuffer is zero, then any previous binding to target is broken
and the target binding is restored to the initial state.
     In the initial state, the reserved name zero is bound to RENDERBUFFER. There is
no renderbuffer object corresponding to the name zero, so client attempts to modify
or query renderbuffer state for the target RENDERBUFFER while zero is bound will
generate GL errors, as described in section 6.1.3.
     The current RENDERBUFFER binding can be determined by calling GetInte-
gerv with the symbolic constant RENDERBUFFER_BINDING.
     BindRenderbuffer fails and an INVALID_OPERATION error is generated if
renderbuffer is not zero or a name returned from a previous call to GenRender-
buffers, or if such a name has since been deleted with DeleteRenderbuffers.
     Renderbuffer objects are deleted by calling

      void DeleteRenderbuffers( sizei n, const
         uint *renderbuffers );

where renderbuffers contains n names of renderbuffer objects to be deleted. After
a renderbuffer object is deleted, it has no contents, and its name is again unused. If

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          305


a renderbuffer that is currently bound to RENDERBUFFER is deleted, it is as though
BindRenderbuffer had been executed with the target RENDERBUFFER and name
of zero. Additionally, special care must be taken when deleting a renderbuffer if
the image of the renderbuffer is attached to a framebuffer object (see section 4.4.2).
Unused names in renderbuffers are silently ignored, as is the value zero.
    The command

      void GenRenderbuffers( sizei n, uint *renderbuffers );

returns n previously unused renderbuffer object names in renderbuffers. These
names are marked as used, for the purposes of GenRenderbuffers only, but they
acquire renderbuffer state only when they are first bound, just as if they were un-
used.
    The command

      void RenderbufferStorageMultisample( enum target,
         sizei samples, enum internalformat, sizei width,
         sizei height );

establishes the data storage, format, dimensions, and number of samples of a ren-
derbuffer object’s image. target must be RENDERBUFFER. internalformat must
be color-renderable, depth-renderable, or stencil-renderable (as defined in sec-
tion 4.4.4). width and height are the dimensions in pixels of the renderbuffer. If
either width or height is greater than MAX_RENDERBUFFER_SIZE, or if samples
is greater than MAX_SAMPLES, then the error INVALID_VALUE is generated. The
error INVALID_OPERATION may be generated if internalformat is a signed or un-
signed integer format, samples is greater than one, and the implementation does
not support multisampled integer renderbuffers (see “Required Renderbuffer For-
mats” below). If the GL is unable to create a data store of the requested size, the
error OUT_OF_MEMORY is generated.
    Upon success, RenderbufferStorageMultisample deletes any existing data
store for the renderbuffer image and the contents of the data store after call-
ing RenderbufferStorageMultisample are undefined. RENDERBUFFER_WIDTH
is set to width, RENDERBUFFER_HEIGHT is set to height, and RENDERBUFFER_-
INTERNAL_FORMAT is set to internalformat.
    If samples is zero, then RENDERBUFFER_SAMPLES is set to zero. Otherwise
samples represents a request for a desired minimum number of samples. Since
different implementations may support different sample counts for multisampled
rendering, the actual number of samples allocated for the renderbuffer image is



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                              306


                 Sized                   Base                 S
                 Internal Format         Internal Format     bits
                 STENCIL_INDEX1          STENCIL_INDEX        1
                 STENCIL_INDEX4          STENCIL_INDEX        4
                 STENCIL_INDEX8          STENCIL_INDEX        8
                 STENCIL_INDEX16         STENCIL_INDEX       16

Table 4.11: Correspondence of sized internal formats to base internal formats for
formats that can be used only with renderbuffers.



implementation-dependent. However, the resulting value for RENDERBUFFER_-
SAMPLES is guaranteed to be greater than or equal to samples and no more than the
next larger sample count supported by the implementation.
   A GL implementation may vary its allocation of internal component resolution
based on any RenderbufferStorage parameter (except target), but the allocation
and chosen internal format must not be a function of any other state and cannot be
changed once they are established.
   The command

      void RenderbufferStorage( enum target, enum internalformat,
         sizei width, sizei height );

is equivalent to calling RenderbufferStorageMultisample with samples equal to
zero.

Required Renderbuffer Formats
Implementations are required to support the same internal formats for renderbuffers
as the required formats for textures enumerated in section 3.9.1, with the excep-
tion of the color formats labelled “texture-only”. Requesting one of these internal
formats for a renderbuffer will allocate at least the internal component sizes and
exactly the component types shown for that format in tables 3.17- 3.19.
    Implementations must support creation of renderbuffers in these required for-
mats with up to the value of MAX_SAMPLES multisamples, with the exception that
the signed and unsigned integer formats are required only to support creation of
renderbuffers with one sample.




                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          307


Attaching Renderbuffer Images to a Framebuffer
A renderbuffer can be attached as one of the logical buffers of the currently bound
framebuffer object by calling

      void FramebufferRenderbuffer( enum target,
         enum attachment, enum renderbuffertarget,
         uint renderbuffer );

target must be DRAW_FRAMEBUFFER, READ_FRAMEBUFFER, or FRAMEBUFFER.
FRAMEBUFFER is equivalent to DRAW_FRAMEBUFFER. An INVALID_OPERATION
error is generated if the value of the corresponding binding is zero. attachment
should be set to one of the attachment points of the framebuffer listed in table 4.12.
     renderbuffertarget must be RENDERBUFFER and renderbuffer should be set to
the name of the renderbuffer object to be attached to the framebuffer. render-
buffer must be either zero or the name of an existing renderbuffer object of type
renderbuffertarget, otherwise an INVALID_OPERATION error is generated. If ren-
derbuffer is zero, then the value of renderbuffertarget is ignored.
     If renderbuffer is not zero and if FramebufferRenderbuffer is successful,
then the renderbuffer named renderbuffer will be used as the logical buffer iden-
tified by attachment of the framebuffer currently bound to target. The value of
FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE for the specified attachment point is
set to RENDERBUFFER and the value of FRAMEBUFFER_ATTACHMENT_OBJECT_-
NAME is set to renderbuffer. All other state values of the attachment point specified
by attachment are set to their default values listed in table 6.29. No change is made
to the state of the renderbuffer object and any previous attachment to the attach-
ment logical buffer of the framebuffer object bound to framebuffer target is broken.
If the attachment is not successful, then no change is made to the state of either the
renderbuffer object or the framebuffer object.
     Calling FramebufferRenderbuffer with the renderbuffer name zero will de-
tach the image, if any, identified by attachment, in the framebuffer currently bound
to target. All state values of the attachment point specified by attachment in the
object bound to target are set to their default values listed in table 6.29.
     Setting attachment to the value DEPTH_STENCIL_ATTACHMENT is a special
case causing both the depth and stencil attachments of the framebuffer object to be
set to renderbuffer, which should have base internal format DEPTH_STENCIL.
     If a renderbuffer object is deleted while its image is attached to one or more
attachment points in the currently bound framebuffer, then it is as if Framebuf-
ferRenderbuffer had been called, with a renderbuffer of 0, for each attachment
point to which this image was attached in the currently bound framebuffer. In
other words, this renderbuffer image is first detached from all attachment points in

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                        308


the currently bound framebuffer. Note that the renderbuffer image is specifically
not detached from any non-bound framebuffers. Detaching the image from any
non-bound framebuffers is the responsibility of the application.

                       Name of attachment
                       COLOR_ATTACHMENTi (see caption)
                       DEPTH_ATTACHMENT
                       STENCIL_ATTACHMENT
                       DEPTH_STENCIL_ATTACHMENT

Table 4.12: Framebuffer attachment points. i in COLOR_ATTACHMENTi may range
from zero to the value of MAX_COLOR_ATTACHMENTS - 1.



Attaching Texture Images to a Framebuffer
GL supports copying the rendered contents of the framebuffer into the images of
a texture object through the use of the routines CopyTexImage* and CopyTex-
SubImage*. Additionally, GL supports rendering directly into the images of a
texture object.
    To render directly into a texture image, a specified image from a texture object
can be attached as one of the logical buffers of the currently bound framebuffer ob-
ject by calling one of the following routines, depending on the type of the texture:

      void FramebufferTexture1D( enum target, enum attachment,
         enum textarget, uint texture, int level );
      void FramebufferTexture2D( enum target, enum attachment,
         enum textarget, uint texture, int level );
      void FramebufferTexture3D( enum target, enum attachment,
         enum textarget, uint texture, int level, int layer );

    In all three routines, target must be DRAW_FRAMEBUFFER, READ_-
FRAMEBUFFER, or FRAMEBUFFER. FRAMEBUFFER is equivalent to DRAW_-
FRAMEBUFFER. An INVALID_OPERATION error is generated if the value of the
corresponding binding is zero. attachment must be one of the attachment points of
the framebuffer listed in table 4.12.
    If texture is zero, the image identified by attachment, if any, will be detached
from the framebuffer currently bound to target. textarget, level, and layer are ig-
nored. All state values of the attachment point specified by attachment are set to
their default values listed in table 6.29.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                        309


    If texture is not zero, then texture must either name an existing texture
object with an target of textarget, or texture must name an existing cube map
texture and textarget must be one of TEXTURE_CUBE_MAP_POSITIVE_X,
TEXTURE_CUBE_MAP_POSITIVE_Y,                 TEXTURE_CUBE_MAP_POSITIVE_Z,
TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_Y, or
TEXTURE_CUBE_MAP_NEGATIVE_Z. Otherwise, an INVALID_OPERATION error
is generated.
    level specifies the mipmap level of the texture image to be attached to the
framebuffer.
    If textarget is TEXTURE_RECTANGLE, then level must be zero.           If textar-
get is TEXTURE_3D, then level must be greater than or equal to zero and less
than or equal to log2 of the value of MAX_3D_TEXTURE_SIZE. If textarget is
one of TEXTURE_CUBE_MAP_POSITIVE_X, TEXTURE_CUBE_MAP_POSITIVE_-
Y, TEXTURE_CUBE_MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_-
X, TEXTURE_CUBE_MAP_NEGATIVE_Y, or TEXTURE_CUBE_MAP_NEGATIVE_Z,
then level must be greater than or equal to zero and less than or equal to log2 of
the value of MAX_CUBE_MAP_TEXTURE_SIZE. For all other values of textarget,
level must be greater than or equal to zero and no larger than log2 of the value of
MAX_TEXTURE_SIZE. Otherwise, an INVALID_VALUE error is generated.
    layer specifies the layer of a 2-dimensional image within a 3-dimensional tex-
ture. An INVALID_VALUE error is generated if layer is larger than the value of
MAX_3D_TEXTURE_SIZE-1.
    For FramebufferTexture1D, if texture is not zero, then textarget must be
TEXTURE_1D.
    For FramebufferTexture2D, if texture is not zero, then textarget must be one
of TEXTURE_2D, TEXTURE_RECTANGLE, TEXTURE_CUBE_MAP_POSITIVE_X,
TEXTURE_CUBE_MAP_POSITIVE_Y,                  TEXTURE_CUBE_MAP_POSITIVE_-
Z, TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_Y, or
TEXTURE_CUBE_MAP_NEGATIVE_Z.
    For FramebufferTexture3D, if texture is not zero, then textarget must be
TEXTURE_3D.
    If texture is not zero, and if FramebufferTexture* is successful, then the
specified texture image will be used as the logical buffer identified by attach-
ment of the framebuffer currently bound to target. The value of FRAMEBUFFER_-
ATTACHMENT_OBJECT_TYPE for the specified attachment point is set to TEXTURE
and the value of FRAMEBUFFER_ATTACHMENT_OBJECT_NAME is set to texture.
Additionally, the value of FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL for the
named attachment point is set to level. If texture is a cube map texture, then
the value of FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE for the
named attachment point is set to textarget. If texture is a 3D texture, then the

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                         310


value of FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER for the named attach-
ment point is set to layer. All other state values of the attachment point specified
by attachment are set to their default values listed in table 6.29. No change is made
to the state of the texture object, and any previous attachment to the attachment
logical buffer of the framebuffer object bound to framebuffer target is broken. If
the attachment is not successful, then no change is made to the state of either the
texture object or the framebuffer object.
    Setting attachment to the value DEPTH_STENCIL_ATTACHMENT is a special
case causing both the depth and stencil attachments of the framebuffer object to
be set to texture. texture must have base internal format DEPTH_STENCIL, or the
depth and stencil framebuffer attachments will be incomplete (see section 4.4.4).
    The command

        void FramebufferTextureLayer( enum target,
           enum attachment, uint texture, int level, int layer );

operates identically to FramebufferTexture3D, except that it attaches a single
layer of a three-dimensional texture or a one- or two-dimensional array texture.
layer is an integer indicating the layer number, and is treated identically to the
layer parameter in FramebufferTexture3D. The error INVALID_VALUE is gener-
ated if texture is non-zero and layer is negative. The error INVALID_OPERATION
is generated if texture is non-zero and is not the name of a three dimensional tex-
ture or one- or two-dimensional array texture. Unlike FramebufferTexture3D, no
textarget parameter is accepted.
    If texture is non-zero and the command does not result in an error, the frame-
buffer attachment state corresponding to attachment is updated as in the other
FramebufferTexture commands, except that FRAMEBUFFER_ATTACHMENT_-
TEXTURE_LAYER is set to layer.
    If a texture object is deleted while its image is attached to one or more attach-
ment points in the currently bound framebuffer, then it is as if FramebufferTex-
ture* had been called, with a texture of zero, for each attachment point to which
this image was attached in the currently bound framebuffer. In other words, this
texture image is first detached from all attachment points in the currently bound
framebuffer. Note that the texture image is specifically not detached from any
other framebuffer objects. Detaching the texture image from any other framebuffer
objects is the responsibility of the application.

4.4.3    Feedback Loops Between Textures and the Framebuffer
A feedback loop may exist when a texture object is used as both the source and
destination of a GL operation. When a feedback loop exists, undefined behavior

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                           311


results. This section describes rendering feedback loops (see section 3.9.8) and
texture copying feedback loops (see section 3.9.2) in more detail.

Rendering Feedback Loops
The mechanisms for attaching textures to a framebuffer object do not prevent a
one- or two-dimensional texture level, a face of a cube map texture level, or a
layer of a two-dimensional array or three-dimensional texture from being attached
to the draw framebuffer while the same texture is bound to a texture unit. While
this conditions holds, texturing operations accessing that image will produce unde-
fined results, as described at the end of section 3.9.8. Conditions resulting in such
undefined behavior are defined in more detail below. Such undefined texturing op-
erations are likely to leave the final results of the shader or fixed-function fragment
processing operations undefined, and should be avoided.
    Special precautions need to be taken to avoid attaching a texture image to the
currently bound framebuffer while the texture object is currently bound and en-
abled for texturing. Doing so could lead to the creation of a rendering feedback
loop between the writing of pixels by GL rendering operations and the simulta-
neous reading of those same pixels when used as texels in the currently bound
texture. In this scenario, the framebuffer will be considered framebuffer complete
(see section 4.4.4), but the values of fragments rendered while in this state will be
undefined. The values of texture samples may be undefined as well, as described
under “Rendering Feedback Loops” in section 3.9.8
    Specifically, the values of rendered fragments are undefined if all of the fol-
lowing conditions are true:

   • an image from texture object T is attached to the currently bound draw
     framebuffer at attachment point A

   • the texture object T is currently bound to a texture unit U, and

   • the current fixed-function texture state or programmable vertex and/or frag-
     ment processing state makes it possible (see below) to sample from the tex-
     ture object T bound to texture unit U

while either of the following conditions are true:

   • the value of TEXTURE_MIN_FILTER for texture object T is NEAREST or
     LINEAR, and the value of FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL
     for attachment point A is equal to the value of TEXTURE_BASE_LEVEL for
     the texture object T


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                        312


   • the value of TEXTURE_MIN_FILTER for texture object T is one
     of NEAREST_MIPMAP_NEAREST, NEAREST_MIPMAP_LINEAR, LINEAR_-
     MIPMAP_NEAREST, or LINEAR_MIPMAP_LINEAR, and the value of
     FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL for attachment point A is
     within the the range specified by the current values of TEXTURE_BASE_-
     LEVEL to q, inclusive, for the texture object T. (q is defined in the Mipmap-
     ping discussion of section 3.9.8).

    For the purpose of this discussion, it is possible to sample from the texture
object T bound to texture unit U if any of the following are true:

   • Programmable fragment processing is disabled and the target of texture ob-
     ject T is enabled according to the texture target precedence rules of sec-
     tion 3.9.18

   • The active fragment or vertex shader contains any instructions that might
     sample from the texture object T bound to U, even if those instructions might
     only be executed conditionally.

    Note that if TEXTURE_BASE_LEVEL and TEXTURE_MAX_LEVEL exclude any
levels containing image(s) attached to the currently bound framebuffer, then the
above conditions will not be met (i.e., the above rule will not cause the values of
rendered fragments to be undefined.)

Texture Copying Feedback Loops
Similarly to rendering feedback loops, it is possible for a texture image to be
attached to the read framebuffer while the same texture image is the destination
of a CopyTexImage* operation, as described under “Texture Copying Feedback
Loops” in section 3.9.2. While this condition holds, a texture copying feedback
loop between the writing of texels by the copying operation and the reading of
those same texels when used as pixels in the read framebuffer may exist. In this
scenario, the values of texels written by the copying operation will be undefined
(in the same fashion that overlapping copies via BlitFramebuffer are undefined).
     Specifically, the values of copied texels are undefined if all of the following
conditions are true:

   • an image from texture object T is attached to the currently bound read frame-
     buffer at attachment point A

   • the selected read buffer is attachment point A


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          313


   • T is bound to the texture target of a CopyTexImage* operation

   • the level argument of the copying operation selects the same image that is
     attached to A

4.4.4   Framebuffer Completeness
A framebuffer must be framebuffer complete to effectively be used as the draw or
read framebuffer of the GL.
    The default framebuffer is always complete if it exists; however, if no default
framebuffer exists (no window system-provided drawable is associated with the
GL context), it is deemed to be incomplete.
    A framebuffer object is said to be framebuffer complete if all of its attached
images, and all framebuffer parameters required to utilize the framebuffer for ren-
dering and reading, are consistently defined and meet the requirements defined
below. The rules of framebuffer completeness are dependent on the properties of
the attached images, and on certain implementation-dependent restrictions.
    The internal formats of the attached images can affect the completeness of
the framebuffer, so it is useful to first define the relationship between the internal
format of an image and the attachment points to which it can be attached.

   • The following base internal formats from table 3.16 are color-renderable:
     ALPHA, RED, RG, RGB, and RGBA. The sized internal formats from ta-
     ble 3.17 that have a color-renderable base internal format are also color-
     renderable. No other formats, including compressed internal formats, are
     color-renderable.

   • An internal format is depth-renderable if it is DEPTH_COMPONENT or one
     of the formats from table 3.19 whose base internal format is DEPTH_-
     COMPONENT or DEPTH_STENCIL. No other formats are depth-renderable.

   • An internal format is stencil-renderable if it is STENCIL_INDEX or
     DEPTH_STENCIL, if it is one of the STENCIL_INDEX formats from ta-
     ble 4.11, or if it is one of the formats from table 3.19 whose base internal
     format is DEPTH_STENCIL. No other formats are stencil-renderable.

Framebuffer Attachment Completeness
If the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE for the framebuffer
attachment point attachment is not NONE, then it is said that a framebuffer-
attachable image, named image, is attached to the framebuffer at the attachment
point. image is identified by the state in attachment as described in section 4.4.2.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                          314


    The framebuffer attachment point attachment is said to be framebuffer attach-
ment complete if the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE for
attachment is NONE (i.e., no image is attached), or if all of the following conditions
are true:

   • image is a component of an existing object with the name specified by
     FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, and of the type specified by
     FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE.

   • The width and height of image are non-zero.

   • If    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is TEXTURE and
      FRAMEBUFFER_ATTACHMENT_OBJECT_NAME names a three-dimensional
      texture, then FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER must be
      smaller than the depth of the texture.

   • If   FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is TEXTURE and
      FRAMEBUFFER_ATTACHMENT_OBJECT_NAME names a one- or two-
      dimensional array texture, then FRAMEBUFFER_ATTACHMENT_TEXTURE_-
      LAYER must be smaller than the number of layers in the texture.

   • If attachment is COLOR_ATTACHMENTi, then image must have a color-
     renderable internal format.

   • If attachment is DEPTH_ATTACHMENT, then image must have a depth-
     renderable internal format.

   • If attachment is STENCIL_ATTACHMENT, then image must have a stencil-
     renderable internal format.

Whole Framebuffer Completeness
Each rule below is followed by an error token enclosed in { brackets }. The mean-
ing of these errors is explained below and under “Effects of Framebuffer Com-
pleteness on Framebuffer Operations” later in section 4.4.4.
    The framebuffer object target is said to be framebuffer complete if all the fol-
lowing conditions are true:

   • target is the default framebuffer, and the default framebuffer exists.

      { FRAMEBUFFER_UNDEFINED }



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                      315


   • All framebuffer attachment points are framebuffer attachment complete.

      { FRAMEBUFFER_INCOMPLETE_ATTACHMENT }

   • There is at least one image attached to the framebuffer.

      { FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT }

   • The value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE must not be
     NONE for any color attachment point(s) named by DRAW_BUFFERi.

      { FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER }

   • If READ_BUFFER is not NONE, then the value of FRAMEBUFFER_-
     ATTACHMENT_OBJECT_TYPE must not be NONE for the color attachment
     point named by READ_BUFFER.

      { FRAMEBUFFER_INCOMPLETE_READ_BUFFER }

   • The combination of internal formats of the attached images does not violate
     an implementation-dependent set of restrictions.

      { FRAMEBUFFER_UNSUPPORTED }

   • The value of RENDERBUFFER_SAMPLES is the same for all attached render-
     buffers; and, if the attached images are a mix of renderbuffers and textures,
     the value of RENDERBUFFER_SAMPLES is zero for all attached renderbuffers.

      { FRAMEBUFFER_INCOMPLETE_MULTISAMPLE }

    The token in brackets after each clause of the framebuffer completeness rules
specifies the return value of CheckFramebufferStatus (see below) that is gen-
erated when that clause is violated. If more than one clause is violated, it is
implementation-dependent which value will be returned by CheckFramebuffer-
Status.
    Performing any of the following actions may change whether the framebuffer
is considered complete or incomplete:

   • Binding to a different framebuffer with BindFramebuffer.

   • Attaching an image to the framebuffer with FramebufferTexture* or
     FramebufferRenderbuffer.

           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                         316


   • Detaching an image from the framebuffer with FramebufferTexture* or
     FramebufferRenderbuffer.

   • Changing the internal format of a texture image that is attached to the frame-
     buffer by calling CopyTexImage* or CompressedTexImage*.

   • Changing the internal format of a renderbuffer that is attached to the frame-
     buffer by calling RenderbufferStorage.

   • Deleting, with DeleteTextures or DeleteRenderbuffers, an object contain-
     ing an image that is attached to a framebuffer object that is bound to the
     framebuffer.

   • Changing the read buffer or one of the draw buffers.

   • Associating a different window system-provided drawable, or no drawable,
     with the default framebuffer using a window system binding API such as
     those described in section 1.7.2.

    Although the GL defines a wide variety of internal formats for framebuffer-
attachable images, such as texture images and renderbuffer images, some imple-
mentations may not support rendering to particular combinations of internal for-
mats. If the combination of formats of the images attached to a framebuffer object
are not supported by the implementation, then the framebuffer is not complete un-
der the clause labeled FRAMEBUFFER_UNSUPPORTED.
    Implementations are required to support certain combinations of framebuffer
internal formats as described under “Required Framebuffer Formats” in sec-
tion 4.4.4.
    Because of the implementation-dependent clause of the framebuffer complete-
ness test in particular, and because framebuffer completeness can change when the
set of attached images is modified, it is strongly advised, though not required, that
an application check to see if the framebuffer is complete prior to rendering. The
status of the framebuffer object currently bound to target can be queried by calling

      enum CheckFramebufferStatus( enum target );

   target must be DRAW_FRAMEBUFFER, READ_FRAMEBUFFER, or
FRAMEBUFFER. FRAMEBUFFER is equivalent to DRAW_FRAMEBUFFER. If Check-
FramebufferStatus is called within a Begin/End pair, an INVALID_OPERATION
error is generated.     If CheckFramebufferStatus generates an error, zero is
returned.



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                       317


    Otherwise, a value is returned that identifies whether or not the framebuffer
bound to target is complete, and if not complete the value identifies one of the
rules of framebuffer completeness that is violated. If the framebuffer is complete,
then FRAMEBUFFER_COMPLETE is returned.
    The values of SAMPLE_BUFFERS and SAMPLES are derived from the at-
tachments of the currently bound framebuffer object. If the current DRAW_-
FRAMEBUFFER_BINDING is not framebuffer complete, then both SAMPLE_-
BUFFERS and SAMPLES are undefined. Otherwise, SAMPLES is equal to the value
of RENDERBUFFER_SAMPLES for the attached images (which all must have the
same value for RENDERBUFFER_SAMPLES). Further, SAMPLE_BUFFERS is one if
SAMPLES is non-zero. Otherwise, SAMPLE_BUFFERS is zero.

Required Framebuffer Formats
Implementations must support framebuffer objects with up to MAX_COLOR_-
ATTACHMENTS color attachments, a depth attachment, and a stencil attachment.
Each color attachment may be in any of the required color formats for textures
and renderbuffers described in sections 3.9.1 and 4.4.2. The depth attachment may
be in any of the required depth or combined depth+stencil formats described in
those sections, and the stencil attachment may be in any of the required combined
depth+stencil formats.
    There must be at least one default framebuffer format allowing creation of a
default framebuffer supporting front-buffered rendering.

Effects of Framebuffer Completeness on Framebuffer Operations
Attempting to render to or read from a framebuffer which is not framebuffer com-
plete will generate an INVALID_FRAMEBUFFER_OPERATION error. This means
that rendering commands such as Begin, RasterPos, any command that per-
forms an implicit Begin, as well as commands that read the framebuffer such
as ReadPixels, CopyTexImage, and CopyTexSubImage, will generate the er-
ror INVALID_FRAMEBUFFER_OPERATION if called while the framebuffer is not
framebuffer complete.

4.4.5   Effects of Framebuffer State on Framebuffer Dependent Values
The values of the state variables listed in table 6.55 may change when a change
is made to DRAW_FRAMEBUFFER_BINDING, to the state of the currently bound
framebuffer object, or to an image attached to the currently bound framebuffer
object.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                        318


     When DRAW_FRAMEBUFFER_BINDING is zero, the values of the state variables
listed in table 6.55 are implementation defined.
     When DRAW_FRAMEBUFFER_BINDING is non-zero, if the currently bound
framebuffer object is not framebuffer complete, then the values of the state vari-
ables listed in table 6.55 are undefined.
     When DRAW_FRAMEBUFFER_BINDING is non-zero and the currently bound
framebuffer object is framebuffer complete, then the values of the state variables
listed in table 6.55 are completely determined by DRAW_FRAMEBUFFER_BINDING,
the state of the currently bound framebuffer object, and the state of the images
attached to the currently bound framebuffer object. The values of RED_BITS,
GREEN_BITS, BLUE_BITS, and ALPHA_BITS are defined only if all color attach-
ments of the draw framebuffer have identical formats, in which case the color
component depths of color attachment zero are returned. The values returned for
DEPTH_BITS and STENCIL_BITS are the depth or stencil component depth of the
corresponding attachment of the draw framebuffer, respectively. The actual sizes
of the color, depth, or stencil bit planes can be obtained by querying an attachment
point using GetFramebufferAttachmentParameteriv, or querying the object at-
tached to that point. If the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE
at a particular attachment point is RENDERBUFFER, the sizes may be determined by
calling GetRenderbufferParameteriv as described in section 6.1.3. If the value
of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE at a particular attachment point
is TEXTURE, the sizes may be determined by calling GetTexParameter, as de-
scribed in section 6.1.3.

4.4.6   Mapping between Pixel and Element in Attached Image
When DRAW_FRAMEBUFFER_BINDING is non-zero, an operation that writes to the
framebuffer modifies the image attached to the selected logical buffer, and an oper-
ation that reads from the framebuffer reads from the image attached to the selected
logical buffer.
    If the attached image is a renderbuffer image, then the window coordinates
(xw , yw ) corresponds to the value in the renderbuffer image at the same coordi-
nates.
    If the attached image is a texture image, then the window coordinates (xw , yw )
correspond to the texel (i, j, k) from figure 3.10 as follows:

                                   i = (xw − b)

                                   j = (yw − b)
                                 k = (layer − b)

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
4.4. FRAMEBUFFER OBJECTS                                                             319


where b is the texture image’s border width and layer is the value of
FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER for the selected logical buffer.
For a two-dimensional texture, k and layer are irrelevant; for a one-dimensional
texture, j, k, and layer are irrelevant.
    (xw , yw ) corresponds to a border texel if xw , yw , or layer is less than the border
width, or if xw , yw , or layer is greater than or equal to the border width plus the
width, height, or depth, respectively, of the texture image.

Conversion to Framebuffer-Attachable Image Components
When an enabled color value is written to the framebuffer while the draw frame-
buffer binding is non-zero, for each draw buffer the R, G, B, and A values are
converted to internal components as described in table 3.16, according to the ta-
ble row corresponding to the internal format of the framebuffer-attachable image
attached to the selected logical buffer, and the resulting internal components are
written to the image attached to logical buffer. The masking operations described
in section 4.2.2 are also effective.

Conversion to RGBA Values
When a color value is read or is used as the source of a logical operation or blending
while the read framebuffer binding is non-zero, the components of the framebuffer-
attachable image that is attached to the logical buffer selected by READ_BUFFER
are first converted to R, G, B, and A values according to table 3.25 and the internal
format of the attached image.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Chapter 5

Special Functions

This chapter describes additional GL functionality that does not fit easily into any
of the preceding chapters. This functionality consists of evaluators (used to model
curves and surfaces), selection (used to locate rendered primitives on the screen),
feedback (which returns GL results before rasterization), display lists (used to des-
ignate a group of GL commands for later execution by the GL), flushing and
finishing (used to synchronize the GL command stream), and hints.


5.1    Evaluators
Evaluators provide a means to use a polynomial or rational polynomial mapping
to produce vertex, normal, and texture coordinates, and colors. The values so pro-
duced are sent on to further stages of the GL as if they had been provided directly
by the client. Transformations, lighting, primitive assembly, rasterization, and per-
pixel operations are not affected by the use of evaluators.
    Consider the Rk -valued polynomial p(u) defined by
                                         n
                               p(u) =         Bin (u)Ri                         (5.1)
                                        i=0

with Ri ∈   Rk   and
                                        n i
                           Bin (u) =      u (1 − u)n−i ,
                                        i
                                                                     n
the ith Bernstein polynomial of degree n (recall that 00 ≡ 1 and     0   ≡ 1). Each
Ri is a control point. The relevant command is

      void Map1{fd}( enum target, T u1 , T u2 , int stride,
         int order, T points );

                                        320
5.1. EVALUATORS                                                                321


 target                         k       Values
 MAP1_VERTEX_3                  3       x, y, z vertex coordinates
 MAP1_VERTEX_4                  4       x, y, z, w vertex coordinates
 MAP1_INDEX                     1       color index
 MAP1_COLOR_4                   4       R, G, B, A
 MAP1_NORMAL                    3       x, y, z normal coordinates
 MAP1_TEXTURE_COORD_1           1       s texture coordinate
 MAP1_TEXTURE_COORD_2           2       s, t texture coordinates
 MAP1_TEXTURE_COORD_3           3       s, t, r texture coordinates
 MAP1_TEXTURE_COORD_4           4       s, t, r, q texture coordinates


Table 5.1: Values specified by the target to Map1. Values are given in the order in
which they are taken.


target is a symbolic constant indicating the range of the defined polynomial. Its
possible values, along with the evaluations that each indicates, are given in ta-
ble 5.1. order is equal to n + 1; The error INVALID_VALUE is generated if order
is less than one or greater than MAX_EVAL_ORDER. points is a pointer to a set of
n + 1 blocks of storage. Each block begins with k single-precision floating-point
or double-precision floating-point values, respectively. The rest of the block may
be filled with arbitrary data. Table 5.1 indicates how k depends on target and what
the k values represent in each case.
     stride is the number of single- or double-precision values (as appropriate) in
each block of storage. The error INVALID_VALUE results if stride is less than
k. The order of the polynomial, order, is also the number of blocks of storage
containing control points.
     u1 and u2 give two floating-point values that define the endpoints of the pre-
image of the map. When a value u is presented for evaluation, the formula used
is
                                             u − u1
                                p (u ) = p(          ).
                                             u2 − u1
The error INVALID_VALUE results if u1 = u2 .
    Map2 is analogous to Map1, except that it describes bivariate polynomials of
the form
                                    n     m
                      p(u, v) =               Bin (u)Bjm (v)Rij .
                                    i=0 j=0

The form of the Map2 command is


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.1. EVALUATORS                                                                                  322



           Integers                   Reals
                                                                           Vertices
                      k                   [u1,u2]                          Normals
                                                                   ΣBiRi
      EvalMesh                                             [0,1]
                                                    Ax+b                   Texture Coordinates
      EvalPoint       l                   [v1,v2]
                                                           [0,1]
                                                                           Colors


                          MapGrid                            Map
                                    EvalCoord




   Figure 5.1. Map Evaluation.



      void Map2{fd}( enum target, T u1 , T u2 , int ustride,
         int uorder, T v1 , T v2 , int vstride, int vorder, T points );

target is a range type selected from the same group as is used for Map1, except that
the string MAP1 is replaced with MAP2. points is a pointer to (n+1)(m+1) blocks
of storage (uorder = n + 1 and vorder = m + 1; the error INVALID_VALUE is
generated if either uorder or vorder is less than one or greater than MAX_EVAL_-
ORDER). The values comprising Rij are located

                                ustride × i + vstride × j

values (either single- or double-precision floating-point, as appropriate) past the
first value pointed to by points. u1 , u2 , v1 , and v2 define the pre-image rectangle
of the map; a domain point (u , v ) is evaluated as

                                              u − u1 v − v1
                            p (u , v ) = p(          ,        ).
                                              u2 − u1 v2 − v1
     The evaluation of a defined map is enabled or disabled with Enable and Dis-
able using the constant corresponding to the map as described above. The evaluator
map generates only coordinates for texture unit TEXTURE0. The error INVALID_-
VALUE results if either ustride or vstride is less than k, or if u1 is equal to u2,
or if v1 is equal to v2 . If the value of ACTIVE_TEXTURE is not TEXTURE0, calling
Map{12} generates the error INVALID_OPERATION.
     Figure 5.1 describes map evaluation schematically; an evaluation of enabled
maps is effected in one of two ways. The first way is to use

      void EvalCoord{12}{fd}( T arg );
      void EvalCoord{12}{fd}v( T arg );

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.1. EVALUATORS                                                                          323


EvalCoord1 causes evaluation of the enabled one-dimensional maps. The argu-
ment is the value (or a pointer to the value) that is the domain coordinate, u . Eval-
Coord2 causes evaluation of the enabled two-dimensional maps. The two values
specify the two domain coordinates, u and v , in that order.
    When one of the EvalCoord commands is issued, all currently enabled maps
of the indicated dimension are evaluated. Then, for each enabled map, it is as if a
corresponding GL command were issued with the resulting coordinates, with one
important difference. The difference is that when an evaluation is performed, the
GL uses evaluated values instead of current values for those evaluations that are
enabled (otherwise, the current values are used). The order of the effective com-
mands is immaterial, except that Vertex (for vertex coordinate evaluation) must be
issued last. Use of evaluators has no effect on the current color, normal, or texture
coordinates. If ColorMaterial is enabled, evaluated color values affect the result
of the lighting equation as if the current color was being modified, but no change
is made to the tracking lighting parameters or to the current color.
    No command is effectively issued if the corresponding map (of the indicated
dimension) is not enabled. If more than one evaluation is enabled for a particular
dimension (e.g. MAP1_TEXTURE_COORD_1 and MAP1_TEXTURE_COORD_2), then
only the result of the evaluation of the map with the highest number of coordinates
is used.
    Finally, if either MAP2_VERTEX_3 or MAP2_VERTEX_4 is enabled, then the
normal to the surface is computed. Analytic computation, which sometimes yields
normals of length zero, is one method which may be used. If automatic normal
generation is enabled, then this computed normal is used as the normal associated
with a generated vertex. Automatic normal generation is controlled with Enable
and Disable with the symbolic constant AUTO_NORMAL. If automatic normal gen-
eration is disabled, then a corresponding normal map, if enabled, is used to produce
a normal. If neither automatic normal generation nor a normal map are enabled,
then no normal is sent with a vertex resulting from an evaluation (the effect is that
the current normal is used).
    For MAP2_VERTEX_3, let q = p. For MAP2_VERTEX_4, let q =
(x/w, y/w, z/w), where (x, y, z, w) = p. Then let

                                         ∂q ∂q
                                  m=         ×     .
                                         ∂u     ∂v
Then the generated analytic normal, n, is given by n = m if a vertex shader is
                         m
active, or else by n = m    .
    The second way to carry out evaluations is to use a set of commands that pro-
vide for efficient specification of a series of evenly spaced values to be mapped.
This method proceeds in two steps. The first step is to define a grid in the domain.

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.1. EVALUATORS                                                                  324


This is done using

      void MapGrid1{fd}( int n, T u1 , T u2 );

for a one-dimensional map or

      void MapGrid2{fd}( int nu , T u1 , T u2 , int nv , T v1 ,
         T v2 );

for a two-dimensional map. In the case of MapGrid1 u1 and u2 describe an
interval, while n describes the number of partitions of the interval. The error
INVALID_VALUE results if n ≤ 0. For MapGrid2, (u1 , v1 ) specifies one two-
dimensional point and (u2 , v2 ) specifies another. nu gives the number of partitions
between u1 and u2 , and nv gives the number of partitions between v1 and v2 . If
either nu ≤ 0 or nv ≤ 0, then the error INVALID_VALUE occurs.
    Once a grid is defined, an evaluation on a rectangular subset of that grid may
be carried out by calling

      void EvalMesh1( enum mode, int p1 , int p2 );

mode is either POINT or LINE. The effect is the same as performing the following
code fragment, with ∆u = (u2 − u1 )/n:

         Begin(type);
           for i = p1 to p2 step 1.0
              EvalCoord1(i * ∆u + u1 );
         End();

where EvalCoord1f or EvalCoord1d is substituted for EvalCoord1 as appropri-
ate. If mode is POINT, then type is POINTS; if mode is LINE, then type is LINE_-
STRIP. The one requirement is that if either i = 0 or i = n, then the value com-
puted from i ∗ ∆u + u1 is precisely u1 or u2 , respectively.
    The corresponding commands for two-dimensional maps are

      void EvalMesh2( enum mode, int p1 , int p2 , int q1 ,
        int q2 );

mode must be FILL, LINE, or POINT. When mode is FILL, then these commands
are equivalent to the following, with ∆u = (u2 − u1 )/n and ∆v = (v2 − v1 )/m:




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.1. EVALUATORS                                                                 325


         for i = q1 to q2 − 1 step 1.0
            Begin(QUAD_STRIP);
               for j = p1 to p2 step 1.0
                  EvalCoord2(j * ∆u + u1 , i * ∆v + v1 );
                  EvalCoord2(j * ∆u + u1 , (i + 1) * ∆v + v1 );
            End();

If mode is LINE, then a call to EvalMesh2 is equivalent to

         for i = q1 to q2 step 1.0
            Begin(LINE_STRIP);
            for j = p1 to p2 step 1.0
               EvalCoord2(j * ∆u + u1 , i * ∆v + v1 );
            End();;
         for i = p1 to p2 step 1.0
            Begin(LINE_STRIP);
            for j = q1 to q2 step 1.0
               EvalCoord2(i * ∆u + u1 , j * ∆v + v1 );
            End();

If mode is POINT, then a call to EvalMesh2 is equivalent to

         Begin(POINTS);
           for i = q1 to q2 step 1.0
              for j = p1 to p2 step 1.0
                 EvalCoord2(j * ∆u + u1 , i * ∆v + v1 );
         End();

Again, in all three cases, there is the requirement that 0 ∗ ∆u + u1 = u1 , n ∗ ∆u +
u1 = u2 , 0 ∗ ∆v + v1 = v1 , and m ∗ ∆v + v1 = v2 .
   An evaluation of a single point on the grid may also be carried out:

      void EvalPoint1( int p );

Calling it is equivalent to the command

         EvalCoord1(p * ∆u + u1 );

with ∆u and u1 defined as above.

      void EvalPoint2( int p, int q );

is equivalent to the command

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.2. SELECTION                                                                    326


         EvalCoord2(p * ∆u + u1 , q * ∆v + v1 );


    The state required for evaluators potentially consists of 9 one-dimensional map
specifications and 9 two-dimensional map specifications, as well as corresponding
flags for each specification indicating which are enabled. Each map specification
consists of one or two orders, an appropriately sized array of control points, and a
set of two values (for a one-dimensional map) or four values (for a two-dimensional
map) to describe the domain. The maximum possible order, for either u or v, is
implementation-dependent (one maximum applies to both u and v), but must be at
least 8. Each control point consists of between one and four floating-point values
(depending on the type of the map). Initially, all maps have order 1 (making them
constant maps). All vertex coordinate maps produce the coordinates (0, 0, 0, 1)
(or the appropriate subset); all normal coordinate maps produce (0, 0, 1); RGBA
maps produce (1, 1, 1, 1); color index maps produce 1.0; and texture coordinate
maps produce (0, 0, 0, 1). In the initial state, all maps are disabled. A flag indi-
cates whether or not automatic normal generation is enabled for two-dimensional
maps. In the initial state, automatic normal generation is disabled. Also required
are two floating-point values and an integer number of grid divisions for the one-
dimensional grid specification and four floating-point values and two integer grid
divisions for the two-dimensional grid specification. In the initial state, the bounds
of the domain interval for 1-D is 0 and 1.0, respectively; for 2-D, they are (0, 0)
and (1.0, 1.0), respectively. The number of grid divisions is 1 for 1-D and 1 in
both directions for 2-D. If any evaluation command is issued when no vertex map
is enabled for the map dimension being evaluated, nothing happens.


5.2    Selection
Selection is used to determine which primitives are drawn into some region of a
window. The region is defined by the current model-view and perspective matrices.
    Selection works by returning an array of integer-valued names. This array
represents the current contents of the name stack. This stack is controlled with the
commands
      void    InitNames( void );
      void    PopName( void );
      void    PushName( uint name );
      void    LoadName( uint name );
InitNames empties (clears) the name stack. PopName pops one name off the top
of the name stack. PushName causes name to be pushed onto the name stack.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.2. SELECTION                                                                     327


LoadName replaces the value on the top of the stack with name. Loading a name
onto an empty stack generates the error INVALID_OPERATION. Popping a name
off of an empty stack generates STACK_UNDERFLOW; pushing a name onto a full
stack generates STACK_OVERFLOW. The maximum allowable depth of the name
stack is implementation-dependent but must be at least 64.
    In selection mode, framebuffer updates as described in chapter 4 are not per-
formed. The GL is placed in selection mode with

      int RenderMode( enum mode );

mode is a symbolic constant: one of RENDER, SELECT, or FEEDBACK. RENDER is
the default, corresponding to rendering as described until now. SELECT specifies
selection mode, and FEEDBACK specifies feedback mode (described below). Use
of any of the name stack manipulation commands while the GL is not in selection
mode has no effect.
    Selection is controlled using

      void SelectBuffer( sizei n, uint *buffer );

buffer is a pointer to an array of unsigned integers (called the selection array) to be
potentially filled with names, and n is an integer indicating the maximum number
of values that can be stored in that array. Placing the GL in selection mode before
SelectBuffer has been called results in an error of INVALID_OPERATION as does
calling SelectBuffer while in selection mode.
     In selection mode, if a point, line, polygon, or the valid coordinates produced
by a RasterPos command intersects the clip volume (section 2.20) then this prim-
itive (or RasterPos command) causes a selection hit. WindowPos commands al-
ways generate a selection hit, since the resulting raster position is always valid.
In the case of polygons, no hit occurs if the polygon would have been culled, but
selection is based on the polygon itself, regardless of the setting of PolygonMode.
When in selection mode, whenever a name stack manipulation command is exe-
cuted or RenderMode is called and there has been a hit since the last time the stack
was manipulated or RenderMode was called, then a hit record is written into the
selection array.
     A hit record consists of the following items in order: a non-negative integer
giving the number of elements on the name stack at the time of the hit, a minimum
depth value, a maximum depth value, and the name stack with the bottommost el-
ement first. The minimum and maximum depth values are the minimum and max-
imum taken over all the window coordinate z values of each (post-clipping) vertex
of each primitive that intersects the clipping volume since the last hit record was


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.3. FEEDBACK                                                                    328


written. The minimum and maximum (each of which lies in the range [0, 1]) are
each multiplied by 232 −1 and rounded to the nearest unsigned integer to obtain the
values that are placed in the hit record. No depth offset arithmetic (section 3.6.5)
is performed on these values.
    Hit records are placed in the selection array by maintaining a pointer into that
array. When selection mode is entered, the pointer is initialized to the beginning
of the array. Each time a hit record is copied, the pointer is updated to point at
the array element after the one into which the topmost element of the name stack
was stored. If copying the hit record into the selection array would cause the total
number of values to exceed n, then as much of the record as fits in the array is
written and an overflow flag is set.
    Selection mode is exited by calling RenderMode with an argument value other
than SELECT. When called while in selection mode, RenderMode returns the
number of hit records copied into the selection array and resets the SelectBuffer
pointer to its last specified value. Values are not guaranteed to be written into the
selection array until RenderMode is called. If the selection array overflow flag
was set, then RenderMode returns −1 and clears the overflow flag. The name
stack is cleared and the stack pointer reset whenever RenderMode is called.
    The state required for selection consists of the address of the selection array
and its maximum size, the name stack and its associated pointer, a minimum and
maximum depth value, and several flags. One flag indicates the current Render-
Mode value. In the initial state, the GL is in the RENDER mode. Another flag is
used to indicate whether or not a hit has occurred since the last name stack ma-
nipulation. This flag is reset upon entering selection mode and whenever a name
stack manipulation takes place. One final flag is required to indicate whether the
maximum number of copied names would have been exceeded. This flag is reset
upon entering selection mode. This flag, the address of the selection array, and its
maximum size are GL client state.


5.3    Feedback
The GL is placed in feedback mode by calling RenderMode with FEEDBACK.
When in feedback mode, framebuffer updates as described in chapter 4 are not
performed. Instead, information about primitives that would have otherwise been
rasterized is returned to the application via the feedback buffer.
    Feedback is controlled using

      void FeedbackBuffer( sizei n, enum type, float *buffer );



            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.3. FEEDBACK                                                                     329


buffer is a pointer to an array of floating-point values into which feedback infor-
mation will be placed, and n is a number indicating the maximum number of val-
ues that can be written to that array. type is a symbolic constant describing the
information to be fed back for each vertex (see figure 5.2). The error INVALID_-
OPERATION results if the GL is placed in feedback mode before a call to Feed-
backBuffer has been made, or if a call to FeedbackBuffer is made while in feed-
back mode.
     While in feedback mode, each primitive that would be rasterized (or bitmap
or call to DrawPixels or CopyPixels, if the raster position is valid) generates a
block of values that get copied into the feedback array. If doing so would cause
the number of entries to exceed the maximum, the block is partially written so as
to fill the array (if there is any room left at all). The first block of values gener-
ated after the GL enters feedback mode is placed at the beginning of the feedback
array, with subsequent blocks following. Each block begins with a code indicat-
ing the primitive type, followed by values that describe the primitive’s vertices and
associated data. Entries are also written for bitmaps and pixel rectangles. Feed-
back occurs after polygon culling (section 3.6.1) and PolygonMode interpretation
of polygons (section 3.6.4) has taken place. It may also occur after polygons with
more than three edges are broken up into triangles (if the GL implementation ren-
ders polygons by performing this decomposition). x, y, and z coordinates returned
by feedback are window coordinates; if w is returned, it is in clip coordinates. No
depth offset arithmetic (section 3.6.5) is performed on the z values. In the case
of bitmaps and pixel rectangles, the coordinates returned are those of the current
raster position.
     The texture coordinates and colors returned are those resulting from the clip-
ping operations described in section 2.20.1. Only coordinates for texture unit
TEXTURE0 are returned even for implementations which support multiple texture
units. The colors returned are the primary colors.
     The ordering rules for GL command interpretation also apply in feedback
mode. Each command must be fully interpreted and its effects on both GL state
and the values to be written to the feedback buffer completed before a subsequent
command may be executed.
     Feedback mode is exited by calling RenderMode with an argument value other
than FEEDBACK. When called while in feedback mode, RenderMode returns the
number of values placed in the feedback array and resets the feedback array pointer
to be buffer. The return value never exceeds the maximum number of values passed
to FeedbackBuffer.
     If writing a value to the feedback buffer would cause more values to be written
than the specified maximum number of values, then the value is not written and an
overflow flag is set. In this case, RenderMode returns −1 when it is called, after

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.4. DISPLAY LISTS                                                                 330


                Type             coordinates    color    texture   total values
              2D                 x, y           –        –         2
              3D                 x, y, z        –        –         3
           3D_COLOR              x, y, z        k        –         3+k
       3D_COLOR_TEXTURE          x, y, z        k        4         7+k
       4D_COLOR_TEXTURE          x, y, z, w     k        4         8+k


Table 5.2: Correspondence of feedback type to number of values per vertex. k is 1
in color index mode and 4 in RGBA mode.

which the overflow flag is reset. While in feedback mode, values are not guaranteed
to be written into the feedback buffer before RenderMode is called.
     Figure 5.2 gives a grammar for the array produced by feedback. Each primitive
is indicated with a unique identifying value followed by some number of vertices.
A vertex is fed back as some number of floating-point values determined by the
feedback type. Table 5.2 gives the correspondence between type and the number of
values returned for each vertex.
     The command

      void PassThrough( float token );

may be used as a marker in feedback mode. token is returned as if it were a prim-
itive; it is indicated with its own unique identifying value. The ordering of any
PassThrough commands with respect to primitive specification is maintained by
feedback. PassThrough may not occur between Begin and End. It has no effect
when the GL is not in feedback mode.
     The state required for feedback is the pointer to the feedback array, the maxi-
mum number of values that may be placed there, and the feedback type. An over-
flow flag is required to indicate whether the maximum allowable number of feed-
back values has been written; initially this flag is cleared. These state variables are
GL client state. Feedback also relies on the same mode flag as selection to indicate
whether the GL is in feedback, selection, or normal rendering mode.


5.4    Display Lists
A display list is simply a group of GL commands and arguments that has been
stored for subsequent execution. The GL may be instructed to process a particular
display list (possibly repeatedly) by providing a number that uniquely specifies it.
Doing so causes the commands within the list to be executed just as if they were

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.4. DISPLAY LISTS                                                            331




feedback-list:
      feedback-item feedback-list             pixel-rectangle:
      feedback-item                                     DRAW_PIXEL_TOKEN vertex
                                                        COPY_PIXEL_TOKEN vertex
feedback-item:                                passthrough:
      point                                             PASS_THROUGH_TOKEN f
      line-segment
      polygon                                 vertex:
      bitmap                                  2D:
      pixel-rectangle                                   ff
      passthrough                             3D:
                                                   fff
point:                                        3D_COLOR:
         POINT_TOKEN vertex                        f f f color
line-segment:                                 3D_COLOR_TEXTURE:
         LINE_TOKEN vertex vertex                       f f f color tex
         LINE_RESET_TOKEN vertex vertex       4D_COLOR_TEXTURE:
polygon:                                                f f f f color tex
         POLYGON_TOKEN n polygon-spec
polygon-spec:                                 color:
      polygon-spec vertex                               ffff
      vertex vertex vertex                              f
bitmap:
      BITMAP_TOKEN vertex                     tex:
                                                        ffff


Figure 5.2: Feedback syntax. f is a floating-point number. n is a floating-point
integer giving the number of vertices in a polygon. The symbols ending with
_TOKEN are symbolic floating-point constants. The labels under the “vertex”
rule show the different data returned for vertices depending on the feedback type.
LINE_TOKEN and LINE_RESET_TOKEN are identical except that the latter is re-
turned only when the line stipple is reset for that line segment.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.4. DISPLAY LISTS                                                                  332


given normally. The only exception pertains to commands that rely upon client
state. When such a command is accumulated into the display list (that is, when
issued, not when executed), the client state in effect at that time applies to the com-
mand. Only server state is affected when the command is executed. As always,
pointers which are passed as arguments to commands are dereferenced when the
command is issued. (Vertex array pointers are dereferenced when the commands
ArrayElement, DrawArrays, DrawElements, or DrawRangeElements are ac-
cumulated into a display list.)
    A display list is begun by calling

      void NewList( uint n, enum mode );

n is a positive integer to which the display list that follows is assigned, and mode is a
symbolic constant that controls the behavior of the GL during display list creation.
If mode is COMPILE, then commands are not executed as they are placed in the
display list. If mode is COMPILE_AND_EXECUTE then commands are executed as
they are encountered, then placed in the display list. If n = 0, then the error
INVALID_VALUE is generated.
     After calling NewList all subsequent GL commands are placed in the display
list (in the order the commands are issued) until a call to

      void EndList( void );

occurs, after which the GL returns to its normal command execution state. It is
only when EndList occurs that the specified display list is actually associated with
the index indicated with NewList. The error INVALID_OPERATION is generated
if EndList is called without a previous matching NewList, or if NewList is called
a second time before calling EndList. The error OUT_OF_MEMORY is generated if
EndList is called and the specified display list cannot be stored because insufficient
memory is available. In this case GL implementations of revision 1.1 or greater
insure that no change is made to the previous contents of the display list, if any,
and that no other change is made to the GL state, except for the state changed
by execution of GL commands when the display list mode is COMPILE_AND_-
EXECUTE.
    Once defined, a display list is executed by calling

      void CallList( uint n );

n gives the index of the display list to be called. This causes the commands saved
in the display list to be executed, in order, just as if they were issued without using
a display list. If n = 0, then the error INVALID_VALUE is generated.
     The command

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.4. DISPLAY LISTS                                                                 333


      void CallLists( sizei n, enum type, void *lists );

provides an efficient means for executing a number of display lists. n is an in-
teger indicating the number of display lists to be called, and lists is a pointer
that points to an array of offsets. Each offset is constructed as determined by
lists as follows. First, type may be one of the constants BYTE, UNSIGNED_BYTE,
SHORT, UNSIGNED_SHORT, INT, UNSIGNED_INT, or FLOAT indicating that the ar-
ray pointed to by lists is an array of bytes, unsigned bytes, shorts, unsigned shorts,
integers, unsigned integers, or floats, respectively. In this case each offset is found
by simply converting each array element to an integer (floating point values are
truncated to negative infinity). Further, type may be one of 2_BYTES, 3_BYTES,
or 4_BYTES, indicating that the array contains sequences of 2, 3, or 4 unsigned
bytes, in which case each integer offset is constructed according to the following
algorithm:

of f set ← 0
for i = 1 to b
    of f set ← of f set shifted left 8 bits
    of f set ← of f set + byte
    advance to next byte in the array

b is 2, 3, or 4, as indicated by type. If n = 0, CallLists does nothing.
     Each of the n constructed offsets is taken in order and added to a display list
base to obtain a display list number. For each number, the indicated display list is
executed. The base is set by calling

      void ListBase( uint base );

to specify the offset.
    Indicating a display list index that does not correspond to any display list has no
effect. CallList or CallLists may appear inside a display list. (If the mode supplied
to NewList is COMPILE_AND_EXECUTE, then the appropriate lists are executed,
but the CallList or CallLists, rather than those lists’ constituent commands, is
placed in the list under construction.) To avoid the possibility of infinite recursion
resulting from display lists calling one another, an implementation-dependent limit
is placed on the nesting level of display lists during display list execution. This
limit must be at least 64.
    Two commands are provided to manage display list indices.

      uint GenLists( sizei s );



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.4. DISPLAY LISTS                                                                   334


returns an integer n such that the indices n, . . . , n+s−1 are previously unused (i.e.
there are s previously unused display list indices starting at n). GenLists also has
the effect of creating an empty display list for each of the indices n, . . . , n + s − 1,
so that these indices all become used. GenLists returns 0 if there is no group of s
contiguous previously unused display list indices, or if s = 0.

        boolean IsList( uint list );

returns TRUE if list is the index of some display list.
    A contiguous group of display lists may be deleted by calling

        void DeleteLists( uint list, sizei range );

where list is the index of the first display list to be deleted and range is the number
of display lists to be deleted. All information about the display lists is lost, and the
indices become unused. Indices to which no display list corresponds are ignored.
If range = 0, nothing happens.

5.4.1    Commands Not Usable In Display Lists
Certain commands, when called while compiling a display list, are not compiled
into the display list but are executed immediately. These commands fall in several
categories including
    Display lists: GenLists and DeleteLists.
    Render modes: FeedbackBuffer, SelectBuffer, and RenderMode.
    Vertex arrays: ClientActiveTexture, ColorPointer, EdgeFlagPointer, Fog-
CoordPointer, IndexPointer, InterleavedArrays, NormalPointer, Secondary-
ColorPointer, TexCoordPointer, VertexAttribPointer, VertexAttribIPointer,
VertexPointer, GenVertexArrays, DeleteVertexArrays, and BindVertexArray.
    Client state: EnableClientState, DisableClientState, EnableVertexAttrib-
Array, DisableVertexAttribArray, PushClientAttrib, and PopClientAttrib.
    Pixels and textures: PixelStore, ReadPixels, GenTextures, DeleteTextures,
AreTexturesResident, TexBuffer, and GenerateMipmap.
    Occlusion queries: GenQueries and DeleteQueries.
    Buffer objects: GenBuffers, DeleteBuffers, BindBuffer, BindBuffer-
Range, BindBufferBase, TransformFeedbackVaryings, BufferData, Buffer-
SubData, MapBuffer, MapBufferRange, FlushMappedBufferRange, and Un-
mapBuffer.
    Framebuffer
and renderbuffer objects: GenFramebuffers, BindFramebuffer, DeleteFrame-
buffers, CheckFramebufferStatus, GenRenderbuffers, BindRenderbuffer,

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.5. FLUSH AND FINISH                                                              335


DeleteRenderbuffers, RenderbufferStorage, RenderbufferStorageMultisam-
ple, FramebufferTexture1D, FramebufferTexture2D, FramebufferTexture3D,
FramebufferTextureLayer, FramebufferRenderbuffer, and BlitFramebuffer.
     Program and shader objects: CreateProgram, CreateShader, DeletePro-
gram, DeleteShader, AttachShader, DetachShader, BindAttribLocation,
BindFragDataLocation, CompileShader, ShaderSource, LinkProgram, and
ValidateProgram.
     GL command stream management: Finish, and Flush.
     Other queries: All query commands whose names begin with Get and Is (see
chapter 6).
     GL commands that source data from buffer objects dereference the buffer ob-
ject data in question at display list compile time, rather than encoding the buffer
ID and buffer offset into the display list. Only GL commands that are executed
immediately, rather than being compiled into a display list, are permitted to use a
buffer object as a data sink.
     TexImage3D, TexImage2D, TexImage1D, Histogram, and ColorTable
are executed immediately when called with the corresponding proxy arguments
PROXY_TEXTURE_3D or PROXY_TEXTURE_2D_ARRAY; PROXY_TEXTURE_2D
PROXY_TEXTURE_1D_ARRAY, or PROXY_TEXTURE_CUBE_MAP; PROXY_-
TEXTURE_1D; PROXY_HISTOGRAM; and PROXY_COLOR_TABLE, PROXY_POST_-
CONVOLUTION_COLOR_TABLE, or PROXY_POST_COLOR_MATRIX_COLOR_-
TABLE.
     When a program object is in use, a display list may be executed whose vertex
attribute calls do not match up exactly with what is expected by the vertex shader
contained in that program object. Handling of this mismatch is described in sec-
tion 2.14.3.
     Display lists require one bit of state to indicate whether a GL command should
be executed immediately or placed in a display list. In the initial state, commands
are executed immediately. If the bit indicates display list creation, an index is
required to indicate the current display list being defined. Another bit indicates,
during display list creation, whether or not commands should be executed as they
are compiled into the display list. One integer is required for the current ListBase
setting; its initial value is zero. Finally, state must be maintained to indicate which
integers are currently in use as display list indices. In the initial state, no indices
are in use.


5.5    Flush and Finish
The command


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.6. HINTS                                                                       336


      void Flush( void );

indicates that all commands that have previously been sent to the GL must complete
in finite time.
     The command

      void Finish( void );

forces all previous GL commands to complete. Finish does not return until all
effects from previously issued commands on GL client and server state and the
framebuffer are fully realized.


5.6    Hints
Certain aspects of GL behavior, when there is room for variation, may be controlled
with hints. A hint is specified using

      void Hint( enum target, enum hint );

target is a symbolic constant indicating the behavior to be controlled, and hint is a
symbolic constant indicating what type of behavior is desired. The possible targets
are described in table 5.3; for each target, hint must be one of FASTEST, indicating
that the most efficient option should be chosen; NICEST, indicating that the highest
quality option should be chosen; and DONT_CARE, indicating no preference in the
matter.
    For the texture compression hint, a hint of FASTEST indicates that texture im-
ages should be compressed as quickly as possible, while NICEST indicates that
the texture images be compressed with as little image degradation as possible.
FASTEST should be used for one-time texture compression, and NICEST should
be used if the compression results are to be retrieved by GetCompressedTexIm-
age (section 6.1.4) for reuse.
    The interpretation of hints is implementation-dependent. An implementation
may ignore them entirely.
    The initial value of all hints is DONT_CARE.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
5.6. HINTS                                                                337




 Target                                    Hint description
 PERSPECTIVE_CORRECTION_HINT               Quality of parameter interpolation
 POINT_SMOOTH_HINT                         Point sampling quality
 LINE_SMOOTH_HINT                          Line sampling quality
 POLYGON_SMOOTH_HINT                       Polygon sampling quality
 FOG_HINT                                  Fog quality
                                           (calculated per-pixel or per-vertex)
 GENERATE_MIPMAP_HINT                      Quality and performance of
                                           automatic mipmap level generation
 TEXTURE_COMPRESSION_HINT                  Quality and performance of
                                           texture image compression
 FRAGMENT_SHADER_DERIVATIVE_HINT           Derivative accuracy for fragment
                                           processing built-in functions
                                           dFdx, dFdy and fwidth

                 Table 5.3: Hint targets and descriptions.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Chapter 6

State and State Requests

The state required to describe the GL machine is enumerated in section 6.2. Most
state is set through the calls described in previous chapters, and can be queried
using the calls described in section 6.1.


6.1     Querying GL State
6.1.1    Simple Queries
Much of the GL state is completely identified by symbolic constants. The values
of these state variables can be obtained using a set of Get commands. There are
four commands for obtaining simple state variables:

        void   GetBooleanv( enum value, boolean *data );
        void   GetIntegerv( enum value, int *data );
        void   GetFloatv( enum value, float *data );
        void   GetDoublev( enum value, double *data );

The commands obtain boolean, integer, floating-point, or double-precision state
variables. value is a symbolic constant indicating the state variable to return. data
is a pointer to a scalar or array of the indicated type in which to place the returned
data.
     Indexed simple state variables are queried with the commands

        void GetBooleani v( enum target, uint index,
           boolean *data );
        void GetIntegeri v( enum target, uint index, int *data );



                                         338
6.1. QUERYING GL STATE                                                             339


target is the name of the indexed state and index is the index of the particular
element being queried. data is a pointer to a scalar or array of the indicated type in
which to place the returned data. An INVALID_VALUE error is generated if index
is outside the valid range for the indexed state target.
    Finally,

        boolean IsEnabled( enum value );

can be used to determine if value is currently enabled (as with Enable) or disabled,
and

        boolean IsEnabledi( enum target, uint index );

can be used to determine if the indexed state corresponding to target and index is
enabled or disabled. An INVALID_VALUE error is generated if index is outside the
valid range for the indexed state target.

6.1.2    Data Conversions
If a Get command is issued that returns value types different from the type of the
value being obtained, a type conversion is performed. If GetBooleanv is called, a
floating-point or integer value converts to FALSE if and only if it is zero (otherwise
it converts to TRUE). If GetIntegerv (or any of the Get commands below) is called,
a boolean value of TRUE or FALSE is interpreted as 1 or 0, respectively, and a
floating-point value is rounded to the nearest integer, unless the value is an RGBA
color component, a normal coordinate, a DepthRange value, or a depth buffer
clear value. In these cases, the Get command converts the floating-point value to
an integer according to the INT entry of table 4.9; a value not in [−1, 1] converts to
an undefined value. If GetFloatv is called, a boolean value of TRUE or FALSE is
interpreted as 1.0 or 0.0, respectively, an integer is coerced to floating-point, and a
double-precision floating-point value is converted to single-precision. Analogous
conversions are carried out in the case of GetDoublev. If a value is so large in
magnitude that it cannot be represented with the requested type, then the nearest
value representable using the requested type is returned.
     Unless otherwise indicated, multi-valued state variables return their multiple
values in the same order as they are given as arguments to the commands that set
them. For instance, the two DepthRange parameters are returned in the order n
followed by f. Similarly, points for evaluator maps are returned in the order that
they appeared when passed to Map1. Map2 returns Rij in the [(uorder)i + j]th
block of values (see page 321 for i, j, uorder, and Rij ).


             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                         340


   Matrices may be queried and returned in transposed form by calling Get-
Booleanv, GetIntegerv, GetFloatv, and GetDoublev with pname set to
one of TRANSPOSE_MODELVIEW_MATRIX, TRANSPOSE_PROJECTION_MATRIX,
TRANSPOSE_TEXTURE_MATRIX, or TRANSPOSE_COLOR_MATRIX. The effect of

          GetFloatv(TRANSPOSE_MODELVIEW_MATRIX,m);

is the same as the effect of the command sequence

          GetFloatv(MODELVIEW_MATRIX,m);
          m = mT ;

     Similar conversions occur when querying TRANSPOSE_PROJECTION_-
MATRIX, TRANSPOSE_TEXTURE_MATRIX, and TRANSPOSE_COLOR_MATRIX.
     If fragment color clamping is enabled, querying of the texture border color,
texture environment color, fog color, alpha test reference value, blend color, and
RGBA clear color will clamp the corresponding state values to [0, 1] before return-
ing them. This behavior provides compatibility with previous versions of the GL
that clamped these values when specified.
     Most texture state variables are qualified by the value of ACTIVE_TEXTURE
to determine which server texture state vector is queried. Client texture state
variables such as texture coordinate array pointers are qualified by the value of
CLIENT_ACTIVE_TEXTURE. Tables 6.5, 6.6, 6.12, 6.19, 6.22, and 6.49 indicate
 Table 6.19 indicates those state variables which are qualified by ACTIVE_-
TEXTURE or CLIENT_ACTIVE_TEXTURE during state queries. Queries of texture
state variables corresponding to texture coordinate processing units (namely, Tex-
Gen state and enables, and matrices) will generate an INVALID_OPERATION error
if the value of ACTIVE_TEXTURE is greater than or equal to MAX_TEXTURE_-
COORDS. All other texture state queries will result in an INVALID_OPERATION er-
ror if the value of ACTIVE_TEXTURE is greater than or equal to MAX_COMBINED_-
TEXTURE_IMAGE_UNITS.
     Vertex array state variables are qualified by the value of VERTEX_ARRAY_-
BINDING to determine which vertex array object is queried. Tables 6.6- 6.9 define
the set of state stored in a vertex array object.

6.1.3    Enumerated Queries
Other commands exist to obtain state variables that are identified by a category as
well as a symbolic constant.

        void GetClipPlane( enum plane, double eqn[4] );

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                             341


returns four double-precision values in eqn; these are the coefficients of the plane
equation of plane in eye coordinates (these coordinates are those that were com-
puted when the plane was specified).

      void GetLight{if}v( enum light, enum value, T data );

places information about light parameter value for light in data. POSITION and
SPOT_DIRECTION return values in eye coordinates. Again, these are the coordi-
nates that were computed when the position or direction was specified.

      void GetMaterial{if}v( enum face, enum value, T data );

places information about material property value for face in data. face must be
either FRONT or BACK, indicating the front or back material, respectively.

      void GetTexEnv{if}v( enum env, enum value, T data );

places information about value for env in data. env must be either POINT_SPRITE,
TEXTURE_ENV, or TEXTURE_FILTER_CONTROL.

      void GetTexGen{ifd}v( enum coord, enum value, T data );

places information about value for coord in data. coord must be one of S, T, R, or Q.
EYE_LINEAR coefficients are returned in the eye coordinates that were computed
when the plane was specified; OBJECT_LINEAR coefficients are returned in object
coordinates.

      void GetPixelMap{ui us f}v( enum map, T data );

returns all values in the pixel map map in data. map must be a map name from
table 3.3. GetPixelMapuiv and GetPixelMapusv convert floating point pixel map
values to integers according to the UNSIGNED_INT and UNSIGNED_SHORT entries,
respectively, of table 4.9.
    If a pixel pack buffer is bound (as indicated by a non-zero value of PIXEL_-
PACK_BUFFER_BINDING), data is an offset into the pixel pack buffer; otherwise,
data is a pointer to client memory. All pixel storage and pixel transfer modes are
ignored when returning a pixel map. n machine units are written where n is the size
of the pixel map times the size of FLOAT, UNSIGNED_INT, or UNSIGNED_SHORT
respectively in basic machine units. If a pixel pack buffer object is bound and
data+n is greater than the size of the pixel buffer, an INVALID_OPERATION error
results. If a pixel pack buffer object is bound and data is not evenly divisible by the
number of basic machine units needed to store in memory a FLOAT, UNSIGNED_-
INT, or UNSIGNED_SHORT respectively, an INVALID_OPERATION error results.


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                             342


      void GetMap{ifd}v( enum map, enum value, T data );

places information about value for map in data. map must be one of the map types
described in section 5.1, and value must be one of ORDER, COEFF, or DOMAIN.
    The commands

      void GetTexParameter{if}v( enum target, enum value,
         T data );
      void GetTexParameterI{i ui}v( enum target, enum value,
         T data );

place information about texture parameter value for the specified target into data.
value must be TEXTURE_RESIDENT or one of the symbolic values in table 3.22.
    target may be one of TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_-
1D_ARRAY, TEXTURE_2D_ARRAY, TEXTURE_RECTANGLE, or TEXTURE_CUBE_-
MAP, indicating the currently bound one-, two-, three-dimensional, one- or two-
dimensional array, rectangular, or cube map texture object.
    Querying value TEXTURE_BORDER_COLOR with GetTexParameterIiv or Get-
TexParameterIuiv returns the border color values as signed integers or unsigned
integers, respectively; otherwise the values are returned as described in sec-
tion 6.1.2. If the border color is queried with a type that does not match the original
type with which it was specified, the result is undefined.

      void GetTexLevelParameter{if}v( enum target, int lod,
         enum value, T data );

places information about texture image parameter value for level-of-detail lod of
the specified target into data. value must be one of the symbolic values in ta-
ble 6.21.
    target may be one of TEXTURE_1D, TEXTURE_2D, TEXTURE_3D, TEXTURE_-
1D_ARRAY, TEXTURE_2D_ARRAY, TEXTURE_RECTANGLE, TEXTURE_CUBE_-
MAP_POSITIVE_X, TEXTURE_CUBE_MAP_NEGATIVE_X, TEXTURE_CUBE_-
MAP_POSITIVE_Y, TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_-
MAP_POSITIVE_Z, TEXTURE_CUBE_MAP_NEGATIVE_Z, PROXY_TEXTURE_1D,
PROXY_TEXTURE_2D, PROXY_TEXTURE_3D, PROXY_TEXTURE_1D_ARRAY,
PROXY_TEXTURE_2D_ARRAY,           PROXY_TEXTURE_RECTANGLE, or PROXY_-
TEXTURE_CUBE_MAP, indicating the one-, two-, or three-dimensional texture,
one- or two-dimensional array texture, rectangular texture, one of the six
distinct 2D images making up the cube map texture object, or the one-, two-,
three-dimensional, one- or two-dimensional array, rectangular, or cube map proxy
state vector.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                            343


    target may also be TEXTURE_BUFFER, indicating the texture buffer. In the case
lod must be zero or an INVALID_VALUE error is generated.
    Note that TEXTURE_CUBE_MAP is not a valid target parameter for Get-
TexLevelParameter, because it does not specify a particular cube map face.
    lod determines which level-of-detail’s state is returned. If lod is less than zero
or larger than the maximum allowable level-of-detail, then an INVALID_VALUE
error is generated.
    For texture images with uncompressed internal formats, queries of
value TEXTURE_RED_TYPE, TEXTURE_GREEN_TYPE, TEXTURE_BLUE_-
TYPE, TEXTURE_ALPHA_TYPE, TEXTURE_LUMINANCE_TYPE, TEXTURE_-
INTENSITY_TYPE, and TEXTURE_DEPTH_TYPE return the data type used
to store the component. Types NONE, SIGNED_NORMALIZED, UNSIGNED_-
NORMALIZED, FLOAT, INT, and UNSIGNED_INT respectively indicate missing,
signed normalized fixed-point, unsigned normalized fixed-point, floating-point,
signed unnormalized integer, and unsigned unnormalized integer compo-
nents.      Queries of value TEXTURE_RED_SIZE, TEXTURE_GREEN_SIZE,
TEXTURE_BLUE_SIZE, TEXTURE_ALPHA_SIZE, TEXTURE_LUMINANCE_SIZE,
TEXTURE_INTENSITY_SIZE, TEXTURE_DEPTH_SIZE, TEXTURE_STENCIL_-
SIZE, and TEXTURE_SHARED_SIZE return the actual resolutions of the stored
image array components, not the resolutions specified when the image array was
defined. For texture images with a compressed internal format, the resolutions
returned specify the component resolution of an uncompressed internal format
that produces an image of roughly the same quality as the compressed image in
question. Since the quality of the implementation’s compression algorithm is
likely data-dependent, the returned component sizes should be treated only as
rough approximations.
    Querying value TEXTURE_COMPRESSED_IMAGE_SIZE returns the size (in
ubytes) of the compressed texture image that would be returned by GetCom-
pressedTexImage (section 6.1.4). Querying TEXTURE_COMPRESSED_IMAGE_-
SIZE is not allowed on texture images with an uncompressed internal format or on
proxy targets and will result in an INVALID_OPERATION error if attempted.
    Queries of value TEXTURE_WIDTH, TEXTURE_HEIGHT, TEXTURE_DEPTH,
and TEXTURE_BORDER return the width, height, depth, and border as specified
when the image array was created. The internal format of the image array is queried
as TEXTURE_INTERNAL_FORMAT, or as TEXTURE_COMPONENTS for compatibil-
ity with GL version 1.0.

6.1.4   Texture Queries
The command


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                           344


      void GetTexImage( enum tex, int lod, enum format,
         enum type, void *img );

is used to obtain texture images. It is somewhat different from the other Get* com-
mands; tex is a symbolic value indicating which texture (or texture face in the case
of a cube map texture target name) is to be obtained. TEXTURE_1D, TEXTURE_-
2D, TEXTURE_3D, TEXTURE_1D_ARRAY, TEXTURE_2D_ARRAY, and TEXTURE_-
RECTANGLE indicate a one-, two-, or three-dimensional, one- or two-dimensional
array, or rectangular texture respectively. TEXTURE_CUBE_MAP_POSITIVE_X,
TEXTURE_CUBE_MAP_NEGATIVE_X,                  TEXTURE_CUBE_MAP_POSITIVE_Y,
TEXTURE_CUBE_MAP_NEGATIVE_Y, TEXTURE_CUBE_MAP_POSITIVE_Z, and
TEXTURE_CUBE_MAP_NEGATIVE_Z indicate the respective face of a cube map
texture. lod is a level-of-detail number, format is a pixel format from table 3.6,
type is a pixel type from table 3.5.
    Any of the following mismatches between format and the internal format of
the texture image will generate an INVALID_OPERATION error:

   • format is a color format (one of the formats in table 3.6 whose target is the
     color buffer) and the base internal format of the texture image is not a color
     format.
   • format is DEPTH_COMPONENT and the base internal format is not DEPTH_-
     COMPONENT or DEPTH_STENCIL.

   • format is DEPTH_STENCIL and the base internal format is not DEPTH_-
     STENCIL.

   • format is one of the integer formats in table 3.6 and the internal format of
     the texture image is not integer, or format is not one of the integer formats in
     table 3.6 and the internal format is integer.

     GetTexImage obtains component groups from a texture image with the indi-
cated level-of-detail. If format is a color format then the components are assigned
among R, G, B, and A according to table 6.1, starting with the first group in the
first row, and continuing by obtaining groups in order from each row and proceed-
ing from the first row to the last, and from the first image to the last for three-
dimensional textures. One- and two-dimensional array textures are treated as two-
and three-dimensional images, respectively, where the layers are treated as rows or
images. If format is DEPTH_COMPONENT, then each depth component is assigned
with the same ordering of rows and images. If format is DEPTH_STENCIL, then
each depth component and each stencil index is assigned with the same ordering
of rows and images.

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                             345


                    Base Internal Format         R     G     B     A
                        ALPHA                    0     0     0     Ai
                    LUMINANCE (or 1)             Li    0     0     1
                 LUMINANCE_ALPHA (or 2)          Li    0     0     Ai
                      INTENSITY                  Ii    0     0     1
                         RED                     Ri    0     0     1
                          RG                     Ri    Gi    0     1
                       RGB (or 3)                Ri    Gi    Bi    1
                      RGBA (or 4)                Ri    Gi    Bi    Ai


Table 6.1: Texture, table, and filter return values. Ri , Gi , Bi , Ai , Li , and Ii are
components of the internal format that are assigned to pixel values R, G, B, and A.
If a requested pixel value is not present in the internal format, the specified constant
value is used.

    These groups are then packed and placed in client or pixel buffer object mem-
ory. If a pixel pack buffer is bound (as indicated by a non-zero value of PIXEL_-
PACK_BUFFER_BINDING), img is an offset into the pixel pack buffer; otherwise,
img is a pointer to client memory. No pixel transfer operations are performed on
this image, but pixel storage modes that are applicable to ReadPixels are applied.
    For three-dimensional and two-dimensional array textures, pixel storage op-
erations are applied as if the image were two-dimensional, except that the addi-
tional pixel storage state values PACK_IMAGE_HEIGHT and PACK_SKIP_IMAGES
are applied. The correspondence of texels to memory locations is as defined for
TexImage3D in section 3.9.1.
    The row length, number of rows, image depth, and number of images are de-
termined by the size of the texture image (including any borders). Calling GetTex-
Image with lod less than zero or larger than the maximum allowable causes the
error INVALID_VALUE. Calling GetTexImage with a format of COLOR_INDEX or
STENCIL_INDEX causes the error INVALID_ENUM. Calling GetTexImage with
a non-zero lod when tex is TEXTURE_RECTANGLE causes the error INVALID_-
VALUE. If a pixel pack buffer object is bound and packing the texture image into
the buffer’s memory would exceed the size of the buffer, an INVALID_OPERATION
error results. If a pixel pack buffer object is bound and img is not evenly divisible
by the number of basic machine units needed to store in memory the GL data type
corresponding to type (see table 3.5), an INVALID_OPERATION error results.
    The command



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                              346


        void GetCompressedTexImage( enum target, int lod,
           void *img );

is used to obtain texture images stored in compressed form. The parameters tar-
get, lod, and img are interpreted in the same manner as in GetTexImage. When
called, GetCompressedTexImage writes n ubytes of compressed image data to
the pixel pack buffer or client memory pointed to by img, where n is the value
of TEXTURE_COMPRESSED_IMAGE_SIZE for the texture. The compressed image
data is formatted according to the definition of the texture’s internal format. All
pixel storage and pixel transfer modes are ignored when returning a compressed
texture image.
    Calling GetCompressedTexImage with an lod value less than zero or greater
than the maximum allowable causes an INVALID_VALUE error. Calling GetCom-
pressedTexImage with a texture image stored with an uncompressed internal for-
mat causes an INVALID_OPERATION error. If a pixel pack buffer object is bound
and img + n is greater than the size of the buffer, an INVALID_OPERATION error
results.
    The command

        boolean IsTexture( uint texture );

returns TRUE if texture is the name of a texture object. If texture is zero, or is a non-
zero value that is not the name of a texture object, or if an error condition occurs,
IsTexture returns FALSE. A name returned by GenTextures, but not yet bound, is
not the name of a texture object.

6.1.5    Stipple Query
The command

        void GetPolygonStipple( void *pattern );

obtains the polygon stipple. The pattern is packed into pixel pack buffer or client
memory according to the procedure given in section 4.3.2 for ReadPixels; it is as
if the height and width passed to that command were both equal to 32, the type
were BITMAP, and the format were COLOR_INDEX.

6.1.6    Color Matrix Query
The scale and bias variables are queried using GetFloatv with pname set to the
appropriate variable name. The top matrix on the color matrix stack is returned

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                            347


by GetFloatv called with pname set to COLOR_MATRIX or TRANSPOSE_COLOR_-
MATRIX. The depth of the color matrix stack, and the maximum depth of the color
matrix stack, are queried with GetIntegerv, setting pname to COLOR_MATRIX_-
STACK_DEPTH and MAX_COLOR_MATRIX_STACK_DEPTH respectively.


6.1.7    Color Table Query
The current contents of a color table are queried using

        void GetColorTable( enum target, enum format, enum type,
           void *table );

target must be one of the regular color table names listed in table 3.4. format and
type accept the same values as do the corresponding parameters of GetTexImage,
except that a format of DEPTH_COMPONENT causes the error INVALID_ENUM. The
one-dimensional color table image is returned to pixel pack buffer or client memory
starting at table. No pixel transfer operations are performed on this image, but pixel
storage modes that are applicable to ReadPixels are performed. Color components
that are requested in the specified format, but which are not included in the internal
format of the color lookup table, are returned as zero. The assignments of internal
color components to the components requested by format are described in table 6.1.
    The functions

        void GetColorTableParameter{if}v( enum target,
           enum pname, T params );

are used for integer and floating point query.
    target must be one of the regular or proxy color table names listed in ta-
ble 3.4. pname is one of COLOR_TABLE_SCALE, COLOR_TABLE_BIAS, COLOR_-
TABLE_FORMAT, COLOR_TABLE_WIDTH, COLOR_TABLE_RED_SIZE, COLOR_-
TABLE_GREEN_SIZE, COLOR_TABLE_BLUE_SIZE, COLOR_TABLE_ALPHA_-
SIZE, COLOR_TABLE_LUMINANCE_SIZE, or COLOR_TABLE_INTENSITY_SIZE.
The value of the specified parameter is returned in params.

6.1.8    Convolution Query
The current contents of a convolution filter image are queried with the command

        void GetConvolutionFilter( enum target, enum format,
           enum type, void *image );



             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                         348


target must be CONVOLUTION_1D or CONVOLUTION_2D. format and type accept
the same values as do the corresponding parameters of GetTexImage, except
that a format of DEPTH_COMPONENT causes the error INVALID_ENUM. The one-
dimensional or two-dimensional images is returned to pixel pack buffer or client
memory starting at image. Pixel processing and component mapping are identical
to those of GetTexImage.
    The current contents of a separable filter image are queried using

        void GetSeparableFilter( enum target, enum format,
           enum type, void *row, void *column, void *span );

target must be SEPARABLE_2D. format and type accept the same values as do the
corresponding parameters of GetTexImage. The row and column images are re-
turned to pixel pack buffer or client memory starting at row and column respec-
tively. span is currently unused. Pixel processing and component mapping are
identical to those of GetTexImage.
    The functions

        void GetConvolutionParameter{if}v( enum target,
           enum pname, T params );

are used for integer and floating point query. target must be CONVOLUTION_1D,
CONVOLUTION_2D, or SEPARABLE_2D. pname is one of CONVOLUTION_-
BORDER_COLOR,           CONVOLUTION_BORDER_MODE,               CONVOLUTION_-
FILTER_SCALE,        CONVOLUTION_FILTER_BIAS,           CONVOLUTION_FORMAT,
CONVOLUTION_WIDTH, CONVOLUTION_HEIGHT, MAX_CONVOLUTION_WIDTH,
or MAX_CONVOLUTION_HEIGHT. The value of the specified parameter is returned
in params.

6.1.9    Histogram Query
The current contents of the histogram table are queried using

        void GetHistogram( enum target, boolean reset,
           enum format, enum type, void* values );

target must be HISTOGRAM. format and type accept the same values as do the corre-
sponding parameters of GetTexImage, except that a format of DEPTH_COMPONENT
causes the error INVALID_ENUM. The one-dimensional histogram table image is
returned to pixel pack buffer or client memory starting at values. Pixel processing


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                           349


and component mapping are identical to those of GetTexImage, except that in-
stead of applying the Final Conversion pixel storage mode, component values are
simply clamped to the range of the target data type.
    If reset is TRUE, then all counters of all elements of the histogram are reset to
zero. Counters are reset whether returned or not.
    No counters are modified if reset is FALSE.
    Calling
      void ResetHistogram( enum target );
resets all counters of all elements of the histogram table to zero. target must be
HISTOGRAM.
    It is not an error to reset or query the contents of a histogram table with zero
entries.
    The functions
      void GetHistogramParameter{if}v( enum target,
         enum pname, T params );
are used for integer and floating point query. target must be HISTOGRAM or
PROXY_HISTOGRAM. pname is one of HISTOGRAM_FORMAT, HISTOGRAM_WIDTH,
HISTOGRAM_RED_SIZE, HISTOGRAM_GREEN_SIZE, HISTOGRAM_BLUE_SIZE,
HISTOGRAM_ALPHA_SIZE, or HISTOGRAM_LUMINANCE_SIZE. pname may be
HISTOGRAM_SINK only for target HISTOGRAM. The value of the specified param-
eter is returned in params.

6.1.10   Minmax Query
The current contents of the minmax table are queried using
      void GetMinmax( enum target, boolean reset, enum format,
         enum type, void* values );
target must be MINMAX. format and type accept the same values as do the corre-
sponding parameters of GetTexImage, except that a format of DEPTH_COMPONENT
causes the error INVALID_ENUM. A one-dimensional image of width 2 is returned
to pixel pack buffer or client memory starting at values. Pixel processing and com-
ponent mapping are identical to those of GetTexImage.
    If reset is TRUE, then each minimum value is reset to the maximum repre-
sentable value, and each maximum value is reset to the minimum representable
value. All values are reset, whether returned or not.
    No values are modified if reset is FALSE.
    Calling

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                                             350


       void ResetMinmax( enum target );

resets all minimum and maximum values of target to to their maximum and mini-
mum representable values, respectively, target must be MINMAX.
    The functions

       void GetMinmaxParameter{if}v( enum target, enum pname,
          T params );

are used for integer and floating point query. target must be MINMAX. pname is
MINMAX_FORMAT or MINMAX_SINK. The value of the specified parameter is re-
turned in params.

6.1.11      Pointer and String Queries
    The command
      void GetPointerv( enum pname, void **params );

     obtains the pointer or pointers named pname in the array params. The
possible values for pname are SELECTION_BUFFER_POINTER and FEEDBACK_-
BUFFER_POINTER, which respectively return the pointers set with SelectBuffer
and FeedbackBuffer; and VERTEX_ARRAY_POINTER, NORMAL_ARRAY_-
POINTER, COLOR_ARRAY_POINTER, SECONDARY_COLOR_ARRAY_POINTER,
INDEX_ARRAY_POINTER, TEXTURE_COORD_ARRAY_POINTER, FOG_COORD_-
ARRAY_POINTER, and EDGE_FLAG_ARRAY_POINTER, which respectively return
the corresponding value stored in the currently bound vertex array object. Each
pname returns a single pointer value.
     String queries return pointers to UTF-8 encoded, NULL-terminated static
strings describing properties of the current GL context 1 . The command

       ubyte *GetString( enum name );

accepts name values of RENDERER, VENDOR, EXTENSIONS, VERSION, and
SHADING_LANGUAGE_VERSION. The format of the RENDERER and VENDOR
strings is implementation-dependent. The EXTENSIONS string contains a space
separated list of extension names (the extension names themselves do not contain
any spaces). The VERSION and SHADING_LANGUAGE_VERSION strings are laid
out as follows:
    1
      Applications making copies of these static strings should never use a fixed-length buffer, because
the strings may grow unpredictably between releases, resulting in buffer overflow when copying.
This is particularly true of the EXTENSIONS string, which has become extremely long in some
GL implementations.


               OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                             351


      <version number><space><vendor-specific information>

The version number is either of the form major number.minor number or major -
number.minor number.release number, where the numbers all have one or more
digits. The release number and vendor specific information are optional. How-
ever, if present, then they pertain to the server and their format and contents are
implementation-dependent.
    GetString returns the version number (in the VERSION string) and the exten-
sion names (in the EXTENSIONS string) that can be supported by the current GL
context. Thus, if the client and server support different versions and/or extensions,
a compatible version and list of extensions is returned.
    The GL version may also be queried by calling GetIntegerv with values
MAJOR_VERSION and MINOR_VERSION, which respectively return the same val-
ues as major number and minor number in the VERSION string, and value
CONTEXT_FLAGS, which returns a set of flags defining additional properties of
a context. If CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT is set in CONTEXT_-
FLAGS, then the context is a forward-compatible context as defined in appendix E,
and the deprecated features described in that appendix are not supported; other-
wise the context is a full context, and all features described in the specification are
supported.
    Indexed strings are queried with the command

      ubyte *GetStringi( enum name, uint index );

name is the name of the indexed state and index is the index of the particular ele-
ment being queried. name may only be EXTENSIONS, indicating that the extension
name corresponding to the indexth supported extension should be returned. index
may range from zero to the value of NUM_EXTENSIONS minus one. All extension
names, and only the extension names returned in GetString(EXTENSIONS) will
be returned as individual names, but there is no defined relationship between the
order in which names appear in the non-indexed string and the order in which the
appear in the indexed query. There is no defined relationship between any partic-
ular extension name and the index values; an extension name may correspond to a
different index in different GL contexts and/or implementations.
    An INVALID_VALUE error is generated if index is outside the valid range for
the indexed state name.

6.1.12    Asynchronous Queries
The command


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                             352


      boolean IsQuery( uint id );

returns TRUE if id is the name of a query object. If id is zero, or if id is a non-zero
value that is not the name of a query object, IsQuery returns FALSE.
    Information about a query target can be queried with the command

      void GetQueryiv( enum target, enum pname, int *params );

target identifies the query target, and must be one of SAMPLES_PASSED for
occlusion queries or PRIMITIVES_GENERATED and TRANSFORM_FEEDBACK_-
PRIMITIVES_WRITTEN for primitive queries.
If pname is CURRENT_QUERY, the name of the currently active query for target, or
zero if no query is active, will be placed in params.
    If pname is QUERY_COUNTER_BITS, the implementation-dependent number of
bits used to hold the query result for target will be placed in params. The number
of query counter bits may be zero, in which case the counter contains no useful
information.
    For primitive queries (PRIMITIVES_GENERATED and TRANSFORM_-
FEEDBACK_PRIMITIVES_WRITTEN) if the number of bits is non-zero, the
minimum number of bits allowed is 32.
    For occlusion queries (SAMPLES_PASSED), if the number of bits is non-zero,
the minimum number of bits allowed is a function of the implementation’s maxi-
mum viewport dimensions (MAX_VIEWPORT_DIMS). The counter must be able to
represent at least two overdraws for every pixel in the viewport. The formula to
compute the allowable minimum value (where n is the minimum number of bits)
is


  n = min{32, log2 (maxV iewportW idth × maxV iewportHeight × 2) }.

    The state of a query object can be queried with the commands

      void GetQueryObjectiv( uint id, enum pname,
         int *params );
      void GetQueryObjectuiv( uint id, enum pname,
         uint *params );

If id is not the name of a query object, or if the query object named by id is currently
active, then an INVALID_OPERATION error is generated.
     If pname is QUERY_RESULT, then the query object’s result value is returned as
a single integer in params. If the value is so large in magnitude that it cannot be

             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                                       353


represented with the requested type, then the nearest value representable using the
requested type is returned. If the number of query counter bits for target is zero,
then the result is returned as a single integer with the value zero.
    There may be an indeterminate delay before the above query returns. If pname
is QUERY_RESULT_AVAILABLE, FALSE is returned if such a delay would be re-
quired; otherwise TRUE is returned. It must always be true that if any query object
returns a result available of TRUE, all queries of the same type issued prior to that
query must also return TRUE.
    Querying the state for any given query object forces that occlusion query to
complete within a finite amount of time.
    If multiple queries are issued using the same object name prior to calling Get-
QueryObject[u]iv, the result and availability information returned will always be
from the last query issued. The results from any queries before the last one will be
lost if they are not retrieved before starting a new query on the same target and id.

6.1.13    Buffer Object Queries
The command

      boolean IsBuffer( uint buffer );

returns TRUE if buffer is the name of an buffer object. If buffer is zero, or if buffer is
a non-zero value that is not the name of an buffer object, IsBuffer returns FALSE.
    The command

      void GetBufferParameteriv( enum target, enum pname,
         int *data );

returns information about a bound buffer object. target must be one of the targets
listed in table 2.6, and pname must be one of the buffer object parameters in ta-
ble 2.7, other than BUFFER_MAP_POINTER. The value of the specified parameter
of the buffer object bound to target is returned in data.
     The command

      void GetBufferSubData( enum target, intptr offset,
         sizeiptr size, void *data );

queries the data contents of a buffer object. target must be one of the targets listed
in table 2.6. offset and size indicate the range of data in the buffer object that is
to be queried, in terms of basic machine units. data specifies a region of client
memory, size basic machine units in length, into which the data is to be retrieved.

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                                 354


    An error is generated if GetBufferSubData is executed for a buffer object that
is currently mapped.
    While the data store of a buffer object is mapped, the pointer to the data store
can be queried by calling

      void GetBufferPointerv( enum target, enum pname,
         void **params );

with target set to one of the targets listed in table 2.6 and pname set to BUFFER_-
MAP_POINTER. The single buffer map pointer is returned in params. GetBuffer-
Pointerv returns the NULL pointer value if the buffer’s data store is not currently
mapped, or if the requesting client did not map the buffer object’s data store, and
the implementation is unable to support mappings on multiple clients.
    To query which buffer objects are bound to the array of uniform buffer binding
points and will be used as the storage for active uniform blocks, call GetIntegeri v
with param set to UNIFORM_BUFFER_BINDING. index must be in the range zero
to the value of MAX_UNIFORM_BUFFER_BINDINGS - 1. The name of the buffer
object bound to index is returned in values. If no buffer object is bound for index,
zero is returned in values.
    To query the starting offset or size of the range of each buffer object bind-
ing used for uniform buffers, call GetIntegeri v with param set to UNIFORM_-
BUFFER_START or UNIFORM_BUFFER_SIZE respectively. index must be in the
range zero to the value of MAX_UNIFORM_BUFFER_BINDINGS - 1. If the param-
eter (starting offset or size) was not specified when the buffer object was bound,
zero is returned. If no buffer object is bound to index, -1 is returned.
    To query which buffer objects are bound to the array of transform feedback
binding points and will be used when transform feedback is active, call GetInte-
geri v with param set to TRANSFORM_FEEDBACK_BUFFER_BINDING. index must
be in the range zero to the value of MAX_TRANSFORM_FEEDBACK_SEPARATE_-
ATTRIBS - 1. The name of the buffer object bound to index is returned in values.
If no buffer object is bound for index, zero is returned in values.
    To query the starting offset or size of the range of each buffer object binding
used for transform feedback, call GetIntegeri v with param set to TRANSFORM_-
FEEDBACK_BUFFER_START or TRANSFORM_FEEDBACK_BUFFER_SIZE respec-
tively. index must be in the range 0 to the value of MAX_TRANSFORM_FEEDBACK_-
SEPARATE_ATTRIBS - 1. If the parameter (starting offset or size) was not specified
when the buffer object was bound, zero is returned. If no buffer object is bound to
index, -1 is returned.




                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                             355


6.1.14    Vertex Array Object Queries
The command

      boolean IsVertexArray( uint array );

returns TRUE if array is the name of a vertex array object. If array is zero, or a
non-zero value that is not the name of a vertex array object, IsVertexArray returns
FALSE. No error is generated if array is not a valid vertex array object name.

6.1.15    Shader and Program Queries
State stored in shader or program objects can be queried by commands that ac-
cept shader or program object names. These commands will generate the error
INVALID_VALUE if the provided name is not the name of either a shader or pro-
gram object, and INVALID_OPERATION if the provided name identifies an object
of the other type. If an error is generated, variables used to hold return values are
not modified.
    The command

      boolean IsShader( uint shader );

returns TRUE if shader is the name of a shader object. If shader is zero, or a non-
zero value that is not the name of a shader object, IsShader returns FALSE. No
error is generated if shader is not a valid shader object name.
    The command

      void GetShaderiv( uint shader, enum pname, int *params );

returns properties of the shader object named shader in params. The parameter
value to return is specified by pname.
     If pname is SHADER_TYPE, VERTEX_SHADER is returned if shader is a vertex
shader object, and FRAGMENT_SHADER is returned if shader is a fragment shader
object. If pname is DELETE_STATUS, TRUE is returned if the shader has been
flagged for deletion and FALSE is returned otherwise. If pname is COMPILE_-
STATUS, TRUE is returned if the shader was last compiled successfully, and FALSE
is returned otherwise. If pname is INFO_LOG_LENGTH, the length of the info log,
including a null terminator, is returned. If there is no info log, zero is returned. If
pname is SHADER_SOURCE_LENGTH, the length of the concatenation of the source
strings making up the shader source, including a null terminator, is returned. If no
source has been defined, zero is returned.
     The command

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                           356


      boolean IsProgram( uint program );

returns TRUE if program is the name of a program object. If program is zero, or a
non-zero value that is not the name of a program object, IsProgram returns FALSE.
No error is generated if program is not a valid program object name.
    The command

      void GetProgramiv( uint program, enum pname,
         int *params );

returns properties of the program object named program in params. The parameter
value to return is specified by pname.
     If pname is DELETE_STATUS, TRUE is returned if the program has been flagged
for deletion, and FALSE is returned otherwise. If pname is LINK_STATUS, TRUE
is returned if the program was last compiled successfully, and FALSE is returned
otherwise. If pname is VALIDATE_STATUS, TRUE is returned if the last call to Val-
idateProgram with program was successful, and FALSE is returned otherwise. If
pname is INFO_LOG_LENGTH, the length of the info log, including a null termina-
tor, is returned. If there is no info log, zero is returned. If pname is ATTACHED_-
SHADERS, the number of objects attached is returned. If pname is ACTIVE_-
ATTRIBUTES, the number of active attributes in program is returned. If no ac-
tive attributes exist, zero is returned. If pname is ACTIVE_ATTRIBUTE_MAX_-
LENGTH, the length of the longest active attribute name, including a null terminator,
is returned. If no active attributes exist, zero is returned. If pname is ACTIVE_-
UNIFORMS, the number of active uniforms is returned. If no active uniforms ex-
ist, zero is returned. If pname is ACTIVE_UNIFORM_MAX_LENGTH, the length of
the longest active uniform name, including a null terminator, is returned. If no
active uniforms exist, zero is returned. If pname is TRANSFORM_FEEDBACK_-
BUFFER_MODE, the buffer mode used when transform feedback is active is re-
turned. It can be one of SEPARATE_ATTRIBS or INTERLEAVED_ATTRIBS. If
pname is TRANSFORM_FEEDBACK_VARYINGS, the number of varying variables
to capture in transform feedback mode for the program is returned. If pname is
TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH, the length of the longest vary-
ing name specified to be used for transform feedback, including a null terminator,
is returned. If no varyings are used for transform feedback, zero is returned. If
pname is ACTIVE_UNIFORM_BLOCKS, the number of uniform blocks for program
containing active uniforms is returned. If pname is ACTIVE_UNIFORM_BLOCK_-
MAX_NAME_LENGTH, the length of the longest active uniform block name, includ-
ing the null terminator, is returned.
     The command


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                            357


      void GetAttachedShaders( uint program, sizei maxCount,
         sizei *count, uint *shaders );

returns the names of shader objects attached to program in shaders. The actual
number of shader names written into shaders is returned in count. If no shaders are
attached, count is set to zero. If count is NULL then it is ignored. The maximum
number of shader names that may be written into shaders is specified by maxCount.
The number of objects attached to program is given by can be queried by calling
GetProgramiv with ATTACHED_SHADERS.
    A string that contains information about the last compilation attempt on a
shader object or last link or validation attempt on a program object, called the
info log, can be obtained with the commands

      void GetShaderInfoLog( uint shader, sizei bufSize,
         sizei *length, char *infoLog );
      void GetProgramInfoLog( uint program, sizei bufSize,
         sizei *length, char *infoLog );

These commands return the info log string in infoLog. This string will be null-
terminated. The actual number of characters written into infoLog, excluding the
null terminator, is returned in length. If length is NULL, then no length is returned.
The maximum number of characters that may be written into infoLog, including
the null terminator, is specified by bufSize. The number of characters in the info
log can be queried with GetShaderiv or GetProgramiv with INFO_LOG_LENGTH.
If shader is a shader object, the returned info log will either be an empty string or
it will contain information about the last compilation attempt for that object. If
program is a program object, the returned info log will either be an empty string or
it will contain information about the last link attempt or last validation attempt for
that object.
    The info log is typically only useful during application development and an
application should not expect different GL implementations to produce identical
info logs.
    The command

      void GetShaderSource( uint shader, sizei bufSize,
         sizei *length, char *source );

returns in source the string making up the source code for the shader object shader.
The string source will be null-terminated. The actual number of characters written
into source, excluding the null terminator, is returned in length. If length is NULL,
no length is returned. The maximum number of characters that may be written into

            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                          358


source, including the null terminator, is specified by bufSize. The string source is
a concatenation of the strings passed to the GL using ShaderSource. The length
of this concatenation is given by SHADER_SOURCE_LENGTH, which can be queried
with GetShaderiv.
    The commands

      void GetVertexAttribdv( uint index, enum pname,
         double *params );
      void GetVertexAttribfv( uint index, enum pname,
         float *params );
      void GetVertexAttribiv( uint index, enum pname,
         int *params );
      void GetVertexAttribIiv( uint index, enum pname,
         int *params );
      void GetVertexAttribIuiv( uint index, enum pname,
         uint *params );

obtain the vertex attribute state named by pname for the generic vertex attribute
numbered index and places the information in the array params. pname must
be one of VERTEX_ATTRIB_ARRAY_BUFFER_BINDING, VERTEX_ATTRIB_-
ARRAY_ENABLED, VERTEX_ATTRIB_ARRAY_SIZE, VERTEX_ATTRIB_ARRAY_-
STRIDE,        VERTEX_ATTRIB_ARRAY_TYPE,                VERTEX_ATTRIB_ARRAY_-
NORMALIZED, VERTEX_ATTRIB_ARRAY_INTEGER, or CURRENT_VERTEX_-
ATTRIB. Note that all the queries except CURRENT_VERTEX_ATTRIB return values
stored in the currently bound vertex array object (the value of VERTEX_ARRAY_-
BINDING). If the zero object is bound, these values are client state. The error
INVALID_VALUE is generated if index is greater than or equal to MAX_VERTEX_-
ATTRIBS.
     All but CURRENT_VERTEX_ATTRIB return information about generic vertex
attribute arrays. The enable state of a generic vertex attribute array is set by the
command EnableVertexAttribArray and cleared by DisableVertexAttribArray.
The size, stride, type, normalized flag, and unconverted integer flag are set by the
commands VertexAttribPointer and VertexAttribIPointer. The normalized flag
is always set to FALSE by VertexAttribIPointer. The unconverted integer flag is
always set to FALSE by VertexAttribPointer and TRUE by VertexAttribIPointer.
     The query CURRENT_VERTEX_ATTRIB returns the current value for the
generic attribute index. GetVertexAttribdv and GetVertexAttribfv read and re-
turn the current attribute values as floating-point values; GetVertexAttribiv reads
them as floating-point values and converts them to integer values; GetVertexAt-
tribIiv reads and returns them as integers; GetVertexAttribIuiv reads and returns


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                                  359


them as unsigned integers. The results of the query are undefined if the current
attribute values are read using one data type but were specified using a different
one.
     The command

      void GetVertexAttribPointerv( uint index, enum pname,
         void **pointer );

obtains the pointer named pname for the vertex attribute numbered index and places
the information in the array pointer. pname must be VERTEX_ATTRIB_ARRAY_-
POINTER. The value returned is queried from the currently bound vertex array
object. If the zero object is bound, the value is queried from client state. An
INVALID_VALUE error is generated if index is greater than or equal to the value of
MAX_VERTEX_ATTRIBS.
    The commands

      void GetUniformfv( uint program, int location,
         float *params );
      void GetUniformiv( uint program, int location,
         int *params );
      void GetUniformuiv( uint program, int location,
         uint *params );

return the value or values of the uniform at location location of the default uni-
form block for program object program in the array params. The type of the uni-
form at location determines the number of values returned. The error INVALID_-
OPERATION is generated if program has not been linked successfully, or if location
is not a valid location for program. In order to query the values of an array of uni-
forms, a GetUniform* command needs to be issued for each array element. If the
uniform queried is a matrix, the values of the matrix are returned in column major
order. If an error occurred, params will not be modified.

6.1.16   Framebuffer Object Queries
The command

      boolean IsFramebuffer( uint framebuffer );

returns TRUE if framebuffer is the name of an framebuffer object. If framebuffer is
zero, or if framebuffer is a non-zero value that is not the name of an framebuffer
object, IsFramebuffer return FALSE.
    The command

                OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                         360


      void GetFramebufferAttachmentParameteriv( enum target,
         enum attachment, enum pname, int *params );

returns information about attachments of a bound framebuffer object. tar-
get must be DRAW_FRAMEBUFFER, READ_FRAMEBUFFER, or FRAMEBUFFER.
FRAMEBUFFER is equivalent to DRAW_FRAMEBUFFER.
    If the default framebuffer is bound to target, then attachment must be one of
FRONT_LEFT, FRONT_RIGHT, BACK_LEFT, BACK_RIGHT, or AUXi, identifying a
color buffer; DEPTH, identifying the depth buffer; or STENCIL, identifying the
stencil buffer.
    If a framebuffer object is bound to target, then attachment must be one of the
attachment points of the framebuffer listed in table 4.12.
    If attachment is DEPTH_STENCIL_ATTACHMENT, and different objects are
bound to the depth and stencil attachment points of target, the query will fail and
generate an INVALID_OPERATION error. If the same object is bound to both at-
tachment points, information about that object will be returned.
    Upon successful return from GetFramebufferAttachmentParameteriv, if
pname is FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE, then param will contain
one of NONE, FRAMEBUFFER_DEFAULT, TEXTURE, or RENDERBUFFER, identify-
ing the type of object which contains the attached image. Other values accepted
for pname depend on the type of object, as described below.
    If the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is NONE, no
framebuffer is bound to target. In this case querying pname FRAMEBUFFER_-
ATTACHMENT_OBJECT_NAME will return zero, and all other queries will generate
an INVALID_OPERATION error.
    If the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is not NONE,
these queries apply to all other framebuffer types:

   • If pname is FRAMEBUFFER_ATTACHMENT_RED_SIZE, FRAMEBUFFER_-
     ATTACHMENT_GREEN_SIZE,             FRAMEBUFFER_ATTACHMENT_BLUE_-
     SIZE, FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE, FRAMEBUFFER_-
     ATTACHMENT_DEPTH_SIZE,            or      FRAMEBUFFER_ATTACHMENT_-
     STENCIL_SIZE, then param will contain the number of bits in the
     corresponding red, green, blue, alpha, depth, or stencil component of the
     specified attachment. Zero is returned if the requested component is not
     present in attachment.
   • If pname is FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE, param will
     contain the format of components of the specified attachment, one of FLOAT,
     INDEX, INT, UNSIGNED_INT, SIGNED_NORMALIZED, or UNSIGNED_-
     NORMALIZED for floating-point, index, signed integer, unsigned integer,


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                              361


        signed normalized fixed-point, or unsigned normalized fixed-point compo-
        nents respectively. Only color buffers may have index or integer compo-
        nents.
   • If pname is FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING, param will
     contain the encoding of components of the specified attachment, one of
     LINEAR or SRGB for linear or sRGB-encoded components, respectively.
     Only color buffer components may be sRGB-encoded; such components
     are treated as described in sections 4.1.8 and 4.1.9. For the default frame-
     buffer, color encoding is determined by the implementation. For framebuffer
     objects, components are sRGB-encoded if the internal format of a color
     attachment is one of the color-renderable SRGB formats described in sec-
     tion 3.9.16.

   If     the    value   of   FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE               is
RENDERBUFFER, then

   • If pname is FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, params will con-
     tain the name of the renderbuffer object which contains the attached image.

   If the value of FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE is TEXTURE, then

   • If pname is FRAMEBUFFER_ATTACHMENT_OBJECT_NAME, then params will
     contain the name of the texture object which contains the attached image.
   • If pname is FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL, then params
     will contain the mipmap level of the texture object which contains the at-
     tached image.
   • If pname is FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE and
     the texture object named FRAMEBUFFER_ATTACHMENT_OBJECT_NAME is a
     cube map texture, then params will contain the cube map face of the cube-
     map texture object which contains the attached image. Otherwise params
     will contain the value zero.
   • If pname is FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER and the tex-
     ture object named FRAMEBUFFER_ATTACHMENT_OBJECT_NAME is a three-
     dimensional texture or a one- or two-dimensional array texture, then params
     will contain the number of the texture layer which contains the attached im-
     age. Otherwise params will contain the value zero.

   Any combinations of framebuffer type and pname not described above will
generate an INVALID_ENUM error.

                 OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                            362


6.1.17    Renderbuffer Object Queries
The command

      boolean IsRenderbuffer( uint renderbuffer );

returns TRUE if renderbuffer is the name of a renderbuffer object. If renderbuffer
is zero, or if renderbuffer is a non-zero value that is not the name of a renderbuffer
object, IsRenderbuffer return FALSE.
    The command

      void GetRenderbufferParameteriv( enum target, enum pname,
         int* params );

returns information about a bound renderbuffer object.             target must be
RENDERBUFFER and pname must be one of the symbolic values in table 6.31. If
the renderbuffer currently bound to target is zero, then an INVALID_OPERATION
error is generated.
    Upon successful return from GetRenderbufferParameteriv, if pname
is RENDERBUFFER_WIDTH, RENDERBUFFER_HEIGHT, RENDERBUFFER_-
INTERNAL_FORMAT, or RENDERBUFFER_SAMPLES, then params will contain
the width in pixels, height in pixels, internal format, or number of samples,
respectively, of the image of the renderbuffer currently bound to target.
    If pname is RENDERBUFFER_RED_SIZE, RENDERBUFFER_GREEN_-
SIZE,        RENDERBUFFER_BLUE_SIZE,               RENDERBUFFER_ALPHA_SIZE,
RENDERBUFFER_DEPTH_SIZE, or RENDERBUFFER_STENCIL_SIZE, then
params will contain the actual resolutions (not the resolutions specified when
the image array was defined) for the red, green, blue, alpha depth, or stencil
components, respectively, of the image of the renderbuffer currently bound to
target.
    Otherwise, an INVALID_ENUM error is generated.

6.1.18    Saving and Restoring State
Besides providing a means to obtain the values of state variables, the GL also
provides a means to save and restore groups of state variables. The PushAttrib,
PushClientAttrib, PopAttrib and PopClientAttrib commands are used for this
purpose. The commands

      void PushAttrib( bitfield mask );
      void PushClientAttrib( bitfield mask );


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                                            363


take a bitwise OR of symbolic constants indicating which groups of state vari-
ables to push onto an attribute stack. PushAttrib uses a server attribute stack
while PushClientAttrib uses a client attribute stack. Each constant refers to a
group of state variables. The classification of each variable into a group is indi-
cated in the following tables of state variables. The error STACK_OVERFLOW is
generated if PushAttrib or PushClientAttrib is executed while the corresponding
stack depth is MAX_ATTRIB_STACK_DEPTH or MAX_CLIENT_ATTRIB_STACK_-
DEPTH respectively. Bits set in mask that do not correspond to an attribute group
are ignored. The special mask values ALL_ATTRIB_BITS and CLIENT_ALL_-
ATTRIB_BITS may be used to push all stackable server and client state, respec-
tively.
    The commands

      void PopAttrib( void );
      void PopClientAttrib( void );

reset the values of those state variables that were saved with the last corresponding
PushAttrib or PopClientAttrib. Those not saved remain unchanged. The er-
ror STACK_UNDERFLOW is generated if PopAttrib or PopClientAttrib is executed
while the respective stack is empty.
     Table 6.2 shows the attribute groups with their corresponding symbolic con-
stant names and stacks.
     When PushAttrib is called with TEXTURE_BIT set, the priorities, border col-
ors, filter modes, wrap modes, and other state of the currently bound texture objects
(see table 6.20), as well as the current texture bindings and enables, are pushed onto
the attribute stack. (Unbound texture objects are not pushed or restored.) When an
attribute set that includes texture information is popped, the bindings and enables
are first restored to their pushed values, then the bound texture object’s parameters
are restored to their pushed values.
     Operations on attribute groups push or pop texture state within that group for
all texture units. When state for a group is pushed, all state corresponding to
TEXTURE0 is pushed first, followed by state corresponding to TEXTURE1, and so
on up to and including the state corresponding to TEXTUREk where k + 1 is the
value of MAX_TEXTURE_UNITS. When state for a group is popped, texture state is
restored in the opposite order that it was pushed, starting with state corresponding
to TEXTUREk and ending with TEXTURE0. Identical rules are observed for client
texture state push and pop operations. Matrix stacks are never pushed or popped
with PushAttrib, PushClientAttrib, PopAttrib, or PopClientAttrib.
     The depth of each attribute stack is implementation-dependent but must be at
least 16. The state required for each attribute stack is potentially 16 copies of each


            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.1. QUERYING GL STATE                                           364




        Stack        Attribute               Constant
        server    accum-buffer         ACCUM_BUFFER_BIT
        server     color-buffer        COLOR_BUFFER_BIT
        server        current             CURRENT_BIT
        server     depth-buffer        DEPTH_BUFFER_BIT
        server        enable               ENABLE_BIT
        server          eval                 EVAL_BIT
        server          fog                   FOG_BIT
        server          hint                 HINT_BIT
        server       lighting             LIGHTING_BIT
        server          line                 LINE_BIT
        server          list                 LIST_BIT
        server     multisample         MULTISAMPLE_BIT
        server         pixel            PIXEL_MODE_BIT
        server         point                POINT_BIT
        server       polygon              POLYGON_BIT
        server   polygon-stipple     POLYGON_STIPPLE_BIT
        server        scissor             SCISSOR_BIT
        server    stencil-buffer      STENCIL_BUFFER_BIT
        server        texture             TEXTURE_BIT
        server      transform            TRANSFORM_BIT
        server       viewport             VIEWPORT_BIT
        server                         ALL_ATTRIB_BITS
        client    vertex-array     CLIENT_VERTEX_ARRAY_BIT
        client     pixel-store      CLIENT_PIXEL_STORE_BIT
        client        select         can’t be pushed or popped
        client      feedback         can’t be pushed or popped
        client                     CLIENT_ALL_ATTRIB_BITS


                       Table 6.2: Attribute groups




        OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.2. STATE TABLES                                                                  365


state variable, 16 masks indicating which groups of variables are stored in each
stack entry, and an attribute stack pointer. In the initial state, both attribute stacks
are empty.
    In the tables that follow, a type is indicated for each variable. Table 6.3 explains
these types. The type actually identifies all state associated with the indicated
description; in certain cases only a portion of this state is returned. This is the case
with all matrices, where only the top entry on the stack is returned; with clip planes,
where only the selected clip plane is returned; with parameters describing lights,
where only the value pertaining to the selected light is returned; with evaluator
maps, where only the selected map is returned; and with textures, where only
the selected texture or texture parameter is returned. Finally, a “–” in the attribute
column indicates that the indicated value is not included in any attribute group (and
thus can not be pushed or popped with PushAttrib, PushClientAttrib, PopAttrib,
or PopClientAttrib).
    The M and m entries for initial minmax table values represent the maximum
and minimum possible representable values, respectively.


6.2    State Tables
The tables on the following pages indicate which state variables are obtained with
what commands. State variables that can be obtained using any of GetBooleanv,
GetIntegerv, GetFloatv, or GetDoublev are listed with just one of these com-
mands – the one that is most appropriate given the type of the data to be returned.
These state variables cannot be obtained using IsEnabled. However, state vari-
ables for which IsEnabled is listed as the query command can also be obtained
using GetBooleanv, GetIntegerv, GetFloatv, and GetDoublev. State variables
for which any other command is listed as the query command can be obtained by
using that command or any of its typed variants, although information may be lost
when not using the listed command. Unless otherwise specified, when floating-
point state is returned as integer values or integer state is returned as floating-point
values it is converted in the fashion described in section 6.1.2.
    State table entries which are required only by the imaging subset (see sec-
tion 3.7.2) are typeset against a gray background .




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
6.2. STATE TABLES                                                           366




       Type code    Explanation
          B         Boolean
        BM U        Basic machine units
          C         Color (floating-point R, G, B, and A values)
          CI        Color index (floating-point index value)
          T         Texture coordinates (floating-point (s, t, r, q) val-
                    ues)
          N         Normal coordinates (floating-point (x, y, z) val-
                    ues)
          V         Vertex, including associated data
          Z         Integer
          Z+        Non-negative integer or enumerated token value
       Zk , Zk∗     k-valued integer (k∗ indicates k is minimum)
          R         Floating-point number
          R+        Non-negative floating-point number
         R[a,b]     Floating-point number in the range [a, b]
          Rk        k-tuple of floating-point numbers
          P         Position ((x, y, z, w) floating-point coordinates)
          D         Direction ((x, y, z) floating-point coordinates)
         M4         4 × 4 floating-point matrix
          S         NULL-terminated string
           I        Image
          A         Attribute stack entry, including mask
          Y         Pointer (data type unspecified)
       n × type     n copies of type type (n∗ indicates n is minimum)


                      Table 6.3: State Variable Types




         OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                           Get       Initial
                                                                                                                        Get value   Type   Command   Value                   Description               Sec.    Attribute
                                                                                                                                                               When = 0, indicates begin/end ob-
                                                                                                                        –           Z11    –           0                                               2.6.1      –
                                                                                                                                                               ject
                                                                                                                                                                                                                           6.2. STATE TABLES




                                                                                                                        –            V     –           –       Previous vertex in Begin/End line       2.6.1      –
                                                                                                                        –            B     –           –       Indicates if line-vertex is the first   2.6.1      –
                                                                                                                                                               First vertex of a Begin/End line
                                                                                                                        –            V     –           –                                               2.6.1      –
                                                                                                                                                               loop
                                                                                                                        –           Z+     –           –       Line stipple counter                    3.5        –
                                                                                                                                                               Vertices inside of Begin/End poly-
                                                                                                                        –           n×V    –           –                                               2.6.1      –
                                                                                                                                                               gon
                                                                                                                        –           Z+     –           –       Number of polygon-vertices              2.6.1      –
                                                                                                                                                               Previous two vertices in a Be-
                                                                                                                        –           2×V    –           –                                               2.6.1      –
                                                                                                                                                               gin/End triangle strip
                                                                                                                                                               Number of vertices so far in triangle
                                                                                                                        –           Z3     –           –                                               2.6.1      –
                                                                                                                                                               strip: 0, 1, or more
                                                                                                                        –           Z2     –           –       Triangle strip A/B vertex pointer       2.6.1      –
                                                                                                                                                               Vertices of the quad under construc-
                                                                                                                        –           3×V    –           –                                               2.6.1      –
                                                                                                                                                               tion
                                                                                                                                                               Number of vertices so far in quad
                                                                                                                        –           Z4     –           –                                               2.6.1      –
                                                                                                                                                               strip: 0, 1, 2, or more




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.4. GL Internal begin-end state variables (inaccessible)
                                                                                                                                                                                                                           367
                                                                                                                                                   Get         Initial
                                                                                                                  Get value              Type      Command     Value                  Description                Sec.    Attribute
                                                                                                      CURRENT COLOR                       C      GetFloatv     1,1,1,1   Current color                           2.7     current
                                                                                                      CURRENT SECONDARY COLOR             C      GetFloatv     0,0,0,1   Current secondary color                 2.7     current
                                                                                                      CURRENT INDEX                       CI     GetIntegerv      1      Current color index                     2.7     current
                                                                                                                                                                                                                                     6.2. STATE TABLES




                                                                                                      CURRENT TEXTURE COORDS           16 ∗ ×T   GetFloatv     0,0,0,1   Current texture coordinates             2.7     current
                                                                                                      CURRENT NORMAL                      N      GetFloatv      0,0,1    Current normal                          2.7     current
                                                                                                      CURRENT FOG COORD                   R      GetFloatv        0      Current fog coordinate                  2.7     current
                                                                                                      –                                   C      –                -      Color associated with last vertex       2.5         –
                                                                                                                                                                         Color index associated with last ver-
                                                                                                      –                                  CI      –                -                                              2.5        –
                                                                                                                                                                         tex
                                                                                                                                                                         Texture coordinates associated with
                                                                                                      –                                  T       –                -                                              2.5        –
                                                                                                                                                                         last vertex
                                                                                                      CURRENT RASTER POSITION            R4      GetFloatv     0,0,0,1   Current raster position                 2.22    current
                                                                                                      CURRENT RASTER DISTANCE            R+      GetFloatv        0      Current raster distance                 2.22    current
                                                                                                      CURRENT RASTER COLOR               C       GetFloatv     1,1,1,1   Color associated with raster position   2.22    current
                                                                                                                                                                         Secondary color associated with
                                                                                                      CURRENT RASTER SECONDARY COLOR     C       GetFloatv     0,0,0,1                                           2.22    current
                                                                                                                                                                         raster position
                                                                                                                                                                         Color index associated with raster
                                                                                                      CURRENT RASTER INDEX               CI      GetIntegerv     1                                               2.22    current
                                                                                                                                                                         position
                                                                                                                                                                         Texture coordinates associated with




                                                      Table 6.5. Current Values and Associated Data
                                                                                                      CURRENT RASTER TEXTURE COORDS    16 ∗ ×T   GetFloatv     0,0,0,1                                           2.22    current
                                                                                                                                                                         raster position




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                      CURRENT RASTER POSITION VALID      B       GetBooleanv   TRUE      Raster position valid bit               2.22    current
                                                                                                      EDGE FLAG                          B       GetBooleanv   TRUE      Edge flag                               2.6.2   current
                                                                                                                                                                                                                                     368
                                                                                                                               Get           Initial
                                                                                                   Get value           Type    Command       Value                  Description         Sec.    Attribute
                                                                                             VERTEX ARRAY               B     IsEnabled     FALSE      Vertex array enable              2.8    vertex-array
                                                                                                                                                                                                              6.2. STATE TABLES




                                                                                             VERTEX ARRAY SIZE         Z+     GetIntegerv      4       Coordinates per vertex           2.8    vertex-array
                                                                                             VERTEX ARRAY TYPE          Z4    GetIntegerv   FLOAT      Type of vertex coordinates       2.8    vertex-array
                                                                                             VERTEX ARRAY STRIDE       Z+     GetIntegerv      0       Stride between vertices          2.8    vertex-array
                                                                                             VERTEX ARRAY POINTER       Y     GetPointerv      0       Pointer to the vertex array      2.8    vertex-array
                                                                                             NORMAL ARRAY               B     IsEnabled     FALSE      Normal array enable              2.8    vertex-array
                                                                                             NORMAL ARRAY TYPE          Z5    GetIntegerv   FLOAT      Type of normal coordinates       2.8    vertex-array
                                                                                             NORMAL ARRAY STRIDE       Z+     GetIntegerv      0       Stride between normals           2.8    vertex-array
                                                                                             NORMAL ARRAY POINTER       Y     GetPointerv      0       Pointer to the normal array      2.8    vertex-array
                                                                                             FOG COORD ARRAY            B     IsEnabled     FALSE      Fog coord array enable           2.8    vertex-array
                                                                                             FOG COORD ARRAY TYPE       Z2    GetIntegerv   FLOAT      Type of fog coord components     2.8    vertex-array
                                                                                             FOG COORD ARRAY STRIDE    Z+     GetIntegerv      0       Stride between fog coords        2.8    vertex-array
                                                                                             FOG COORD ARRAY POINTER    Y     GetPointerv      0       Pointer to the fog coord array   2.8    vertex-array
                                                                                             COLOR ARRAY                B     IsEnabled     FALSE      Color array enable               2.8    vertex-array
                                                                                             COLOR ARRAY SIZE          Z+     GetIntegerv      4       Color components per vertex      2.8    vertex-array




                                                      Table 6.6. Vertex Array Object State
                                                                                             COLOR ARRAY TYPE           Z8    GetIntegerv   FLOAT      Type of color components         2.8    vertex-array
                                                                                             COLOR ARRAY STRIDE        Z+     GetIntegerv      0       Stride between colors            2.8    vertex-array
                                                                                             COLOR ARRAY POINTER        Y     GetPointerv      0       Pointer to the color array       2.8    vertex-array




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                              369
                                                                                                                                                       Get       Initial
                                                                                                              Get value                Type            Command   Value            Description           Sec.    Attribute
                                                                                                                                                                           Secondary color array
                                                                                                     SECONDARY COLOR ARRAY              B          IsEnabled     FALSE                                  2.8    vertex-array
                                                                                                                                                                           enable
                                                                                                                                                                           Secondary color compo-
                                                                                                     SECONDARY COLOR ARRAY SIZE        Z+          GetIntegerv     3                                    2.8    vertex-array
                                                                                                                                                                           nents per vertex
                                                                                                                                                                                                                              6.2. STATE TABLES




                                                                                                                                                                           Type of secondary color
                                                                                                     SECONDARY COLOR ARRAY TYPE         Z8         GetIntegerv   FLOAT                                  2.8    vertex-array
                                                                                                                                                                           components
                                                                                                                                                                           Stride between sec-
                                                                                                     SECONDARY COLOR ARRAY STRIDE      Z+          GetIntegerv     0                                    2.8    vertex-array
                                                                                                                                                                           ondary colors
                                                                                                                                                                           Pointer to the secondary
                                                                                                     SECONDARY COLOR ARRAY POINTER      Y          GetPointerv     0                                    2.8    vertex-array
                                                                                                                                                                           color array
                                                                                                     INDEX ARRAY                       B           IsEnabled     FALSE     Index array enable           2.8    vertex-array
                                                                                                     INDEX ARRAY TYPE                  Z4          GetIntegerv   FLOAT     Type of indices              2.8    vertex-array
                                                                                                     INDEX ARRAY STRIDE                Z+          GetIntegerv     0       Stride between indices       2.8    vertex-array
                                                                                                     INDEX ARRAY POINTER               Y           GetPointerv     0       Pointer to the index array   2.8    vertex-array
                                                                                                                                                                           Texture coordinate array
                                                                                                     TEXTURE COORD ARRAY             16 ∗ ×B       IsEnabled     FALSE                                  2.8    vertex-array
                                                                                                                                                                           enable
                                                                                                                                               +
                                                                                                     TEXTURE COORD ARRAY SIZE        16 ∗ ×Z       GetIntegerv     4       Coordinates per element      2.8    vertex-array
                                                                                                                                                                           Type of texture coordi-
                                                                                                     TEXTURE COORD ARRAY TYPE        16 ∗ ×Z4      GetIntegerv   FLOAT                                  2.8    vertex-array
                                                                                                                                                                           nates




                                                      Table 6.7. Vertex Array Object State (cont.)
                                                                                                                                                                           Stride between texture
                                                                                                     TEXTURE COORD ARRAY STRIDE      16 ∗ ×Z +     GetIntegerv     0                                    2.8    vertex-array
                                                                                                                                                                           coordinates




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                           Pointer to the texture co-
                                                                                                     TEXTURE COORD ARRAY POINTER     16 ∗ ×Y       GetPointerv     0                                    2.8    vertex-array
                                                                                                                                                                           ordinate array
                                                                                                                                                                                                                              370
                                                                                                                                                      Get             Initial
                                                                                                               Get value                Type          Command         Value            Description           Sec.    Attribute
                                                                                                                                                  GetVertexAttribiv             Vertex attrib array enable
                                                                                                     VERTEX ATTRIB ARRAY ENABLED      16 ∗ ×B                         FALSE                                  2.8    vertex-array
                                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                                                                  GetVertexAttribiv
                                                                                                     VERTEX ATTRIB ARRAY SIZE         16 ∗ ×Z                           4       Vertex attrib array size     2.8    vertex-array
                                                                                                                                                  GetVertexAttribiv
                                                                                                     VERTEX ATTRIB ARRAY STRIDE       16 ∗ ×Z +                         0       Vertex attrib array stride   2.8    vertex-array
                                                                                                                                                  GetVertexAttribiv
                                                                                                     VERTEX ATTRIB ARRAY TYPE         16 ∗ ×Z9                        FLOAT     Vertex attrib array type     2.8    vertex-array
                                                                                                                                                  GetVertexAttribiv             Vertex attrib array nor-
                                                                                                     VERTEX ATTRIB ARRAY NORMALIZED   16 ∗ ×B                         FALSE                                  2.8    vertex-array
                                                                                                                                                                                malized
                                                                                                                                                  GetVertexAttribiv             Vertex attrib array has
                                                                                                     VERTEX ATTRIB ARRAY INTEGER      16 ∗ ×B                         FALSE                                  2.8    vertex-array
                                                                                                                                                                                unconverted integers
                                                                                                                                                  GetVertex-                    Vertex     attrib   array
                                                                                                     VERTEX ATTRIB ARRAY POINTER      16 ∗ ×Y                         NULL                                   2.8    vertex-array
                                                                                                                                                  AttribPointerv                pointer
                                                                                                     EDGE FLAG ARRAY                    B         IsEnabled           FALSE     Edge flag array enable       2.8    vertex-array
                                                                                                     EDGE FLAG ARRAY STRIDE             Z+        GetIntegerv           0       Stride between edge flags    2.8    vertex-array




                                                      Table 6.8. Vertex Array Object State (cont.)
                                                                                                                                                                                Pointer to the edge flag
                                                                                                     EDGE FLAG ARRAY POINTER             Y        GetPointerv           0                                    2.8    vertex-array
                                                                                                                                                                                array




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                                   371
                                                                                                                                                            Get             Initial
                                                                                                                  Get value                   Type          Command         Value            Description          Sec.     Attribute
                                                                                                                                                                                      Vertex array buffer bind-
                                                                                                     VERTEX ARRAY BUFFER BINDING              Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      ing
                                                                                                                                                                                                                                         6.2. STATE TABLES




                                                                                                                                                                                      Normal array buffer
                                                                                                     NORMAL ARRAY BUFFER BINDING              Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      binding
                                                                                                                                                                                      Color array buffer bind-
                                                                                                     COLOR ARRAY BUFFER BINDING               Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      ing
                                                                                                                                                                                      Index array buffer bind-
                                                                                                     INDEX ARRAY BUFFER BINDING               Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      ing
                                                                                                                                                                                      Texcoord array buffer
                                                                                                     TEXTURE COORD ARRAY BUFFER BINDING     16 ∗ ×Z +   GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      binding
                                                                                                                                                                                      Edge flag array buffer
                                                                                                     EDGE FLAG ARRAY BUFFER BINDING           Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      binding
                                                                                                                                                                                      Secondary color array
                                                                                                     SECONDARY COLOR ARRAY BUFFER BINDING     Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      buffer binding
                                                                                                                                                                                      Fog coordinate array
                                                                                                     FOG COORD ARRAY BUFFER BINDING           Z+        GetIntegerv           0                                   2.9     vertex-array
                                                                                                                                                                                      buffer binding
                                                                                                                                                                                      Element array buffer
                                                                                                     ELEMENT ARRAY BUFFER BINDING             Z+        GetIntegerv           0                                   2.9.5   vertex-array




                                                      Table 6.9. Vertex Array Object State (cont.)
                                                                                                                                                                                      binding
                                                                                                                                                                                      Attribute array buffer
                                                                                                     VERTEX ATTRIB ARRAY BUFFER BINDING     16 ∗ ×Z +   GetVertexAttribiv     0                                   2.9     vertex-array




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                      binding
                                                                                                                                                                                                                                         372
                                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                                                                          Get         Initial
                                                                                                                         Get value            Type        Command     Value             Description          Sec.    Attribute
                                                                                                                                                                                Client active texture unit
                                                                                                                    CLIENT ACTIVE TEXTURE     Z16∗    GetIntegerv   TEXTURE0                                 2.7    vertex-array
                                                                                                                                                                                selector
                                                                                                                    ARRAY BUFFER BINDING      Z+      GetIntegerv       0       Current buffer binding       2.9    vertex-array
                                                                                                                                                  +                             Current vertex array ob-
                                                                                                                    VERTEX ARRAY BINDING      Z       GetIntegerv       0                                    2.10   vertex-array
                                                                                                                                                                                ject binding
                                                                                                                    PRIMITIVE RESTART         B       IsEnabled      FALSE      Primitive restart enable     2.8    vertex-array
                                                                                                                    PRIMITIVE RESTART INDEX   Z+      GetIntegerv      0        Primitive restart index      2.8    vertex-array




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.10. Vertex Array Data (not in Vertex Array objects)
                                                                                                                                                                                                                                   373
                                                                                                                                                                                                                6.2. STATE TABLES




                                                                                                                              Get                   Initial
                                                                                            Get value            Type         Command               Value                 Description        Sec.   Attribute
                                                                                        –                     n × BM U   GetBufferSubData              -      Buffer data                    2.9        -
                                                                                        BUFFER SIZE            n × Z+    GetBufferParameteriv         0       Buffer data size               2.9        -
                                                                                        BUFFER USAGE            n × Z9   GetBufferParameteriv   STATIC_DRAW   Buffer usage pattern           2.9        -
                                                                                        BUFFER ACCESS           n × Z3   GetBufferParameteriv   READ_WRITE    Buffer access flag             2.9        -
                                                                                        BUFFER ACCESS FLAGS    n × Z+    GetBufferParameteriv         0       Extended buffer access flag    2.9        -
                                                                                        BUFFER MAPPED           n×B      GetBufferParameteriv      FALSE      Buffer map flag                2.9        -
                                                                                        BUFFER MAP POINTER      n×Y      GetBufferPointerv          NULL      Mapped buffer pointer          2.9        -
                                                                                        BUFFER MAP OFFSET      n × Z+    GetBufferParameteriv         0       Start of mapped buffer range   2.9        -
                                                                                        BUFFER MAP LENGTH      n × Z+    GetBufferParameteriv         0       Size of mapped buffer range    2.9        -




                                                      Table 6.11. Buffer Object State
OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                374
                                                                                                                                           Get              Initial
                                                                                                       Get value             Type          Command          Value            Description            Sec.       Attribute
                                                                                         COLOR MATRIX
                                                                                                                           2 ∗ ×M 4       GetFloatv        Identity    Color matrix stack          3.7.3           –
                                                                                         (TRANSPOSE COLOR MATRIX)

                                                                                         MODELVIEW MATRIX
                                                                                                                           32 ∗ ×M 4      GetFloatv        Identity    Model-view matrix stack     2.12.1          –
                                                                                         (TRANSPOSE MODELVIEW MATRIX)

                                                                                         PROJECTION MATRIX
                                                                                                                           2 ∗ ×M 4       GetFloatv        Identity    Projection matrix stack     2.12.1          –
                                                                                         (TRANSPOSE PROJECTION MATRIX)
                                                                                                                                                                                                                               6.2. STATE TABLES




                                                                                         TEXTURE MATRIX
                                                                                                                         16 ∗ ×2 ∗ ×M 4   GetFloatv        Identity    Texture matrix stack        2.12.1          –
                                                                                         (TRANSPOSE TEXTURE MATRIX)

                                                                                         VIEWPORT                            4×Z          GetIntegerv     see 2.15.1   Viewport origin & extent    2.15.1      viewport
                                                                                         DEPTH RANGE                        2 × R+        GetFloatv          0,1       Depth range near & far      2.15.1      viewport
                                                                                                                                                                       Color     matrix    stack
                                                                                         COLOR MATRIX STACK DEPTH             Z+          GetIntegerv         1                                    3.7.3           –
                                                                                                                                                                       pointer
                                                                                                                                                                       Model-view matrix stack
                                                                                         MODELVIEW STACK DEPTH                Z+          GetIntegerv         1                                    2.12.1          –
                                                                                                                                                                       pointer
                                                                                                                                                                       Projection matrix stack
                                                                                         PROJECTION STACK DEPTH               Z+          GetIntegerv         1                                    2.12.1          –
                                                                                                                                                                       pointer
                                                                                                                                                                       Texture matrix stack
                                                                                         TEXTURE STACK DEPTH               16 ∗ ×Z +      GetIntegerv         1                                    2.12.1          –
                                                                                                                                                                       pointer
                                                                                         MATRIX MODE                          Z4          GetIntegerv    MODELVIEW     Current matrix mode         2.12.1      transform




                                                      Table 6.12. Transformation state
                                                                                                                                                                       Current normal normal-
                                                                                         NORMALIZE                             B          IsEnabled        FALSE                                   2.12.2   transform/enable
                                                                                                                                                                       ization on/off
                                                                                                                                                                       Current normal rescaling
                                                                                         RESCALE NORMAL                        B          IsEnabled        FALSE                                   2.12.2   transform/enable
                                                                                                                                                                       on/off




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                       User clipping plane coef-
                                                                                         CLIP PLANEi                        6 ∗ ×R4       GetClipPlane     0,0,0,0                                 2.20        transform
                                                                                                                                                                       ficients
                                                                                                                                                                       ith user clipping plane
                                                                                         CLIP DISTANCEi                     6 ∗ ×B        IsEnabled        FALSE                                   2.20     transform/enable
                                                                                                                                                                       enabled
                                                                                                                                                                                                                               375
                                                                                                            Get               Initial
                                                                                                                                                                                                               6.2. STATE TABLES




                                                                                   Get value        Type    Command           Value                    Description              Sec.          Attribute
                                                                             FOG COLOR               C     GetFloatv         0,0,0,0      Fog color                             3.11            fog
                                                                             FOG INDEX               CI    GetFloatv            0         Fog index                             3.11            fog
                                                                             FOG DENSITY             R     GetFloatv           1.0        Exponential fog density               3.11            fog
                                                                             FOG START               R     GetFloatv           0.0        Linear fog start                      3.11            fog
                                                                             FOG END                 R     GetFloatv           1.0        Linear fog end                        3.11            fog
                                                                             FOG MODE                Z3    GetIntegerv         EXP        Fog mode                              3.11            fog
                                                                             FOG                     B     IsEnabled         FALSE        True if fog enabled                   3.11         fog/enable
                                                                                                                                          Source of coordinate for fog calcu-
                                                                             FOG COORD SRC          Z2     GetIntegerv   FRAGMENT_DEPTH                                         3.11            fog
                                                                                                                                          lation
                                                                             COLOR SUM              B      IsEnabled          FALSE       True if color sum enabled              3.10         fog/enable




                                                      Table 6.13. Coloring
                                                                             SHADE MODEL            Z+     GetIntegerv       SMOOTH       ShadeModel setting                    2.13.7         lighting
                                                                             CLAMP VERTEX COLOR     Z3     GetIntegerv        TRUE        Vertex color clamping                 2.13.6     lighting/enable
                                                                             CLAMP FRAGMENT COLOR   Z3     GetIntegerv     FIXED_ONLY     Fragment color clamping                 3.8    color-buffer/enable
                                                                             CLAMP READ COLOR       Z3     GetIntegerv     FIXED_ONLY     Read color clamping                    4.3.2   color-buffer/enable




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                               376
                                                                                                                                                     Get                    Initial
                                                                                                                          Get value         Type     Command                Value              Description        Sec.       Attribute
                                                                                                                                                                                           True if lighting is
                                                                                                                LIGHTING                     B     IsEnabled               FALSE                                 2.13.1   lighting/enable
                                                                                                                                                                                           enabled
                                                                                                                                                                                           True if color
                                                                                                                COLOR MATERIAL               B     IsEnabled               FALSE           tracking is en-       2.13.3   lighting/enable
                                                                                                                                                                                           abled
                                                                                                                                                                                                                                            6.2. STATE TABLES




                                                                                                                                                                                           Material      prop-
                                                                                                                COLOR MATERIAL PARAMETER    Z5     GetIntegerv     AMBIENT_AND_DIFFUSE     erties     tracking   2.13.3      lighting
                                                                                                                                                                                           current color
                                                                                                                                                                                           Face(s) affected
                                                                                                                COLOR MATERIAL FACE         Z3     GetIntegerv       FRONT_AND_BACK                              2.13.3      lighting
                                                                                                                                                                                           by color tracking
                                                                                                                                                                                           Ambient material
                                                                                                                AMBIENT                     2×C    GetMaterialfv       (0.2,0.2,0.2,1.0)                         2.13.1      lighting
                                                                                                                                                                                           color
                                                                                                                                                                                           Diffuse material
                                                                                                                DIFFUSE                     2×C    GetMaterialfv       (0.8,0.8,0.8,1.0)                         2.13.1      lighting
                                                                                                                                                                                           color
                                                                                                                                                                                           Specular material
                                                                                                                SPECULAR                    2×C    GetMaterialfv       (0.0,0.0,0.0,1.0)                         2.13.1      lighting
                                                                                                                                                                                           color
                                                                                                                                                                                           Emissive       mat.
                                                                                                                EMISSION                    2×C    GetMaterialfv       (0.0,0.0,0.0,1.0)                         2.13.1      lighting
                                                                                                                                                                                           color
                                                                                                                                                                                           Specular expo-
                                                                                                                SHININESS                   2×R    GetMaterialfv             0.0                                 2.13.1      lighting
                                                                                                                                                                                           nent of material
                                                                                                                                                                                           Ambient       scene
                                                                                                                LIGHT MODEL AMBIENT          C     GetFloatv           (0.2,0.2,0.2,1.0)                         2.13.1      lighting
                                                                                                                                                                                           color




                                                      Table 6.14. Lighting (see also table 2.10 for defaults)


OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                LIGHT MODEL LOCAL VIEWER     B     GetBooleanv             FALSE           Viewer is local       2.13.1      lighting
                                                                                                                                                                                           Use      two-sided
                                                                                                                LIGHT MODEL TWO SIDE         B     GetBooleanv             FALSE                                 2.13.1      lighting
                                                                                                                                                                                           lighting
                                                                                                                LIGHT MODEL COLOR CONTROL   Z2     GetIntegerv        SINGLE_COLOR         Color control         2.13.1      lighting
                                                                                                                                                                                                                                            377
                                                                                                                                                                                                                         6.2. STATE TABLES




                                                                                                                         Get                 Initial
                                                                                          Get value            Type      Command             Value                      Description            Sec.       Attribute
                                                                                     AMBIENT                  8 ∗ ×C   GetLightfv      (0.0,0.0,0.0,1.0)   Ambient intensity of light i       2.13.1       lighting
                                                                                     DIFFUSE                  8 ∗ ×C   GetLightfv       see table 2.10     Diffuse intensity of light i       2.13.1       lighting
                                                                                     SPECULAR                 8 ∗ ×C   GetLightfv       see table 2.10     Specular intensity of light i      2.13.1       lighting
                                                                                     POSITION                 8 ∗ ×P   GetLightfv      (0.0,0.0,1.0,0.0)   Position of light i                2.13.1       lighting
                                                                                     CONSTANT ATTENUATION    8 ∗ ×R+   GetLightfv             1.0          Constant atten. factor             2.13.1       lighting
                                                                                     LINEAR ATTENUATION      8 ∗ ×R+   GetLightfv             0.0          Linear atten. factor               2.13.1       lighting
                                                                                     QUADRATIC ATTENUATION   8 ∗ ×R+   GetLightfv             0.0          Quadratic atten. factor            2.13.1       lighting
                                                                                     SPOT DIRECTION           8 ∗ ×D   GetLightfv        (0.0,0.0,-1.0)    Spotlight direction of light i     2.13.1       lighting
                                                                                     SPOT EXPONENT           8 ∗ ×R+   GetLightfv             0.0          Spotlight exponent of light i      2.13.1       lighting
                                                                                     SPOT CUTOFF             8 ∗ ×R+   GetLightfv            180.0         Spot. angle of light i             2.13.1       lighting
                                                                                     LIGHTi                   8 ∗ ×B   IsEnabled            FALSE          True if light i enabled            2.13.1   lighting/enable




                                                      Table 6.15. Lighting (cont.)
                                                                                                                                                           am , dm , and sm for color index
                                                                                     COLOR INDEXES           2×3×R     GetMaterialfv        0,1,1                                             2.13.1      lighting
                                                                                                                                                           lighting




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                         378
                                                                                                                          Get            Initial
                                                                                          Get value             Type      Command        Value                  Description               Sec.     Attribute
                                                                                                                                                                                                                 6.2. STATE TABLES




                                                                                  POINT SIZE                    R+      GetFloatv         1.0      Point size                             3.4        point
                                                                                  POINT SMOOTH                   B      IsEnabled       FALSE      Point antialiasing on                  3.4     point/enable
                                                                                  POINT SPRITE                   B      IsEnabled       FALSE      Point sprite enable                    3.4     point/enable
                                                                                  POINT SIZE MIN                R+      GetFloatv         0.0      Attenuated minimum point size          3.4        point
                                                                                                                                                   Attenuated maximum point size. 1
                                                                                                                                           1
                                                                                  POINT SIZE MAX                R+      GetFloatv                  Max. of the impl. dependent max.       3.4        point
                                                                                                                                                   aliased and smooth point sizes.
                                                                                  POINT FADE THRESHOLD SIZE      R+     GetFloatv          1.0     Threshold for alpha attenuation         3.4       point
                                                                                  POINT DISTANCE ATTENUATION   3 × R+   GetFloatv         1,0,0    Attenuation coefficients                3.4       point
                                                                                  POINT SPRITE COORD ORIGIN      Z2     GetIntegerv   UPPER_LEFT   Origin orientation for point sprites    3.4       point
                                                                                  LINE WIDTH                     R+     GetFloatv          1.0     Line width                              3.5        line




                                                      Table 6.16. Rasterization
                                                                                  LINE SMOOTH                     B     IsEnabled        FALSE     Line antialiasing on                    3.5    line/enable
                                                                                  LINE STIPPLE PATTERN           Z+     GetIntegerv        1’s     Line stipple                           3.5.2       line
                                                                                  LINE STIPPLE REPEAT            Z+     GetIntegerv         1      Line stipple repeat                    3.5.2       line
                                                                                  LINE STIPPLE                    B     IsEnabled        FALSE     Line stipple enable                    3.5.2   line/enable




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                 379
                                                                                                                               Get              Initial
                                                                                               Get value          Type         Command          Value                  Description              Sec.       Attribute
                                                                                          CULL FACE                B       IsEnabled           FALSE      Polygon culling enabled               3.6.1   polygon/enable
                                                                                                                                                                                                                          6.2. STATE TABLES




                                                                                          CULL FACE MODE           Z3      GetIntegerv          BACK      Cull front-/back-facing polygons      3.6.1      polygon
                                                                                                                                                          Polygon frontface CW/CCW indica-
                                                                                          FRONT FACE               Z2      GetIntegerv          CCW                                             3.6.1      polygon
                                                                                                                                                          tor
                                                                                          POLYGON SMOOTH            B      IsEnabled           FALSE      Polygon antialiasing on               3.6     polygon/enable
                                                                                                                                                          Polygon rasterization mode (front &
                                                                                          POLYGON MODE            2 × Z3   GetIntegerv         FILL                                             3.6.4      polygon
                                                                                                                                                          back)
                                                                                          POLYGON OFFSET FACTOR     R      GetFloatv              0       Polygon offset factor                 3.6.5      polygon
                                                                                          POLYGON OFFSET UNITS      R      GetFloatv              0       Polygon offset units                  3.6.5      polygon
                                                                                                                                                          Polygon offset enable for POINT
                                                                                          POLYGON OFFSET POINT      B      IsEnabled           FALSE                                            3.6.5   polygon/enable
                                                                                                                                                          mode rasterization
                                                                                                                                                          Polygon offset enable for LINE
                                                                                          POLYGON OFFSET LINE       B      IsEnabled           FALSE                                            3.6.5   polygon/enable
                                                                                                                                                          mode rasterization
                                                                                                                                                          Polygon offset enable for FILL




                                                      Table 6.17. Rasterization (cont.)
                                                                                          POLYGON OFFSET FILL       B      IsEnabled           FALSE                                            3.6.5   polygon/enable
                                                                                                                                                          mode rasterization
                                                                                          –                         I      GetPolygonStipple     1’s      Polygon stipple                        3.6    polygon-stipple
                                                                                          POLYGON STIPPLE           B      IsEnabled           FALSE      Polygon stipple enable                3.6.2   polygon/enable




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                          380
                                                                                                                                                                                                       6.2. STATE TABLES




                                                                                                                      Get          Initial
                                                                                        Get value            Type     Command      Value                  Description     Sec.         Attribute
                                                                                  MULTISAMPLE                 B     IsEnabled      TRUE      Multisample rasterization    3.3.1   multisample/enable
                                                                                  SAMPLE ALPHA TO COVERAGE    B     IsEnabled     FALSE      Modify coverage from alpha   4.1.3   multisample/enable
                                                                                  SAMPLE ALPHA TO ONE         B     IsEnabled     FALSE      Set alpha to maximum         4.1.3   multisample/enable
                                                                                  SAMPLE COVERAGE             B     IsEnabled     FALSE      Mask to modify coverage      4.1.3   multisample/enable
                                                                                  SAMPLE COVERAGE VALUE      R+     GetFloatv        1       Coverage mask value          4.1.3      multisample
                                                                                  SAMPLE COVERAGE INVERT      B     GetBooleanv   FALSE      Invert coverage mask value   4.1.3      multisample




                                                      Table 6.18. Multisampling



OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                       381
                                                                                                                                                                       Get           Initial
                                                                                                                                     Get value            Type         Command       Value              Description           Sec.      Attribute
                                                                                                                                                                                                True if xD texturing is
                                                                                                                        TEXTURE xD                    16 ∗ ×3 × B     IsEnabled     FALSE                                    3.9.18   texture/enable
                                                                                                                                                                                                enabled; x is 1, 2, or 3
                                                                                                                                                                                                True if cube map textur-
                                                                                                                        TEXTURE CUBE MAP                16 ∗ ×B       IsEnabled     FALSE                                    3.9.14   texture/enable
                                                                                                                                                                                                ing is enabled
                                                                                                                                                                                                Texture object bound to
                                                                                                                        TEXTURE BINDING xD            32 ∗ ×3 × Z +   GetIntegerv      0                                     3.9.13      texture
                                                                                                                                                                                                TEXTURE_xD
                                                                                                                                                                                                                                                       6.2. STATE TABLES




                                                                                                                                                                                                Texture object bound to
                                                                                                                        TEXTURE BINDING 1D ARRAY       32 ∗ ×Z +      GetIntegerv      0                                     3.9.13      texture
                                                                                                                                                                                                TEXTURE_1D_ARRAY
                                                                                                                                                                                                Texture object bound to
                                                                                                                        TEXTURE BINDING 2D ARRAY       32 ∗ ×Z +      GetIntegerv      0                                     3.9.13      texture
                                                                                                                                                                                                TEXTURE_2D_ARRAY
                                                                                                                                                                                                Texture object bound
                                                                                                                        TEXTURE BINDING RECTANGLE      32 ∗ ×Z +      GetIntegerv      0        to           TEXTURE_-       3.9.13      texture
                                                                                                                                                                                                RECTANGLE
                                                                                                                                                                                                Texture object bound to
                                                                                                                        TEXTURE BINDING BUFFER         32 ∗ ×Z +      GetIntegerv      0                                     3.9.13      texture
                                                                                                                                                                                                TEXTURE_BUFFER
                                                                                                                                                                                                Texture object bound to
                                                                                                                        TEXTURE BINDING CUBE MAP       32 ∗ ×Z +      GetIntegerv      0                                     3.9.13      texture
                                                                                                                                                                                                TEXTURE_CUBE_MAP
                                                                                                                                                                                                xD texture image at l.o.d.
                                                                                                                        TEXTURE xD                       n×I          GetTexImage   see 3.9                                   3.9           –
                                                                                                                                                                                                i
                                                                                                                                                                                                1D texture array image at
                                                                                                                        TEXTURE 1D ARRAY                 n×I          GetTexImage   see 3.9                                   3.9           –
                                                                                                                                                                                                row i
                                                                                                                                                                                                2D texture array image at
                                                                                                                        TEXTURE 2D ARRAY                 n×I          GetTexImage   see 3.9                                   3.9           –
                                                                                                                                                                                                slice i




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                Rectangular texture im-
                                                                                                                        TEXTURE RECTANGLE                n×I          GetTexImage   see 3.9                                   3.9           –
                                                                                                                                                                                                age at l.o.d. zero




                                                      Table 6.19. Textures (state per texture unit and binding point)
                                                                                                                                                                                                +x face cube map tex-
                                                                                                                        TEXTURE CUBE MAP POSITIVE X      n×I          GetTexImage   see 3.9.1                                3.9.1          –
                                                                                                                                                                                                ture image at l.o.d. i
                                                                                                                                                                                                −x face cube map tex-
                                                                                                                                                                                                                                                       382




                                                                                                                        TEXTURE CUBE MAP NEGATIVE X      n×I          GetTexImage   see 3.9.1                                3.9.1          –
                                                                                                                                                                                                ture image at l.o.d. i
                                                                                                                                                                                                +y face cube map texture
                                                                                                                        TEXTURE CUBE MAP POSITIVE Y      n×I          GetTexImage   see 3.9.1                                3.9.1          –
                                                                                                                                                                                                image at l.o.d. i
                                                                                                                                                                                                −y face cube map texture
                                                                                                                        TEXTURE CUBE MAP NEGATIVE Y      n×I          GetTexImage   see 3.9.1                                3.9.1          –
                                                                                                                                                                                                image at l.o.d. i
                                                                                                                                                                                                +z face cube map texture
                                                                                                                        TEXTURE CUBE MAP POSITIVE Z      n×I          GetTexImage   see 3.9.1                                3.9.1          –
                                                                                                                                                                                                image at l.o.d. i
                                                                                                                                                                                                −z face cube map texture
                                                                                                                        TEXTURE CUBE MAP NEGATIVE Z      n×I          GetTexImage   see 3.9.1                                3.9.1          –
                                                                                                                                                                                                image at l.o.d. i
                                                                                                                                                Get                  Initial
                                                                                                                   Get value     Type           Command              Value               Description         Sec.     Attribute
                                                                                                        TEXTURE BORDER COLOR    n×C         GetTexParameter         0,0,0,0       Border color                3.9      texture
                                                                                                        TEXTURE MIN FILTER      n × Z6      GetTexParameter     see sec. 3.9.12   Minification function      3.9.8     texture
                                                                                                        TEXTURE MAG FILTER      n × Z2      GetTexParameter        LINEAR         Magnification function     3.9.9     texture
                                                                                                                                                                                                                                  6.2. STATE TABLES




                                                                                                        TEXTURE WRAP S          n × Z5      GetTexParameter     see sec. 3.9.12   Texcoord s wrap mode       3.9.8     texture
                                                                                                                                                                                  Texcoord t wrap mode
                                                                                                        TEXTURE WRAP T          n × Z5      GetTexParameter     see sec. 3.9.12   (2D, 3D, cube map tex-     3.9.8    texture
                                                                                                                                                                                  tures only)
                                                                                                                                                                                  Texcoord r wrap mode
                                                                                                        TEXTURE WRAP R          n × Z5      GetTexParameter     see sec. 3.9.12                              3.9.8    texture
                                                                                                                                                                                  (3D textures only)
                                                                                                        TEXTURE PRIORITY       n × R[0,1]   GetTexParameterfv          1          Texture object priority    3.9.13   texture
                                                                                                        TEXTURE RESIDENT         n×B        GetTexParameteriv     see 3.9.13      Texture residency          3.9.13   texture
                                                                                                        TEXTURE MIN LOD          n×R        GetTexParameterfv       -1000         Minimum level of detail     3.9     texture
                                                                                                        TEXTURE MAX LOD          n×R        GetTexParameterfv        1000         Maximum level of detail     3.9     texture
                                                                                                        TEXTURE BASE LEVEL      n × Z+      GetTexParameterfv          0          Base texture array          3.9     texture
                                                                                                        TEXTURE MAX LEVEL       n × Z+      GetTexParameterfv        1000         Max. texture array level    3.9     texture
                                                                                                                                                                                  Texture level of detail
                                                                                                        TEXTURE LOD BIAS        n×R         GetTexParameterfv        0.0                                     3.9.8    texture
                                                                                                                                                                                  bias (biastexobj )
                                                                                                        DEPTH TEXTURE MODE      n × Z3      GetTexParameteriv   LUMINANCE         Depth texture mode         3.9.6    texture
                                                                                                        TEXTURE COMPARE MODE                GetTexParameteriv      NONE           Comparison mode            3.9.15   texture




                                                      Table 6.20. Textures (state per texture object)
                                                                                                                                n × Z2
                                                                                                        TEXTURE COMPARE FUNC    n × Z8      GetTexParameteriv     LEQUAL          Comparison function        3.9.15   texture




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                  Automatic mipmap gen-
                                                                                                        GENERATE MIPMAP         n×B         GetTexParameter        FALSE                                     3.9.8    texture
                                                                                                                                                                                  eration enabled
                                                                                                                                                                                                                                  383
                                                                                                                                                            Get              Initial
                                                                                                                  Get value                Type             Command          Value            Description            Sec.    Attribute
                                                                                                       TEXTURE WIDTH                      n × Z+      GetTexLevelParameter     0       Specified width               3.9         –
                                                                                                       TEXTURE HEIGHT                     n × Z+      GetTexLevelParameter     0       Specified height (2D/3D)      3.9         –
                                                                                                       TEXTURE DEPTH                      n × Z+      GetTexLevelParameter     0       Specified depth (3D)          3.9         –
                                                                                                       TEXTURE BORDER                     n × Z+      GetTexLevelParameter     0       Specified border width        3.9         –
                                                                                                       TEXTURE INTERNAL FORMAT                                                         Internal format (see sec-
                                                                                                                                                                                                                                         6.2. STATE TABLES




                                                                                                                                          n × Z68∗    GetTexLevelParameter   1 or R8                                 3.9        –
                                                                                                       (TEXTURE COMPONENTS)                                                            tion 3.9.12
                                                                                                                                                                                       Component resolution (x
                                                                                                                                                                                       is RED, GREEN, BLUE,
                                                                                                       TEXTURE x SIZE                    n × 8 × Z+   GetTexLevelParameter     0       ALPHA, LUMINANCE,             3.9        –
                                                                                                                                                                                       INTENSITY, DEPTH,
                                                                                                                                                                                       or STENCIL)
                                                                                                                                                                                       Shared exponent field
                                                                                                       TEXTURE SHARED SIZE                n × Z+      GetTexLevelParameter     0                                     3.9        –
                                                                                                                                                                                       resolution
                                                                                                                                                                                       Component type (x is
                                                                                                                                                                                       RED, GREEN, BLUE,
                                                                                                       TEXTURE x TYPE                      n × Z5     GetTexLevelParameter   NONE      ALPHA, LUMINANCE,            6.1.3       –
                                                                                                                                                                                       INTENSITY,              or
                                                                                                                                                                                       DEPTH)
                                                                                                                                                                                       True if image has a com-
                                                                                                       TEXTURE COMPRESSED                  n×B        GetTexLevelParameter   FALSE                                  3.9.3        -
                                                                                                                                                                                       pressed internal format
                                                                                                                                                                                       Size (in ubytes) of




                                                      Table 6.21. Textures (state per texture image)
                                                                                                       TEXTURE COMPRESSED IMAGE SIZE      n × Z+      GetTexLevelParameter     0                                    3.9.3        -
                                                                                                                                                                                       compressed image




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                       Buffer object bound as
                                                                                                       TEXTURE BUFFER DATA STORE BIND-                                                 the data store for the ac-
                                                                                                                                          n × Z+      GetTexLevelParameter     0                                    3.9.13   texture
                                                                                                       ING                                                                             tive image unit’s buffer
                                                                                                                                                                                       texture
                                                                                                                                                                                                                                         384
                                                                                                                                           Get             Initial
                                                                                                          Get value           Type         Command         Value                    Description              Sec.      Attribute
                                                                                                                                                                                                                                      6.2. STATE TABLES




                                                                                                       COORD REPLACE         2 ∗ ×B       GetTexEnviv     FALSE       Coordinate replacement enable          3.4         point
                                                                                                       ACTIVE TEXTURE         Z32∗        GetIntegerv    TEXTURE0     Active texture unit selector           2.7        texture
                                                                                                       TEXTURE ENV MODE     16 ∗ ×Z6      GetTexEnviv    MODULATE     Texture application function          3.9.14      texture
                                                                                                       TEXTURE ENV COLOR    16 ∗ ×C       GetTexEnvfv      0,0,0,0    Texture environment color             3.9.14      texture
                                                                                                                                                                      Texture level of detail bias
                                                                                                       TEXTURE LOD BIAS      16 ∗ ×R      GetTexEnvfv       0.0                                             3.9.8       texture
                                                                                                                                                                      biastexunit
                                                                                                       TEXTURE GEN x       16 ∗ ×4 × B    IsEnabled       FALSE       Texgen enabled (x is S, T, R, or Q)   2.12.3   texture/enable
                                                                                                                                                                      Texgen plane equation coefficients
                                                                                                       EYE PLANE           16 ∗ ×4 × R4   GetTexGenfv    see 2.12.3                                         2.12.3      texture
                                                                                                                                                                      (for S, T, R, and Q)
                                                                                                                                                                      Texgen object linear coefficients
                                                                                                       OBJECT PLANE        16 ∗ ×4 × R4   GetTexGenfv    see 2.12.3                                         2.12.3      texture
                                                                                                                                                                      (for S, T, R, and Q)
                                                                                                                                                                      Function used for texgen (for S, T,
                                                                                                       TEXTURE GEN MODE    16 ∗ ×4 × Z5   GetTexGeniv   EYE_LINEAR                                          2.12.3      texture
                                                                                                                                                                      R, and Q
                                                                                                       COMBINE RGB          16 ∗ ×Z8      GetTexEnviv    MODULATE     RGB combiner function                 3.9.14      texture
                                                                                                       COMBINE ALPHA        16 ∗ ×Z6      GetTexEnviv    MODULATE     Alpha combiner function               3.9.14      texture




                                                      Table 6.22. Texture Environment and Generation

OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                                      385
                                                                                                                                            Get              Initial
                                                                                                                                                                                                                          6.2. STATE TABLES




                                                                                                                 Get value        Type      Command          Value                Description         Sec.    Attribute
                                                                                                               SRC0 RGB         16 ∗ ×Z3   GetTexEnviv     TEXTURE     RGB source 0                  3.9.14    texture
                                                                                                               SRC1 RGB         16 ∗ ×Z3   GetTexEnviv    PREVIOUS     RGB source 1                  3.9.14    texture
                                                                                                               SRC2 RGB         16 ∗ ×Z3   GetTexEnviv    CONSTANT     RGB source 2                  3.9.14    texture
                                                                                                               SRC0 ALPHA       16 ∗ ×Z3   GetTexEnviv     TEXTURE     Alpha source 0                3.9.14    texture
                                                                                                               SRC1 ALPHA       16 ∗ ×Z3   GetTexEnviv    PREVIOUS     Alpha source 1                3.9.14    texture
                                                                                                               SRC2 ALPHA       16 ∗ ×Z3   GetTexEnviv    CONSTANT     Alpha source 2                3.9.14    texture
                                                                                                               OPERAND0 RGB     16 ∗ ×Z4   GetTexEnviv   SRC_COLOR     RGB operand 0                 3.9.14    texture
                                                                                                               OPERAND1 RGB     16 ∗ ×Z4   GetTexEnviv   SRC_COLOR     RGB operand 1                 3.9.14    texture
                                                                                                               OPERAND2 RGB     16 ∗ ×Z4   GetTexEnviv   SRC_ALPHA     RGB operand 2                 3.9.14    texture
                                                                                                               OPERAND0 ALPHA   16 ∗ ×Z2   GetTexEnviv   SRC_ALPHA     Alpha operand 0               3.9.14    texture
                                                                                                               OPERAND1 ALPHA   16 ∗ ×Z2   GetTexEnviv   SRC_ALPHA     Alpha operand 1               3.9.14    texture
                                                                                                               OPERAND2 ALPHA   16 ∗ ×Z2   GetTexEnviv   SRC_ALPHA     Alpha operand 2               3.9.14    texture
                                                                                                               RGB SCALE        16 ∗ ×R3   GetTexEnvfv        1.0      RGB post-combiner scaling     3.9.14    texture
                                                                                                               ALPHA SCALE      16 ∗ ×R3   GetTexEnvfv        1.0      Alpha post-combiner scaling   3.9.14    texture




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.23. Texture Environment and Generation (cont.)
                                                                                                                                                                                                                          386
                                                                                                                             Get           Initial
                                                                                             Get value              Type     Command       Value                  Description                 Sec.           Attribute
                                                                                     SCISSOR TEST                    B     IsEnabled      FALSE      Scissoring enabled                       4.1.2      scissor/enable
                                                                                     SCISSOR BOX                    4×Z    GetIntegerv   see 4.1.2   Scissor box                              4.1.2           scissor
                                                                                     ALPHA TEST                      B     IsEnabled      FALSE      Alpha test enabled                       4.1.4    color-buffer/enable
                                                                                                                                                                                                                              6.2. STATE TABLES




                                                                                     ALPHA TEST FUNC                 Z8    GetIntegerv   ALWAYS      Alpha test function                      4.1.4        color-buffer
                                                                                     ALPHA TEST REF                  R+    GetIntegerv       0       Alpha test reference value               4.1.4        color-buffer
                                                                                     STENCIL TEST                    B     IsEnabled      FALSE      Stenciling enabled                       4.1.5   stencil-buffer/enable
                                                                                     STENCIL FUNC                    Z8    GetIntegerv   ALWAYS      Front stencil function                   4.1.5       stencil-buffer
                                                                                     STENCIL VALUE MASK              Z+    GetIntegerv   see 4.1.5   Front stencil mask                       4.1.5       stencil-buffer
                                                                                     STENCIL REF                     Z+    GetIntegerv       0       Front stencil reference value            4.1.5       stencil-buffer
                                                                                     STENCIL FAIL                    Z8    GetIntegerv    KEEP       Front stencil fail action                4.1.5       stencil-buffer
                                                                                                                                                     Front stencil depth buffer fail action
                                                                                     STENCIL PASS DEPTH FAIL         Z8    GetIntegerv    KEEP                                                4.1.5      stencil-buffer
                                                                                                                                                     Front stencil depth buffer pass ac-
                                                                                     STENCIL PASS DEPTH PASS         Z8    GetIntegerv    KEEP                                                4.1.5      stencil-buffer
                                                                                                                                                     tion
                                                                                     STENCIL BACK FUNC              Z8     GetIntegerv   ALWAYS      Back stencil function                    4.1.5      stencil-buffer




                                                      Table 6.24. Pixel Operations
                                                                                     STENCIL BACK VALUE MASK        Z+     GetIntegerv   see 4.1.5   Back stencil mask                        4.1.5      stencil-buffer
                                                                                     STENCIL BACK REF               Z+     GetIntegerv      0        Back stencil reference value             4.1.5      stencil-buffer
                                                                                     STENCIL BACK FAIL              Z8     GetIntegerv    KEEP       Back stencil fail action                 4.1.5      stencil-buffer
                                                                                     STENCIL BACK PASS DEPTH FAIL   Z8     GetIntegerv    KEEP       Back stencil depth buffer fail action    4.1.5      stencil-buffer
                                                                                                                                                     Back stencil depth buffer pass action




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                     STENCIL BACK PASS DEPTH PASS    Z8    GetIntegerv    KEEP                                                4.1.5      stencil-buffer
                                                                                                                                                                                                                              387
                                                                                                                                            Get           Initial
                                                                                                          Get value               Type      Command       Value            Description        Sec.          Attribute
                                                                                             DEPTH TEST                            B      IsEnabled      FALSE      Depth buffer enabled      4.1.6    depth-buffer/enable
                                                                                                                                                                    Depth buffer test func-
                                                                                             DEPTH FUNC                           Z8      GetIntegerv     LESS                                4.1.6       depth-buffer
                                                                                                                                                                    tion
                                                                                                                                                                    Blending enabled for
                                                                                                                                                                                                                             6.2. STATE TABLES




                                                                                             BLEND                               1 ∗ ×B   IsEnabledi     FALSE                                4.1.8    color-buffer/enable
                                                                                                                                                                    draw buffer i
                                                                                                                                                                    Blending source RGB
                                                                                             BLEND SRC RGB (v1.3:BLEND SRC)       Z15     GetIntegerv      ONE                                4.1.8       color-buffer
                                                                                                                                                                    function
                                                                                                                                                                    Blending source A func-
                                                                                             BLEND SRC ALPHA                      Z15     GetIntegerv      ONE                                4.1.8       color-buffer
                                                                                                                                                                    tion
                                                                                                                                                                    Blending dest.     RGB
                                                                                             BLEND DST RGB (v1.3:BLEND DST)       Z14     GetIntegerv     ZERO                                4.1.8       color-buffer
                                                                                                                                                                    function
                                                                                                                                                                    Blending dest. A func-
                                                                                             BLEND DST ALPHA                      Z14     GetIntegerv     ZERO                                4.1.8       color-buffer
                                                                                                                                                                    tion
                                                                                             BLEND EQUATION RGB (v1.5: BLEND -
                                                                                                                                  Z5      GetIntegerv   FUNC_ADD    RGB blending equation     4.1.8       color-buffer
                                                                                             EQUATION)

                                                                                             BLEND EQUATION ALPHA                 Z5      GetIntegerv   FUNC_ADD    Alpha blending equation   4.1.8       color-buffer
                                                                                             BLEND COLOR                          C       GetFloatv       0,0,0,0   Constant blend color      4.1.8       color-buffer




                                                      Table 6.25. Pixel Operations (cont.)
                                                                                                                                                                    sRGB update and blend-
                                                                                             FRAMEBUFFER SRGB                      B      IsEnabled      FALSE                                4.1.8    color-buffer/enable
                                                                                                                                                                    ing enable
                                                                                             DITHER                                B      IsEnabled       TRUE      Dithering enabled         4.1.10   color-buffer/enable
                                                                                             INDEX LOGIC OP (v1.0:LOGIC OP)        B      IsEnabled      FALSE      Index logic op enabled    4.1.11   color-buffer/enable




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                             COLOR LOGIC OP                        B      IsEnabled      FALSE      Color logic op enabled    4.1.11   color-buffer/enable
                                                                                             LOGIC OP MODE                        Z16     GetIntegerv     COPY      Logic op function         4.1.11      color-buffer
                                                                                                                                                                                                                             388
                                                                                                                                Get                   Initial
                                                                                              Get value            Type         Command               Value               Description       Sec.      Attribute
                                                                                                                                                                      Color        index
                                                                                        INDEX WRITEMASK             Z+        GetIntegerv              1’s                                  4.2.2   color-buffer
                                                                                                                                                                      writemask
                                                                                                                                                                      Color write en-
                                                                                        COLOR WRITEMASK          1 ∗ ×4 × B   GetBooleani v   (TRUE,TRUE,TRUE,TRUE)   ables (R,G,B,A)       4.2.2   color-buffer
                                                                                                                                                                                                                     6.2. STATE TABLES




                                                                                                                                                                      for draw buffer i
                                                                                                                                                                      Depth buffer en-
                                                                                        DEPTH WRITEMASK              B        GetBooleanv             TRUE                                  4.2.2   depth-buffer
                                                                                                                                                                      abled for writing
                                                                                                                                                                      Front       stencil
                                                                                        STENCIL WRITEMASK           Z+        GetIntegerv              1’s                                  4.2.2   stencil-buffer
                                                                                                                                                                      buffer writemask
                                                                                                                                                                      Back        stencil
                                                                                        STENCIL BACK WRITEMASK      Z+        GetIntegerv              1’s                                  4.2.2   stencil-buffer
                                                                                                                                                                      buffer writemask
                                                                                                                                                                      Color buffer clear
                                                                                        COLOR CLEAR VALUE            C        GetFloatv              0,0,0,0          value      (RGBA      4.2.3   color-buffer
                                                                                                                                                                      mode)
                                                                                                                                                                      Color buffer clear
                                                                                        INDEX CLEAR VALUE           CI        GetFloatv                 0             value (color index    4.2.3   color-buffer
                                                                                                                                                                      mode)




                                                      Table 6.26. Framebuffer Control
                                                                                                                                                                      Depth buffer clear
                                                                                        DEPTH CLEAR VALUE           R+        GetIntegerv               1                                   4.2.3   depth-buffer
                                                                                                                                                                      value
                                                                                                                                                                      Stencil       clear
                                                                                        STENCIL CLEAR VALUE         Z+        GetIntegerv               0                                   4.2.3   stencil-buffer
                                                                                                                                                                      value




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                      Accumulation
                                                                                        ACCUM CLEAR VALUE         4 × R+      GetFloatv                 0                                   4.2.3   accum-buffer
                                                                                                                                                                      buffer clear value
                                                                                                                                                                                                                     389
                                                                                                                                                                                                                               6.2. STATE TABLES




                                                                                                                                                    Get          Initial
                                                                                                                        Get value           Type    Command      Value                Description          Sec.    Attribute
                                                                                                                                                                           Framebuffer object bound   to
                                                                                                                 DRAW FRAMEBUFFER BINDING   Z+     GetIntegerv     0                                       4.4.1      –
                                                                                                                                                                           DRAW_FRAMEBUFFER
                                                                                                                                                                           Framebuffer object bound   to
                                                                                                                 READ FRAMEBUFFER BINDING   Z+     GetIntegerv     0                                       4.4.1      –
                                                                                                                                                                           READ_FRAMEBUFFER




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.27. Framebuffer (state per target binding point)
                                                                                                                                                                                                                               390
                                                                                                                                                                                                                                 6.2. STATE TABLES




                                                                                                                                           Get           Initial
                                                                                                               Get value        Type       Command       Value                 Description                Sec.     Attribute
                                                                                                                                                                    Draw buffer selected for color out-
                                                                                                               DRAW BUFFERi   1 ∗ ×Z11∗   GetIntegerv   see 4.2.1                                         4.2.1   color-buffer
                                                                                                                                                                    put i
                                                                                                               READ BUFFER      Z11∗      GetIntegerv   see 4.3.2   Read source buffer                    4.3.2      pixel




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.28. Framebuffer (state per framebuffer object)
                                                                                                                                                                                                                                 391
                                                                                                                                                                       Get           Initial
                                                                                                                              Get value                     Type       Command       Value            Description          Sec.    Attribute
                                                                                                                                                                   GetFramebuffer-             Type of image attached
                                                                                                             FRAMEBUFFER ATTACHMENT OBJECT TYPE              Z     Attachment-       NONE      to framebuffer attach-      4.4.2      –
                                                                                                                                                                   Parameteriv                 ment point
                                                                                                                                                                   GetFramebuffer-             Name of object at-
                                                                                                             FRAMEBUFFER ATTACHMENT OBJECT NAME              Z     Attachment-         0       tached to framebuffer       4.4.2      –
                                                                                                                                                                   Parameteriv                 attachment point
                                                                                                                                                                                                                                               6.2. STATE TABLES




                                                                                                                                                                   GetFramebuffer-             Mipmap level of texture
                                                                                                             FRAMEBUFFER ATTACHMENT TEXTURE LEVEL            Z     Attachment-         0       image attached, if object   4.4.2      –
                                                                                                                                                                   Parameteriv                 attached is texture
                                                                                                                                                                                               Cubemap face of texture
                                                                                                                                                                   GetFramebuffer-
                                                                                                                                                                                               image attached, if object
                                                                                                             FRAMEBUFFER ATTACHMENT TEXTURE CUBE MAP FACE   Z+     Attachment-       NONE                                  4.4.2      –
                                                                                                                                                                                               attached is cubemap tex-
                                                                                                                                                                   Parameteriv
                                                                                                                                                                                               ture
                                                                                                                                                                   GetFramebuffer-             Layer of texture image
                                                                                                             FRAMEBUFFER ATTACHMENT TEXTURE LAYER            Z     Attachment-         0       attached, if object at-     4.4.2      –
                                                                                                                                                                   Parameteriv                 tached is 3D texture
                                                                                                                                                                   GetFramebuffer-
                                                                                                                                                                                               Encoding of components
                                                                                                             FRAMEBUFFER ATTACHMENT COLOR ENCODING          Z2     Attachment-         -                                   6.1.3      –
                                                                                                                                                                                               in the attached image
                                                                                                                                                                   Parameteriv
                                                                                                                                                                   GetFramebuffer-
                                                                                                                                                                                               Data type of components
                                                                                                             FRAMEBUFFER ATTACHMENT COMPONENT TYPE          Z4     Attachment-         -                                   6.1.3      –
                                                                                                                                                                                               in the attached image
                                                                                                                                                                   Parameteriv
                                                                                                                                                                                               Size in bits of attached




                                                      Table 6.29. Framebuffer (state per attachment point)


OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                   GetFramebuffer-             image’s x component; x
                                                                                                             FRAMEBUFFER ATTACHMENT x SIZE                  Z+     Attachment-         -       is RED, GREEN, BLUE,        6.1.3      –
                                                                                                                                                                   Parameteriv                 ALPHA, DEPTH, or
                                                                                                                                                                                               STENCIL
                                                                                                                                                                                                                                               392
                                                                                                                                                                                                                                 6.2. STATE TABLES




                                                                                                                                                     Get          Initial
                                                                                                                          Get value          Type    Command      Value                Description           Sec.    Attribute
                                                                                                                                                                            Renderbuffer object bound   to
                                                                                                                      RENDERBUFFER BINDING    Z     GetIntegerv     0                                        4.4.2      –
                                                                                                                                                                            RENDERBUFFER




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.30. Renderbuffer (state per target and binding point)
                                                                                                                                                                                                                                 393
                                                                                                                                                               Get                  Initial
                                                                                                                          Get value             Type           Command              Value                  Description               Sec.    Attribute
                                                                                                                                                                                                                                                         6.2. STATE TABLES




                                                                                                                 RENDERBUFFER WIDTH             Z+     GetRenderbufferParameteriv     0       Width of renderbuffer                  4.4.2       –
                                                                                                                 RENDERBUFFER HEIGHT            Z+     GetRenderbufferParameteriv     0       Height of renderbuffer                 4.4.2       –
                                                                                                                 RENDERBUFFER INTERNAL FORMAT   Z+     GetRenderbufferParameteriv   RGBA      Internal format of renderbuffer        4.4.2       –
                                                                                                                                                                                              Size in bits of renderbuffer image’s
                                                                                                                 RENDERBUFFER RED SIZE          Z+     GetRenderbufferParameteriv     0                                              4.4.2      –
                                                                                                                                                                                              red component
                                                                                                                                                                                              Size in bits of renderbuffer image’s
                                                                                                                 RENDERBUFFER GREEN SIZE        Z+     GetRenderbufferParameteriv     0                                              4.4.2      –
                                                                                                                                                                                              green component
                                                                                                                                                                                              Size in bits of renderbuffer image’s
                                                                                                                 RENDERBUFFER BLUE SIZE         Z+     GetRenderbufferParameteriv     0                                              4.4.2      –
                                                                                                                                                                                              blue component
                                                                                                                                                                                              Size in bits of renderbuffer image’s
                                                                                                                 RENDERBUFFER ALPHA SIZE        Z+     GetRenderbufferParameteriv     0                                              4.4.2      –
                                                                                                                                                                                              alpha component
                                                                                                                                                                                              Size in bits of renderbuffer image’s
                                                                                                                 RENDERBUFFER DEPTH SIZE        Z+     GetRenderbufferParameteriv     0                                              4.4.2      –
                                                                                                                                                                                              depth component
                                                                                                                                                                                              Size in bits of renderbuffer image’s
                                                                                                                 RENDERBUFFER STENCIL SIZE      Z+     GetRenderbufferParameteriv     0                                              4.4.2      –
                                                                                                                                                                                              stencil component
                                                                                                                 RENDERBUFFER SAMPLES           Z+     GetRenderbufferParameteriv     0       Number of samples                      4.4.2      –




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.31. Renderbuffer (state per renderbuffer object)
                                                                                                                                                                                                                                                         394
                                                                                                                 Get           Initial
                                                                                   Get value             Type    Command       Value                 Description       Sec.      Attribute
                                                                           UNPACK SWAP BYTES              B     GetBooleanv   FALSE      Value of UNPACK_SWAP_BYTES    3.7.1    pixel-store
                                                                           UNPACK LSB FIRST               B     GetBooleanv   FALSE      Value of UNPACK_LSB_FIRST     3.7.1    pixel-store
                                                                                                                                                                                              6.2. STATE TABLES




                                                                                                                                         Value of UNPACK_IMAGE_-
                                                                           UNPACK IMAGE HEIGHT           Z+     GetIntegerv      0                                     3.7.1    pixel-store
                                                                                                                                         HEIGHT
                                                                                                           +
                                                                           UNPACK SKIP IMAGES            Z      GetIntegerv     0        Value of UNPACK_SKIP_IMAGES    3.7.1   pixel-store
                                                                           UNPACK ROW LENGTH             Z+     GetIntegerv     0        Value of UNPACK_ROW_LENGTH     3.7.1   pixel-store
                                                                           UNPACK SKIP ROWS              Z+     GetIntegerv     0        Value of UNPACK_SKIP_ROWS      3.7.1   pixel-store
                                                                           UNPACK SKIP PIXELS            Z+     GetIntegerv     0        Value of UNPACK_SKIP_PIXELS    3.7.1   pixel-store
                                                                           UNPACK ALIGNMENT              Z+     GetIntegerv     4        Value of UNPACK_ALIGNMENT      3.7.1   pixel-store
                                                                           PACK SWAP BYTES               B      GetBooleanv   FALSE      Value of PACK_SWAP_BYTES       4.3.2   pixel-store
                                                                           PACK LSB FIRST                B      GetBooleanv   FALSE      Value of PACK_LSB_FIRST        4.3.2   pixel-store
                                                                           PACK IMAGE HEIGHT             Z+     GetIntegerv     0        Value of PACK_IMAGE_HEIGHT     4.3.2   pixel-store




                                                      Table 6.32. Pixels
                                                                           PACK SKIP IMAGES              Z+     GetIntegerv     0        Value of PACK_SKIP_IMAGES      4.3.2   pixel-store
                                                                           PACK ROW LENGTH               Z+     GetIntegerv     0        Value of PACK_ROW_LENGTH       4.3.2   pixel-store
                                                                           PACK SKIP ROWS                Z+     GetIntegerv     0        Value of PACK_SKIP_ROWS        4.3.2   pixel-store
                                                                           PACK SKIP PIXELS              Z+     GetIntegerv     0        Value of PACK_SKIP_PIXELS      4.3.2   pixel-store
                                                                           PACK ALIGNMENT                Z+     GetIntegerv     4        Value of PACK_ALIGNMENT        4.3.2   pixel-store
                                                                           PIXEL PACK BUFFER BINDING     Z+     GetIntegerv     0        Pixel pack buffer binding      4.3.2   pixel-store
                                                                           PIXEL UNPACK BUFFER BINDING   Z+     GetIntegerv     0        Pixel unpack buffer binding   6.1.13   pixel-store




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                              395
                                                                                                                                                                                          6.2. STATE TABLES




                                                                                                          Get           Initial
                                                                                   Get value      Type    Command       Value                  Description            Sec.    Attribute
                                                                                   MAP COLOR       B     GetBooleanv   FALSE      True if colors are mapped           3.7.3    pixel
                                                                                   MAP STENCIL     B     GetBooleanv   FALSE      True if stencil values are mapped   3.7.3    pixel
                                                                                   INDEX SHIFT     Z     GetIntegerv      0       Value of INDEX_SHIFT                3.7.3    pixel
                                                                                   INDEX OFFSET    Z     GetIntegerv      0       Value of INDEX_OFFSET               3.7.3    pixel
                                                                                                                                  Value of x_SCALE; x is RED,
                                                                                   x SCALE         R     GetFloatv        1                                           3.7.3    pixel
                                                                                                                                  GREEN, BLUE, ALPHA, or DEPTH
                                                                                   x BIAS          R     GetFloatv        0       Value of x_BIAS                     3.7.3    pixel




                                                      Table 6.33. Pixels (cont.)




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                          396
                                                                                                                                        Get          Initial
                                                                                            Get value                  Type             Command      Value            Description           Sec.     Attribute
                                                                                                                                                               True if color table lookup
                                                                                   COLOR TABLE                           B          IsEnabled        FALSE                                  3.7.3   pixel/enable
                                                                                                                                                               is done
                                                                                                                                                               True if post convolu-
                                                                                   POST CONVOLUTION COLOR TABLE          B          IsEnabled        FALSE     tion color table lookup is   3.7.3   pixel/enable
                                                                                                                                                               done
                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                                                                               True if post color ma-
                                                                                   POST COLOR MATRIX COLOR TABLE         B          IsEnabled        FALSE     trix color table lookup is   3.7.3   pixel/enable
                                                                                                                                                               done
                                                                                   COLOR TABLE                           I          GetColorTable    empty     Color table                  3.7.3        –
                                                                                                                                                               Post convolution color
                                                                                   POST CONVOLUTION COLOR TABLE          I          GetColorTable    empty                                  3.7.3        –
                                                                                                                                                               table
                                                                                                                                                               Post color matrix color
                                                                                   POST COLOR MATRIX COLOR TABLE         I          GetColorTable    empty                                  3.7.3        –
                                                                                                                                                               table
                                                                                                                                    GetColorTable-             Color tables’ internal im-
                                                                                   COLOR TABLE FORMAT               2 × 3 × Z42                      RGBA                                   3.7.3        –
                                                                                                                                    Parameteriv                age format
                                                                                                                                    GetColorTable-             Color tables’ specified
                                                                                   COLOR TABLE WIDTH                2 × 3 × Z+                         0                                    3.7.3        –
                                                                                                                                    Parameteriv                width




                                                      Table 6.34. Pixels (cont.)
                                                                                                                                                               Color table compo-
                                                                                                                                                               nent resolution; x is
                                                                                                                                    GetColorTable-
                                                                                   COLOR TABLE x SIZE              6 × 2 × 3 × Z+                      0       RED, GREEN, BLUE,            3.7.3        –
                                                                                                                                    Parameteriv
                                                                                                                                                               ALPHA, LUMINANCE,
                                                                                                                                                               or INTENSITY




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                    GetColorTable-             Scale factors applied to
                                                                                   COLOR TABLE SCALE                  3 × R4                         1,1,1,1                                3.7.3      pixel
                                                                                                                                    Parameterfv                color table entries
                                                                                                                                    GetColorTable-             Bias factors applied to
                                                                                   COLOR TABLE BIAS                   3 × R4                         0,0,0,0                                3.7.3      pixel
                                                                                                                                    Parameterfv                color table entries
                                                                                                                                                                                                                   397
                                                                                                                            Get               Initial
                                                                                          Get value            Type         Command           Value            Description            Sec.     Attribute
                                                                                                                                                        True if 1D convolution is
                                                                                   CONVOLUTION 1D               B       IsEnabled            FALSE                                    3.7.3   pixel/enable
                                                                                                                                                        done
                                                                                                                                                        True if 2D convolution is
                                                                                   CONVOLUTION 2D               B       IsEnabled            FALSE                                    3.7.3   pixel/enable
                                                                                                                                                        done
                                                                                                                                                                                                             6.2. STATE TABLES




                                                                                                                                                        True if separable 2D con-
                                                                                   SEPARABLE 2D                 B       IsEnabled            FALSE                                    3.7.3   pixel/enable
                                                                                                                                                        volution is done
                                                                                                                        GetConvolution-                 Convolution filters; x is 1
                                                                                   CONVOLUTION xD              2×I                            empty                                   3.7.3        –
                                                                                                                        Filter                          or 2
                                                                                                                        GetSeparable- Fil-              Separable convolution
                                                                                   SEPARABLE 2D                2×I                            empty                                   3.7.3        –
                                                                                                                        ter                             filter
                                                                                                                        GetConvolution-
                                                                                   CONVOLUTION BORDER COLOR   3×C                            0,0,0,0    Convolution border color      3.7.6      pixel
                                                                                                                        Parameterfv
                                                                                                                        GetConvolution-                 Convolution         border
                                                                                   CONVOLUTION BORDER MODE    3 × Z4                         REDUCE                                   3.7.6      pixel
                                                                                                                        Parameteriv                     mode
                                                                                                                        GetConvolution-                 Scale factors applied to
                                                                                   CONVOLUTION FILTER SCALE   3 × R4                         1,1,1,1                                  3.7.3      pixel
                                                                                                                        Parameterfv                     convolution filter entries




                                                      Table 6.35. Pixels (cont.)
                                                                                                                        GetConvolution-                 Bias factors applied to
                                                                                   CONVOLUTION FILTER BIAS    3 × R4                         0,0,0,0                                  3.7.3      pixel
                                                                                                                        Parameterfv                     convolution filter entries
                                                                                                                        GetConvolution-                 Convolution filter inter-
                                                                                   CONVOLUTION FORMAT         3 × Z42                         RGBA                                    3.7.6        –
                                                                                                                        Parameteriv                     nal format
                                                                                                                        GetConvolution-
                                                                                   CONVOLUTION WIDTH          3 × Z+                            0       Convolution filter width      3.7.6        –




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                        Parameteriv
                                                                                                                        GetConvolution-
                                                                                   CONVOLUTION HEIGHT         2 × Z+                            0       Convolution filter height     3.7.6        –
                                                                                                                        Parameteriv
                                                                                                                                                                                                             398
                                                                                                                                Get         Initial
                                                                                          Get value               Type          Command     Value            Description           Sec.     Attribute
                                                                                                                                                      Component scale factors
                                                                                                                                                      after convolution; x is
                                                                                   POST CONVOLUTION x SCALE        R        GetFloatv         1                                    3.7.3      pixel
                                                                                                                                                      RED, GREEN, BLUE, or
                                                                                                                                                      ALPHA
                                                                                                                                                                                                          6.2. STATE TABLES




                                                                                                                                                      Component bias factors
                                                                                   POST CONVOLUTION x BIAS         R        GetFloatv         0                                    3.7.3      pixel
                                                                                                                                                      after convolution
                                                                                                                                                      Component scale factors
                                                                                   POST COLOR MATRIX x SCALE       R        GetFloatv         1                                    3.7.3      pixel
                                                                                                                                                      after color matrix
                                                                                                                                                      Component bias factors
                                                                                   POST COLOR MATRIX x BIAS        R        GetFloatv         0                                    3.7.3      pixel
                                                                                                                                                      after color matrix
                                                                                                                                                      True if histogramming is
                                                                                   HISTOGRAM                       B        IsEnabled       FALSE                                  3.7.3   pixel/enable
                                                                                                                                                      enabled
                                                                                   HISTOGRAM                       I        GetHistogram    empty     Histogram table              3.7.3        –
                                                                                                                            GetHistogram-
                                                                                   HISTOGRAM WIDTH              2 × Z+                        0       Histogram table width        3.7.3        –
                                                                                                                            Parameteriv




                                                      Table 6.36. Pixels (cont.)
                                                                                                                            GetHistogram-             Histogram table internal
                                                                                   HISTOGRAM FORMAT             2 × Z42                     RGBA                                   3.7.3        –
                                                                                                                            Parameteriv               format
                                                                                                                                                      Histogram table compo-
                                                                                                                            GetHistogram-             nent resolution; x is RED,
                                                                                   HISTOGRAM x SIZE            5 × 2 × Z+                     0                                    3.7.3        –
                                                                                                                            Parameteriv               GREEN, BLUE, ALPHA,
                                                                                                                                                      or LUMINANCE




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                            GetHistogram-             True if histogramming
                                                                                   HISTOGRAM SINK                  B                        FALSE                                  3.7.3        –
                                                                                                                            Parameteriv               consumes pixel groups
                                                                                                                                                                                                          399
                                                                                                                     Get              Initial
                                                                                       Get value      Type           Command          Value                 Description          Sec.     Attribute
                                                                                                                                                                                                        6.2. STATE TABLES




                                                                                                                                                     True if minmax is en-
                                                                                   MINMAX              B         IsEnabled           FALSE                                       3.7.3   pixel/enable
                                                                                                                                                     abled
                                                                                   MINMAX              Rn        GetMinmax     (M,M,M,M),(m,m,m,m)   Minmax table                3.7.3        –
                                                                                                                 GetMinmax-                          Minmax table internal
                                                                                   MINMAX FORMAT      Z42                             RGBA                                       3.7.3        –
                                                                                                                 Parameteriv                         format
                                                                                                                 GetMinmax-                          True if minmax con-
                                                                                   MINMAX SINK         B                             FALSE                                       3.7.3        –
                                                                                                                 Parameteriv                         sumes pixel groups
                                                                                   ZOOM X              R         GetFloatv             1.0           x zoom factor               3.7.5      pixel
                                                                                   ZOOM Y              R         GetFloatv             1.0           y zoom factor               3.7.5      pixel
                                                                                                                                                     RGBA PixelMap trans-
                                                                                   x               8 × 32 ∗ ×R   GetPixelMap           0’s           lation tables; x is a map   3.7.3        –
                                                                                                                                                     name from table 3.3




                                                      Table 6.37. Pixels (cont.)
                                                                                                                                                     Index PixelMap transla-
                                                                                   x               2 × 32 ∗ ×Z   GetPixelMap           0’s           tion tables; x is a map     3.7.3        –
                                                                                                                                                     name from table 3.3
                                                                                   x SIZE              Z+        GetIntegerv            1            Size of table x             3.7.3        –




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                        400
                                                                                                                                                 Get          Initial
                                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                            Get value                Type        Command      Value                  Description              Sec.    Attribute
                                                                                                         ORDER                     9 × Z8∗       GetMapiv       1       1d map order                          5.1         –
                                                                                                         ORDER                   9 × 2 × Z8∗     GetMapiv      1,1      2d map orders                         5.1         –
                                                                                                         COEFF                  9 × 8 ∗ ×Rn      GetMapfv    see 5.1    1d control points                     5.1         –
                                                                                                         COEFF                9 × 8 ∗ ×8 ∗ ×Rn   GetMapfv    see 5.1    2d control points                     5.1         –
                                                                                                         DOMAIN                   9×2×R          GetMapfv    see 5.1    1d domain endpoints                   5.1         –
                                                                                                         DOMAIN                   9×4×R          GetMapfv    see 5.1    2d domain endpoints                   5.1         –
                                                                                                         MAP1 x                     9×B          IsEnabled   FALSE      1d map enables: x is map type         5.1    eval/enable
                                                                                                         MAP2 x                     9×B          IsEnabled   FALSE      2d map enables: x is map type         5.1    eval/enable
                                                                                                         MAP1 GRID DOMAIN           2×R          GetFloatv     0,1      1d grid endpoints                     5.1       eval
                                                                                                         MAP2 GRID DOMAIN           4×R          GetFloatv   0,1;0,1    2d grid endpoints                     5.1       eval
                                                                                                         MAP1 GRID SEGMENTS          Z+          GetFloatv      1       1d grid divisions                     5.1       eval
                                                                                                         MAP2 GRID SEGMENTS        2 × Z+        GetFloatv     1,1      2d grid divisions                     5.1       eval
                                                                                                                                                                        True if automatic normal generation
                                                                                                         AUTO NORMAL                 B           IsEnabled   FALSE                                            5.1    eval/enable
                                                                                                                                                                        enabled




                                                      Table 6.38. Evaluators (GetMap takes a map name)




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                                   401
                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                                          Get               Initial
                                                                                             Get value         Type       Command           Value                    Description               Sec.    Attribute
                                                                                        SHADER TYPE             Z2    GetShaderiv             -         Type of shader (vertex or fragment)   2.14.1       –
                                                                                        DELETE STATUS           B     GetShaderiv          FALSE        Shader flagged for deletion           2.14.1       –
                                                                                        COMPILE STATUS          B     GetShaderiv          FALSE        Last compile succeeded                2.14.1       –
                                                                                        -                       S     GetShaderInfoLog   empty string   Info log for shader objects           6.1.15       –
                                                                                        INFO LOG LENGTH        Z+     GetShaderiv             0         Length of info log                    6.1.15       –
                                                                                        -                       S     GetShaderSource    empty string   Source code for a shader              2.14.1       –
                                                                                        SHADER SOURCE LENGTH   Z+     GetShaderiv             0         Length of source code                 6.1.15       –




                                                      Table 6.39. Shader Object State



OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                   402
                                                                                                                                      Get             Initial
                                                                                                       Get value       Type           Command         Value            Description            Sec.    Attribute
                                                                                                                                                                Name of current program
                                                                                         CURRENT PROGRAM                Z+       GetIntegerv            0                                    2.14.2      –
                                                                                                                                                                object
                                                                                         DELETE STATUS                  B        GetProgramiv         FALSE     Program object deleted       2.14.2      –
                                                                                                                                                                Last link attempt suc-
                                                                                         LINK STATUS                    B        GetProgramiv         FALSE                                  2.14.2      –
                                                                                                                                                                ceeded
                                                                                                                                                                                                                  6.2. STATE TABLES




                                                                                                                                                                Last validate attempt suc-
                                                                                         VALIDATE STATUS                B        GetProgramiv         FALSE                                  2.14.2      –
                                                                                                                                                                ceeded
                                                                                                                                                                Number of attached
                                                                                         ATTACHED SHADERS               Z+       GetProgramiv           0                                    6.1.15      –
                                                                                                                                                                shader objects
                                                                                         -                           0 ∗ ×Z +    GetAttachedShaders   empty     Shader objects attached      6.1.15      –
                                                                                                                                                                Info log for program ob-
                                                                                         -                              S        GetProgramInfoLog    empty                                  6.1.15      –
                                                                                                                                                                ject
                                                                                         INFO LOG LENGTH                Z+       GetProgramiv           0       Length of info log           2.14.4      –
                                                                                                                            +                                   Number of active uni-
                                                                                         ACTIVE UNIFORMS                Z        GetProgramiv           0                                    2.14.4      –
                                                                                                                                                                forms
                                                                                                                                                                Location of active uni-
                                                                                         -                            0 ∗ ×Z     GetUniformLocation     –                                    6.1.15      –
                                                                                                                                                                forms
                                                                                         -                            0 ∗ ×Z +   GetActiveUniform       –       Size of active uniform       2.14.4      –




                                                      Table 6.40. Program Object State
                                                                                         -                            0 ∗ ×Z +   GetActiveUniform       –       Type of active uniform       2.14.4      –
                                                                                         -                           0 ∗ ×char   GetActiveUniform     empty     Name of active uniform       2.14.4      –
                                                                                                                                                                Maximum active uniform
                                                                                         ACTIVE UNIFORM MAX LENGTH      Z+       GetProgramiv           0                                    6.1.15      –
                                                                                                                                                                name length




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                     512 ∗ ×R    GetUniform             0       Uniform value                2.14.4      –
                                                                                                                                                                Number of active at-
                                                                                         ACTIVE ATTRIBUTES              Z+       GetProgramiv           0                                    2.14.3      –
                                                                                                                                                                tributes
                                                                                                                                                                                                                  403
                                                                                                   Get                      Initial
                                                              Get value               Type         Command                  Value              Description          Sec.    Attribute
                                                                                                GetAttribLocation                     Location of active generic
                                                      -                              0 ∗ ×Z                         –                                              2.14.3      –




OpenGL
                                                                                                                                      attribute
                                                                                                                                                                                        6.2. STATE TABLES




    Table
                                                      -                              0 ∗ ×Z +   GetActiveAttrib     –                 Size of active attribute     2.14.3      –
                                                      -                              0 ∗ ×Z +   GetActiveAttrib     –                 Type of active attribute     2.14.3      –
                                                      -                             0 ∗ ×char   GetActiveAttrib     empty             Name of active attribute     2.14.3      –




       3.1 6.41.
                                                                                                                                      Maximum active attribute




           with GL
                                                      ACTIVE ATTRIBUTE MAX LENGTH      Z+       GetProgramiv        0                                              6.1.15      –
                                                                                                                                      name length
                                                      TRANSFORM FEEDBACK BUFFER -                                   INTERLEAVED_-     Transform feedback mode
                                                                                       Z2       GetProgramiv                                                       6.1.15      –




                 Program
                                                      MODE                                                          ATTRIBS           for the program
                                                      TRANSFORM FEEDBACK VARY-                                                        Number of varyings to
                                                                                       Z+       GetProgramiv        0                                              6.1.15      –
                                                      INGS                                                                            stream to buffer object(s)
                                                      TRANSFORM FEEDBACK VARY-                                                        Maximum transform feed-
                                                                                       Z+       GetProgramiv        0                                              6.1.15      –
                                                      ING MAX LENGTH                                                                  back varying name length




                   ARB compatibility
                                                                                                GetTransform-                         Size of each transform
                                                      -                                Z+                           -                                              2.14.6      –
                                                                                                FeedbackVarying                       feedback varying variable
                                                                                                GetTransform-                         Type of each transform
                                                      -                                Z+                           -                                              2.14.6      –




                         Object State- (cont.)
                                                                                                FeedbackVarying                       feedback varying variable
                                                                                                GetTransform-                         Name of each transform
                                                      -                             0+ × char                       -                                              2.14.6      –
                                                                                                FeedbackVarying                       feedback varying variable




                                       May 28, 2009
                                                                                                                                                                                        404
                                                                                                                                              Get                  Initial
                                                                                                          Get value            Type           Command              Value            Description          Sec.    Attribute
                                                                                                                                                                             Uniform buffer object
                                                                                                                                                                             bound to the context for
                                                                                                 UNIFORM BUFFER BINDING         Z+       GetIntegerv           0                                        2.14.4      –
                                                                                                                                                                             buffer object manipula-
                                                                                                                                                                                                                             6.2. STATE TABLES




                                                                                                                                                                             tion
                                                                                                                                                                             Uniform buffer object
                                                                                                 UNIFORM BUFFER BINDING       n × Z+     GetIntegeri v         0             bound to the specified     2.14.4      –
                                                                                                                                                                             context binding point
                                                                                                                                                                             Number of active uni-
                                                                                                 ACTIVE UNIFORM BLOCKS          Z+       GetProgramiv          0             form blocks in a program   2.14.4      –

                                                                                                 ACTIVE UNIFORM BLOCK MAX -                                                  Length of longest active
                                                                                                                                Z+       GetProgramiv          0                                        2.14.4      –
                                                                                                 NAME LENGTH                                                                 uniform block name
                                                                                                                                         GetActiveUniformsiv
                                                                                                 UNIFORM TYPE                 0 ∗ ×Z27                         -             Type of active uniform     2.14.4      –
                                                                                                                                         GetActiveUniformsiv
                                                                                                 UNIFORM SIZE                 0 ∗ ×Z +                         -             Size of active uniform     2.14.4      –
                                                                                                                                         GetActiveUniformsiv
                                                                                                 UNIFORM NAME LENGTH          0 ∗ ×Z +                         -             Uniform name length        2.14.4      –




                                                      Table 6.42. Program Object State (cont.)
                                                                                                                                         GetActiveUniformsiv
                                                                                                 UNIFORM BLOCK INDEX          0 ∗ ×Z                           -             Uniform block index        2.14.4      –




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                         GetActiveUniformsiv
                                                                                                 UNIFORM OFFSET               0 ∗ ×Z                           -             Uniform buffer offset      2.14.4      –
                                                                                                                                                                                                                             405
                                                                                                                                             Get                   Initial
                                                                                                          Get value            Type          Command               Value             Description          Sec.    Attribute
                                                                                                                                         GetActiveUniformsiv                 Uniform buffer array
                                                                                                 UNIFORM ARRAY STRIDE         0 ∗ ×Z                           -                                         2.14.4      –
                                                                                                                                                                             stride
                                                                                                                                         GetActiveUniformsiv                 Uniform buffer intra-
                                                                                                 UNIFORM MATRIX STRIDE        0 ∗ ×Z                           -                                         2.14.4      –
                                                                                                                                                                             matrix stride
                                                                                                                                         GetActiveUniformsiv                 Whether uniform is a
                                                                                                                                                                                                                              6.2. STATE TABLES




                                                                                                 UNIFORM IS ROW MAJOR         0 ∗ ×Z +                         -                                         2.14.4      –
                                                                                                                                                                             row-major matrix
                                                                                                                                                                             Uniform buffer binding
                                                                                                                                         GetActive-
                                                                                                                                                                             points associated with
                                                                                                 UNIFORM BLOCK BINDING          Z+       UniformBlockiv        0                                         2.14.4      –
                                                                                                                                                                             the specified uniform
                                                                                                                                                                             block
                                                                                                                                         GetActive-                          Size of the storage
                                                                                                 UNIFORM BLOCK DATA SIZE        Z+       UniformBlockiv        -             needed to hold this         2.14.4      –
                                                                                                                                                                             uniform block’s data
                                                                                                                                         GetActive-                          Count of active uniforms
                                                                                                 UNIFORM BLOCK ACTIVE UNI-
                                                                                                                                Z+       UniformBlockiv        -             in the specified uniform    2.14.4      –
                                                                                                 FORMS
                                                                                                                                                                             block
                                                                                                                                         GetActive-                          Array of active uniform
                                                                                                 UNIFORM BLOCK ACTIVE UNI-
                                                                                                                              n × Z+     UniformBlockiv        -             indices of the specified    2.14.4      –
                                                                                                 FORM INDICES
                                                                                                                                                                             uniform block




                                                      Table 6.43. Program Object State (cont.)
                                                                                                                                         GetActive-                          True if uniform block
                                                                                                 UNIFORM BLOCK REFERENCED -
                                                                                                                                 B       UniformBlockiv        0             is actively referenced by   2.14.4      –
                                                                                                 BY VERTEX SHADER
                                                                                                                                                                             the vertex stage




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                         GetActive-                          True if uniform block
                                                                                                 UNIFORM BLOCK REFERENCED -
                                                                                                                                 B       UniformBlockiv        0             is actively referenced by   2.14.4      –
                                                                                                 BY FRAGMENT SHADER
                                                                                                                                                                             the fragment stage
                                                                                                                                                                                                                              406
                                                                                                                                                                                                                                  6.2. STATE TABLES




                                                                                                                                   Get                 Initial
                                                                                               Get value              Type         Command             Value                     Description                  Sec.    Attribute
                                                                                        VERTEX PROGRAM TWO SIDE        B       IsEnabled              FALSE          Two-sided color mode                    2.13.1    enable
                                                                                                                                                                     Current generic vertex attribute val-
                                                                                        CURRENT VERTEX ATTRIB       16 ∗ ×R4   GetVertexAttribfv   0.0,0.0,0.0,1.0                                            2.7     current
                                                                                                                                                                     ues
                                                                                        VERTEX PROGRAM POINT SIZE      B       IsEnabled              FALSE          Point size mode                          3.4      enable




                                                      Table 6.44. Vertex Shader State
OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                                  407
                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                                           Get              Initial
                                                                                            Get value           Type       Command          Value                  Description                 Sec.    Attribute
                                                                                       QUERY RESULT             Z+     GetQueryObjectuiv      0       Query object result                     6.1.12       –
                                                                                       QUERY RESULT AVAILABLE    B     GetQueryObjectiv    FALSE      Is the query object result available?   6.1.12       –




                                                      Table 6.45. Query Object State




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                                   408
                                                                                                                                                        Get           Initial
                                                                                                               Get value                      Type      Command       Value              Description            Sec.    Attribute
                                                                                                                                                                                Buffer object bound to
                                                                                             TRANSFORM FEEDBACK BUFFER BINDING                Z+      GetIntegerv       0       generic bind point for         6.1.13      –
                                                                                                                                                                                transform feedback
                                                                                                                                                                                Buffer object bound to
                                                                                                                                                                                                                                    6.2. STATE TABLES




                                                                                             TRANSFORM FEEDBACK BUFFER BINDING               nxZ +    GetIntegeri v     0       each transform feedback        6.1.13      –
                                                                                                                                                                                attribute stream
                                                                                                                                                                                Start offset of binding
                                                                                             TRANSFORM FEEDBACK BUFFER START                 nxZ +    GetIntegeri v     0       range for each transform       6.1.13      –
                                                                                                                                                                                feedback attrib. stream
                                                                                                                                                                                Size of binding range for
                                                                                             TRANSFORM FEEDBACK BUFFER SIZE                  n × Z+   GetIntegeri v     0       each transform feedback        6.1.13      –
                                                                                                                                                                                attrib. stream
                                                                                                                                                                                Max number of compo-
                                                                                                                                                                                nents to write to a single
                                                                                             MAX TRANSFORM FEEDBACK INTERLEAVED COMPONENTS    Z+      GetIntegerv      64                                      2.18        –
                                                                                                                                                                                buffer in interleaved mode

                                                                                                                                                                                Max number of separate at-
                                                                                                                                                                                tributes or vayings that can




                                                      Table 6.46. Transform Feedback State
                                                                                             MAX TRANSFORM FEEDBACK SEPARATE ATTRIBS          Z+      GetIntegerv       4                                      2.18        –
                                                                                                                                                                                be captured in transform
                                                                                                                                                                                feedback
                                                                                                                                                                                Max number of compo-




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                             MAX TRANSFORM FEEDBACK SEPARATE COMPONENTS       Z+      GetIntegerv       4       nents per attribute or vary-   2.18        –
                                                                                                                                                                                ing in separate mode
                                                                                                                                                                                                                                    409
                                                                                                                                                                                                    6.2. STATE TABLES




                                                                                                                    Get             Initial
                                                                                     Get value              Type    Command         Value                 Description            Sec.   Attribute
                                                                          PERSPECTIVE CORRECTION HINT        Z3    GetIntegerv   DONT_CARE    Perspective correction hint        5.6      hint
                                                                          POINT SMOOTH HINT                  Z3    GetIntegerv   DONT_CARE    Point smooth hint                  5.6      hint
                                                                          LINE SMOOTH HINT                   Z3    GetIntegerv   DONT_CARE    Line smooth hint                   5.6      hint
                                                                          POLYGON SMOOTH HINT                Z3    GetIntegerv   DONT_CARE    Polygon smooth hint                5.6      hint
                                                                          FOG HINT                           Z3    GetIntegerv   DONT_CARE    Fog hint                           5.6      hint
                                                                          GENERATE MIPMAP HINT               Z3    GetIntegerv   DONT_CARE    Mipmap generation hint             5.6      hint
                                                                          TEXTURE COMPRESSION HINT                 GetIntegerv   DONT_CARE    Texture compression quality hint   5.6      hint




                                                      Table 6.47. Hints
                                                                                                             Z3
                                                                                                                                              Fragment shader derivative accu-
                                                                          FRAGMENT SHADER DERIVATIVE HINT   Z3     GetIntegerv   DONT_CARE                                       5.6      hint
                                                                                                                                              racy hint




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                                                    410
                                                                                                                                           Get          Minimum
                                                                                                             Get value             Type    Command      Value                 Description                 Sec.    Attribute
                                                                                                    MAX LIGHTS                     Z+     GetIntegerv       8     Maximum number of lights               2.13.1       –
                                                                                                                                                                  Maximum number of user clipping
                                                                                                    MAX CLIP DISTANCES             Z+     GetIntegerv      8                                             2.20        –
                                                                                                                                                                  planes
                                                                                                    MAX COLOR MATRIX STACK DEPTH   Z+     GetIntegerv      2      Maximum color matrix stack depth       3.7.3       –
                                                                                                                                                                                                                              6.2. STATE TABLES




                                                                                                    MAX MODELVIEW STACK DEPTH      Z+     GetIntegerv     32      Maximum model-view stack depth         2.12.1      –
                                                                                                                                                                  Maximum projection matrix stack
                                                                                                    MAX PROJECTION STACK DEPTH     Z+     GetIntegerv      2                                             2.12.1      –
                                                                                                                                                                  depth
                                                                                                                                                                  Maximum number depth of texture
                                                                                                    MAX TEXTURE STACK DEPTH        Z+     GetIntegerv      2                                             2.12.1      –
                                                                                                                                                                  matrix stack
                                                                                                                                                                  Number of bits of subpixel precision
                                                                                                    SUBPIXEL BITS                  Z+     GetIntegerv      4                                               3         –
                                                                                                                                                                  in screen xw and yw
                                                                                                                                                                  Maximum 3D texture image dimen-
                                                                                                    MAX 3D TEXTURE SIZE            Z+     GetIntegerv     256                                            3.9.1       –
                                                                                                                                                                  sion
                                                                                                                                                                  Maximum 2D/1D texture image di-
                                                                                                    MAX TEXTURE SIZE               Z+     GetIntegerv    1024                                            3.9.1       –
                                                                                                                                                                  mension
                                                                                                                                                                  Maximum number of layers for tex-
                                                                                                    MAX ARRAY TEXTURE LAYERS       Z+     GetIntegerv     256                                            3.9.1       –
                                                                                                                                                                  ture arrays
                                                                                                                                                                  Maximum absolute texture level of
                                                                                                    MAX TEXTURE LOD BIAS           R+     GetFloatv       2.0                                            3.9.8       –
                                                                                                                                                                  detail bias




                                                      Table 6.48. Implementation Dependent Values
                                                                                                                                                                  Maximum cube map texture image
                                                                                                    MAX CUBE MAP TEXTURE SIZE      Z+     GetIntegerv    1024                                            3.9.1       –
                                                                                                                                                                  dimension




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                                  Maximum width and height of ren-
                                                                                                    MAX RENDERBUFFER SIZE          Z+     GetIntegerv    1024                                            4.4.2       –
                                                                                                                                                                  derbuffers
                                                                                                                                                                                                                              411
                                                                                                                                                         Get       Minimum
                                                                                                                       Get value             Type        Command   Value                 Description            Sec.    Attribute
                                                                                                                                                                                Maximum size of a Pix-
                                                                                                            MAX PIXEL MAP TABLE              Z+      GetIntegerv      32                                       3.7.3       –
                                                                                                                                                                                elMap translation table
                                                                                                                                                                                Maximum selection name
                                                                                                            MAX NAME STACK DEPTH             Z+      GetIntegerv      64                                        5.2        –
                                                                                                                                                                                stack depth
                                                                                                                                                                                                                                    6.2. STATE TABLES




                                                                                                                                                                                Maximum display list call
                                                                                                            MAX LIST NESTING                 Z+      GetIntegerv      64                                        5.4        –
                                                                                                                                                                                nesting
                                                                                                                                                                                Maximum evaluator poly-
                                                                                                            MAX EVAL ORDER                   Z+      GetIntegerv       8                                        5.1        –
                                                                                                                                                                                nomial order
                                                                                                                                                                                Maximum             viewport
                                                                                                            MAX VIEWPORT DIMS               2 × Z+   GetIntegerv   see 2.15.1                                  2.15.1      –
                                                                                                                                                                                dimensions
                                                                                                                                                                                Maximum depth of the
                                                                                                            MAX ATTRIB STACK DEPTH           Z+      GetIntegerv      16                                         6         –
                                                                                                                                                                                server attribute stack
                                                                                                                                                                                Maximum depth of the
                                                                                                            MAX CLIENT ATTRIB STACK DEPTH    Z+      GetIntegerv      16                                         6         –
                                                                                                                                                                                client attribute stack
                                                                                                            –                               3 × Z+   -                32        Max. size of a color table     3.7.3       –
                                                                                                                                                                                Max. size of the histogram
                                                                                                            –                                Z+      -                32                                       3.7.3       –
                                                                                                                                                                                table
                                                                                                                                                                                Range (lo to hi) of aliased
                                                                                                            ALIASED POINT SIZE RANGE        2 × R+   GetFloatv        1,1                                       3.4        –
                                                                                                                                                                                point sizes
                                                                                                                                                                                Range (lo to hi) of point
                                                                                                            POINT SIZE RANGE                2 × R+   GetFloatv        1,1                                       3.4        –
                                                                                                                                                                                sprite sizes




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.49. Implementation Dependent Values (cont.)
                                                                                                                                                                                Point sprite size granular-
                                                                                                            POINT SIZE GRANULARITY           R+      GetFloatv         –                                        3.4        –
                                                                                                                                                                                ity
                                                                                                                                                                                                                                    412
                                                                                                                                                                         Get           Minimum
                                                                                                                            Get value                      Type          Command       Value             Description           Sec.    Attribute
                                                                                                                                                                                                 Range (lo to hi) of aliased
                                                                                                            ALIASED LINE WIDTH RANGE                      2 × R+     GetFloatv           1,1                                   3.5        –
                                                                                                                                                                                                 line widths
                                                                                                            SMOOTH LINE WIDTH RANGE (v1.1: LINE WIDTH -                                          Range (lo to hi) of an-
                                                                                                                                                          2 × R+     GetFloatv           1,1                                   3.5        –
                                                                                                            RANGE)                                                                               tialiased line widths
                                                                                                            SMOOTH LINE WIDTH GRANULARITY (v1.1: LINE -                                          Antialiased line width
                                                                                                                                                            R+       GetFloatv            –                                    3.5        –
                                                                                                                                                                                                                                                   6.2. STATE TABLES




                                                                                                            WIDTH GRANULARITY)                                                                   granularity
                                                                                                                                                                     GetConvolution-             Maximum width of con-
                                                                                                            MAX CONVOLUTION WIDTH                         3 × Z+                          3                                    4.3        –
                                                                                                                                                                     Parameteriv                 volution filter
                                                                                                                                                                     GetConvolution-             Maximum height of con-
                                                                                                            MAX CONVOLUTION HEIGHT                        2 × Z+                          3                                    4.3        –
                                                                                                                                                                     Parameteriv                 volution filter
                                                                                                                                                                                                 Recommended
                                                                                                                                                                                                 max.          number of
                                                                                                            MAX ELEMENTS INDICES                            Z+       GetIntegerv          –                                    2.8        –
                                                                                                                                                                                                 DrawRangeElements
                                                                                                                                                                                                 indices
                                                                                                                                                                                                 Recommended
                                                                                                                                                                                                 max.          number of
                                                                                                            MAX ELEMENTS VERTICES                           Z+       GetIntegerv          –                                    2.8        –
                                                                                                                                                                                                 DrawRangeElements
                                                                                                                                                                                                 vertices
                                                                                                                                                                                                 Enumerated compressed
                                                                                                            COMPRESSED TEXTURE FORMATS                    4 ∗ ×Z +   GetIntegerv          -                                    3.9.3      –
                                                                                                                                                                                                 texture formats
                                                                                                                                                                                                 Number of compressed
                                                                                                            NUM COMPRESSED TEXTURE FORMATS                   Z       GetIntegerv          4                                    3.9.3      –
                                                                                                                                                                                                 texture formats




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.50. Implementation Dependent Values (cont.)
                                                                                                                                                                                                 No. of addressable texels
                                                                                                            MAX TEXTURE BUFFER SIZE                         Z+       GetIntegerv        65536                                  3.9.4      –
                                                                                                                                                                                                 for buffer textures
                                                                                                                                                                                                 Max. width & height of
                                                                                                            MAX RECTANGLE TEXTURE SIZE                      Z+       GetIntegerv        1024                                   3.9.1      –
                                                                                                                                                                                                 rectangular textures
                                                                                                                                                                                                                                                   413
                                                                                                                                                       Get       Minimum
                                                                                                                             Get value    Type         Command   Value               Description            Sec.    Attribute
                                                                                                                                               +                              Asynchronous         query
                                                                                                            QUERY COUNTER BITS           3×Z       GetQueryiv    see 6.1.12                                6.1.12      –
                                                                                                                                                                              counter bits
                                                                                                                                                                                                                                6.2. STATE TABLES




                                                                                                                                                                              Supported individual ex-
                                                                                                            EXTENSIONS                   0 ∗ ×S    GetStringi        –                                     6.1.4       –
                                                                                                                                                                              tension names
                                                                                                                                                                              Number of individual ex-
                                                                                                            NUM EXTENSIONS                Z+       GetIntegerv       –                                     6.1.4       –
                                                                                                                                                                              tension names
                                                                                                                                                                              Major version number
                                                                                                            MAJOR VERSION                 Z+       GetIntegerv       –                                     6.1.4       –
                                                                                                                                                                              supported
                                                                                                                                                                              Minor version number
                                                                                                            MINOR VERSION                 Z+       GetIntegerv       –                                     6.1.4       –
                                                                                                                                                                              supported
                                                                                                                                                                              Context      full/forward-
                                                                                                            CONTEXT FLAGS                 Z+       GetIntegerv       –                                     6.1.4       –
                                                                                                                                                                              compatible flag
                                                                                                                                                                              Supported        extension
                                                                                                            EXTENSIONS                     S       GetString         –                                     6.1.4       –
                                                                                                                                                                              names
                                                                                                            RENDERER                       S       GetString         –        Renderer string              6.1.4       –
                                                                                                                                                                              Shading Language ver-
                                                                                                            SHADING LANGUAGE VERSION       S       GetString         –                                     6.1.4       –
                                                                                                                                                                              sion supported
                                                                                                            VENDOR                         S       GetString         –        Vendor string                6.1.4       –
                                                                                                                                                                              OpenGL version sup-
                                                                                                            VERSION                        S       GetString         –                                     6.1.4       –




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.51. Implementation Dependent Values (cont.)
                                                                                                                                                                              ported
                                                                                                                                                                                                                                414
                                                                                                                                                          Get       Minimum
                                                                                                                          Get value            Type       Command   Value             Description           Sec.    Attribute
                                                                                                                                                                              Number       of     fixed-
                                                                                                            MAX TEXTURE UNITS                  Z+     GetIntegerv     16*                                   2.5        –
                                                                                                                                                                              function texture units
                                                                                                                                                                              Number of active vertex
                                                                                                            MAX VERTEX ATTRIBS                 Z+     GetIntegerv     16                                    2.7        –
                                                                                                                                                                              attributes
                                                                                                                                                                              Number of components
                                                                                                            MAX VERTEX UNIFORM COMPONENTS      Z+     GetIntegerv    1024     for vertex shader uniform    2.14.4      –
                                                                                                                                                                                                                                6.2. STATE TABLES




                                                                                                                                                                              variables
                                                                                                                                                                              Number of components
                                                                                                            MAX VARYING COMPONENTS             Z+     GetIntegerv     64                                   2.14.6      –
                                                                                                                                                                              for varying variables
                                                                                                                                                                              Total number of texture
                                                                                                            MAX COMBINED TEXTURE IMAGE UNITS   Z+     GetIntegerv     32      units accessible by the      2.14.7      –
                                                                                                                                                                              GL
                                                                                                                                                                              Number of texture image
                                                                                                            MAX VERTEX TEXTURE IMAGE UNITS     Z+     GetIntegerv     16      units accessible by a ver-   2.14.7      –
                                                                                                                                                                              tex shader
                                                                                                                                                                              Number of texture image
                                                                                                            MAX TEXTURE IMAGE UNITS            Z+     GetIntegerv     16      units accessible by frag-    2.14.7      –
                                                                                                                                                                              ment processing
                                                                                                                                                                              Number of texture coor-
                                                                                                            MAX TEXTURE COORDS                 Z+     GetIntegerv     8                                     2.7        –
                                                                                                                                                                              dinate sets
                                                                                                                                                                              Number of components
                                                                                                            MAX FRAGMENT UNIFORM COMPONENTS    Z+     GetIntegerv    1024     for frag. shader uniform     3.12.1      –
                                                                                                                                                                              variables




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.52. Implementation Dependent Values (cont.)
                                                                                                                                                                              Minimum texel offset al-
                                                                                                            MIN PROGRAM TEXEL OFFSET            Z     GetIntegerv     -8                                   2.14.7      –
                                                                                                                                                                              lowed in lookup
                                                                                                                                                                              Maximum texel offset al-
                                                                                                            MAX PROGRAM TEXEL OFFSET            Z     GetIntegerv     7                                    2.14.7      –
                                                                                                                                                                              lowed in lookup
                                                                                                                                                                                                                                415
                                                                                                                                                         Get       Minimum
                                                                                                                          Get value           Type       Command   Value            Description          Sec.    Attribute
                                                                                                                                                                             Max number of vertex
                                                                                                                                                                                                                             6.2. STATE TABLES




                                                                                                            MAX VERTEX UNIFORM BLOCKS         Z+     GetIntegerv     12      uniform buffers per pro-   2.14.4      –
                                                                                                                                                                             gram
                                                                                                                                                                             Max number of fragment
                                                                                                            MAX FRAGMENT UNIFORM BLOCKS       Z+     GetIntegerv     12      uniform buffers per pro-   2.14.4      –
                                                                                                                                                                             gram
                                                                                                                                                                             Max number of uniform
                                                                                                            MAX COMBINED UNIFORM BLOCKS       Z+     GetIntegerv     24                                 2.14.4      –
                                                                                                                                                                             buffers per program
                                                                                                                                                                             Max number of uniform
                                                                                                            MAX UNIFORM BUFFER BINDINGS       Z+     GetIntegerv     24      buffer binding points on   2.14.4      –
                                                                                                                                                                             the context
                                                                                                                                                                             Max size in basic ma-
                                                                                                            MAX UNIFORM BLOCK SIZE            Z+     GetIntegerv    16384    chine units of a uniform   2.14.4      –
                                                                                                                                                                             block
                                                                                                                                                                             Minimum required align-
                                                                                                            UNIFORM BUFFER OFFSET ALIGNMENT   Z+     GetIntegerv     1       ment for uniform buffer    2.14.4      –
                                                                                                                                                                             sizes and offsets




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                      Table 6.53. Implementation Dependent Values (cont.)
                                                                                                                                                                                                                             416
                                                                                                                                                                             Get       Minimum
                                                                                                                                         Get value                Type       Command   Value            Description           Sec.    Attribute
                                                                                                                                                                                                 Number of words for ver-
                                                                                                                                                                                                                                                  6.2. STATE TABLES




                                                                                                                                                                                         1       tex shader uniform vari-
                                                                                                                           MAX VERTEX UNIFORM COMPONENTS          Z+     GetIntegerv                                         2.14.4      –
                                                                                                                                                                                                 ables in default uniform
                                                                                                                                                                                                 block
                                                                                                                                                                                                 Number of words for
                                                                                                                                                                                         1       fragment shader uniform
                                                                                                                           MAX FRAGMENT UNIFORM COMPONENTS        Z+     GetIntegerv                                         2.14.4      –
                                                                                                                                                                                                 variables in default uni-
                                                                                                                                                                                                 form block
                                                                                                                                                                                                 Number of words for
                                                                                                                                                                                                 vertex shader uniform
                                                                                                                           MAX COMBINED VERTEX UNIFORM COMPO-                            1
                                                                                                                                                                  Z+     GetIntegerv             variables in all uni-       2.14.4      –
                                                                                                                           NENTS
                                                                                                                                                                                                 form blocks (including
                                                                                                                                                                                                 default)
                                                                                                                                                                                                 Number of words for
                                                                                                                                                                                                 fragment shader uniform
                                                                                                                           MAX COMBINED FRAGMENT UNIFORM COMPO-                          1
                                                                                                                                                                  Z+     GetIntegerv             variables in all uni-       2.14.4      –
                                                                                                                           NENTS
                                                                                                                                                                                                 form blocks (including
                                                                                                                                                                                                 default)




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                               Table 6.54. Implementation Dependent Values (cont.)
                                                      MAX_stage_UNIFORM_BLOCK_SIZE + MAX_stage_UNIFORM_COMPONENTS
                                                      (1) The minimum value for each stage is MAX_stage_UNIFORM_BLOCKS ×
                                                                                                                                                                                                                                                  417
                                                                                                                                 Get          Minimum
                                                                                                          Get value      Type    Command      Value                  Description              Sec.    Attribute
                                                                                                 AUX BUFFERS             Z+     GetIntegerv       0     Number of auxiliary buffers           4.2.1       –
                                                                                                                                                        Maximum number of active draw
                                                                                                 MAX DRAW BUFFERS        Z+     GetIntegerv     8                                             4.2.1      –
                                                                                                                                                        buffers
                                                                                                                                                                                                                  6.2. STATE TABLES




                                                                                                 RGBA MODE               B      GetBooleanv      –      True if color buffers store RGBA       2.7       –
                                                                                                 INDEX MODE              B      GetBooleanv      –      True if color buffers store indexes    2.7       –
                                                                                                 DOUBLEBUFFER            B      GetBooleanv      –      True if front & back buffers exist    4.2.1      –
                                                                                                 STEREO                  B      GetBooleanv      –      True if left & right buffers exist      6        –
                                                                                                 SAMPLE BUFFERS          Z+     GetIntegerv      0      Number of multisample buffers         3.3.1      –
                                                                                                 SAMPLES                 Z+     GetIntegerv      0      Coverage mask size                    3.3.1      –
                                                                                                                                                        Maximum number of FBO attach-
                                                                                                 MAX COLOR ATTACHMENTS   Z+     GetIntegerv      8                                            4.4.2      –
                                                                                                                                                        ment points for color buffers
                                                                                                                                                        Maximum number of samples sup-
                                                                                                 MAX SAMPLES             Z+     GetIntegerv      4                                            4.4.2      –
                                                                                                                                                        ported for multisampling
                                                                                                                                                        Number of bits in x color buffer
                                                                                                 x BITS                  Z+     GetIntegerv      -      component.       x is one of RED,      4         –
                                                                                                                                                        GREEN, BLUE, ALPHA, or INDEX
                                                                                                 DEPTH BITS              Z+     GetIntegerv      -      Number of depth buffer planes          4         –
                                                                                                 STENCIL BITS            Z+     GetIntegerv      -      Number of stencil planes               4         –




                                                      Table 6.55. Framebuffer Dependent Values
                                                                                                                                                        Number of bits in x accumula-
                                                                                                 ACCUM x BITS            Z+     GetIntegerv      -      tion buffer component (x is RED,       4         –




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                        GREEN, BLUE, or ALPHA
                                                                                                                                                                                                                  418
                                                                                                                         Get           Initial
                                                                                         Get value             Type      Command       Value                  Description                  Sec.    Attribute
                                                                                  LIST BASE                    Z+       GetIntegerv      0       Setting of ListBase                       5.4        list
                                                                                                                                                 Number of display list under con-
                                                                                  LIST INDEX                    Z+      GetIntegerv      0                                                 5.4        –
                                                                                                                                                 struction; 0 if none
                                                                                                                                                 Mode of display list under construc-
                                                                                  LIST MODE                     Z+      GetIntegerv      0                                                 5.4        –
                                                                                                                                                 tion; undefined if none
                                                                                                                                                                                                               6.2. STATE TABLES




                                                                                  –                           16 ∗ ×A   –              empty     Server attribute stack                      6         –
                                                                                  ATTRIB STACK DEPTH             Z+     GetIntegerv      0       Server attribute stack pointer              6         –
                                                                                  –                           16 ∗ ×A   –              empty     Client attribute stack                      6         –
                                                                                  CLIENT ATTRIB STACK DEPTH      Z+     GetIntegerv      0       Client attribute stack pointer              6         –
                                                                                  NAME STACK DEPTH               Z+     GetIntegerv      0       Name stack depth                           5.2        –
                                                                                  RENDER MODE                    Z3     GetIntegerv   RENDER     RenderMode setting                         5.2        –
                                                                                  SELECTION BUFFER POINTER       Y      GetPointerv      0       Selection buffer pointer                   5.2      select
                                                                                  SELECTION BUFFER SIZE          Z+     GetIntegerv      0       Selection buffer size                      5.2      select
                                                                                  FEEDBACK BUFFER POINTER        Y      GetPointerv      0       Feedback buffer pointer                    5.3    feedback
                                                                                  FEEDBACK BUFFER SIZE           Z+     GetIntegerv      0       Feedback buffer size                       5.3    feedback
                                                                                  FEEDBACK BUFFER TYPE           Z5     GetIntegerv     2D       Feedback type                              5.3    feedback
                                                                                  –                            n × Z8   GetError         0       Current error code(s)                      2.5        –




                                                      Table 6.56. Miscellaneous
                                                                                  –                            n×B      –             FALSE      True if there is a corresponding error     2.5        –
                                                                                                                 B      –             FALSE      Occlusion query active                    4.1.7       –
                                                                                  CURRENT QUERY               3 × Z+    GetQueryiv       0       Active query object names                6.1.12       –
                                                                                                                                                 Buffer object bound to copy buffer
                                                                                  COPY READ BUFFER              Z+      GetIntegerv      0                                                2.9.3       –
                                                                                                                                                 “read” bind point




OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                                                                                 Buffer object bound to copy buffer
                                                                                  COPY WRITE BUFFER             Z+      GetIntegerv      0                                                2.9.3       –
                                                                                                                                                 “write” bind point
                                                                                                                                                 Buffer object bound to texture buffer
                                                                                  TEXTURE BUFFER                Z+      GetIntegerv      0                                                3.9.13   texture
                                                                                                                                                 bind point
                                                                                                                                                                                                               419
Appendix A

Invariance

The OpenGL specification is not pixel exact. It therefore does not guarantee an ex-
act match between images produced by different GL implementations. However,
the specification does specify exact matches, in some cases, for images produced
by the same implementation. The purpose of this appendix is to identify and pro-
vide justification for those cases that require exact matches.


A.1     Repeatability
The obvious and most fundamental case is repeated issuance of a series of GL com-
mands. For any given GL and framebuffer state vector, and for any GL command,
the resulting GL and framebuffer state must be identical whenever the command is
executed on that initial GL and framebuffer state.
     One purpose of repeatability is avoidance of visual artifacts when a double-
buffered scene is redrawn. If rendering is not repeatable, swapping between two
buffers rendered with the same command sequence may result in visible changes
in the image. Such false motion is distracting to the viewer. Another reason for
repeatability is testability.
     Repeatability, while important, is a weak requirement. Given only repeata-
bility as a requirement, two scenes rendered with one (small) polygon changed
in position might differ at every pixel. Such a difference, while within the law
of repeatability, is certainly not within its spirit. Additional invariance rules are
desirable to ensure useful operation.




                                        420
A.2. MULTI-PASS ALGORITHMS                                                       421


A.2     Multi-pass Algorithms
Invariance is necessary for a whole set of useful multi-pass algorithms. Such al-
gorithms render multiple times, each time with a different GL mode vector, to
eventually produce a result in the framebuffer. Examples of these algorithms in-
clude:

   • “Erasing” a primitive from the framebuffer by redrawing it, either in a dif-
     ferent color or using the XOR logical operation.

   • Using stencil operations to compute capping planes.

    On the other hand, invariance rules can greatly increase the complexity of high-
performance implementations of the GL. Even the weak repeatability requirement
significantly constrains a parallel implementation of the GL. Because GL imple-
mentations are required to implement ALL GL capabilities, not just a convenient
subset, those that utilize hardware acceleration are expected to alternate between
hardware and software modules based on the current GL mode vector. A strong
invariance requirement forces the behavior of the hardware and software modules
to be identical, something that may be very difficult to achieve (for example, if the
hardware does floating-point operations with different precision than the software).
    What is desired is a compromise that results in many compliant, high-
performance implementations, and in many software vendors choosing to port to
OpenGL.


A.3     Invariance Rules
For a given instantiation of an OpenGL rendering context:

Rule 1 For any given GL and framebuffer state vector, and for any given GL com-
mand, the resulting GL and framebuffer state must be identical each time the com-
mand is executed on that initial GL and framebuffer state.

Rule 2 Changes to the following state values have no side effects (the use of any
other state value is not affected by the change):

Required:

         • Framebuffer contents (all bitplanes)
         • The color buffers enabled for writing
         • The values of matrices other than the top-of-stack matrices




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
A.3. INVARIANCE RULES                                                          422


         • Scissor parameters (other than enable)
         • Writemasks (color, index, depth, stencil)
         • Clear values (color, index, depth, stencil, accumulation)
         ◦ Current values (color, index, normal, texture coords, edgeflag)
         ◦ Current raster color, index and texture coordinates.
         ◦ Material properties (ambient, diffuse, specular, emission, shininess)

Strongly suggested:

         • Matrix mode
         • Matrix stack depths
         • Alpha test parameters (other than enable)
         • Stencil parameters (other than enable)
         • Depth test parameters (other than enable)
         • Blend parameters (other than enable)
         • Logical operation parameters (other than enable)
         • Pixel storage and transfer state
         • Evaluator state (except as it affects the vertex data generated by the
           evaluators)
         • Polygon offset parameters (other than enables, and except as they affect
           the depth values of fragments)

Corollary 1 Fragment generation is invariant with respect to the state values
marked with • in Rule 2.


Corollary 2 The window coordinates (x, y, and z) of generated fragments are also
invariant with respect to

Required:

         • Current values (color, color index, normal, texture coords, edgeflag)
         • Current raster color, color index, and texture coordinates
         • Material properties (ambient, diffuse, specular, emission, shininess)




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
A.4. WHAT ALL THIS MEANS                                                         423


Rule 3 The arithmetic of each per-fragment operation is invariant except with re-
spect to parameters that directly control it (the parameters that control the alpha
test, for instance, are the alpha test enable, the alpha test function, and the alpha
test reference value).

Corollary 3 Images rendered into different color buffers sharing the same frame-
buffer, either simultaneously or separately using the same command sequence, are
pixel identical.

Rule 4 The same vertex or fragment shader will produce the same result when
run multiple times with the same input. The wording ’the same shader’ means a
program object that is populated with the same source strings, which are compiled
and then linked, possibly multiple times, and which program object is then executed
using the same GL state vector.

Rule 5 All fragment shaders that either conditionally or unconditionally assign
gl_FragCoord.z to gl_FragDepth are depth-invariant with respect to each
other, for those fragments where the assignment to gl_FragDepth actually is
done.


A.4     What All This Means
Hardware accelerated GL implementations are expected to default to software op-
eration when some GL state vectors are encountered. Even the weak repeatability
requirement means, for example, that OpenGL implementations cannot apply hys-
teresis to this swap, but must instead guarantee that a given mode vector implies
that a subsequent command always is executed in either the hardware or the soft-
ware machine.
    The stronger invariance rules constrain when the switch from hardware to soft-
ware rendering can occur, given that the software and hardware renderers are not
pixel identical. For example, the switch can be made when blending is enabled or
disabled, but it should not be made when a change is made to the blending param-
eters.
    Because floating point values may be represented using different formats in dif-
ferent renderers (hardware and software), many OpenGL state values may change
subtly when renderers are swapped. This is the type of state value change that Rule
1 seeks to avoid.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix B

Corollaries

The following observations are derived from the body and the other appendixes of
the specification. Absence of an observation from this list in no way impugns its
veracity.

   1. The CURRENT_RASTER_TEXTURE_COORDS must be maintained correctly at
      all times, including periods while texture mapping is not enabled, and when
      the GL is in color index mode.

   2. When requested, texture coordinates returned in feedback mode are always
      valid, including periods while texture mapping is not enabled, and when the
      GL is in color index mode.

   3. The error semantics of upward compatible OpenGL revisions may change,
      and features deprecated in a previous revision may be removed. Otherwise,
      only additions can be made to upward compatible revisions.

   4. GL query commands are not required to satisfy the semantics of the Flush
      or the Finish commands. All that is required is that the queried state be con-
      sistent with complete execution of all previously executed GL commands.

   5. Application specified point size and line width must be returned as specified
      when queried. Implementation-dependent clamping affects the values only
      while they are in use.

   6. Bitmaps and pixel transfers do not cause selection hits.

   7. The mask specified as the third argument to StencilFunc affects the operands
      of the stencil comparison function, but has no direct effect on the update of
      the stencil buffer. The mask specified by StencilMask has no effect on the




                                       424
                                                                               425


    stencil comparison function; it limits the effect of the update of the stencil
    buffer.

 8. Polygon shading is completed before the polygon mode is interpreted. If the
    shade model is FLAT, all of the points or lines generated by a single polygon
    will have the same color.

 9. A display list is just a group of commands and arguments, so errors generated
    by commands in a display list must be generated when the list is executed.
    If the list is created in COMPILE mode, errors should not be generated while
    the list is being created.

10. RasterPos does not change the current raster index from its default value
    in an RGBA mode GL context. Likewise, RasterPos does not change the
    current raster color from its default value in a color index GL context. Both
    the current raster index and the current raster color can be queried, however,
    regardless of the color mode of the GL context.

11. A material property that is attached to the current color via ColorMaterial
    always takes the value of the current color. Attempts to change that material
    property via Material calls have no effect.

12. Material and ColorMaterial can be used to modify the RGBA material
    properties, even in a color index context. Likewise, Material can be used to
    modify the color index material properties, even in an RGBA context.

13. There is no atomicity requirement for OpenGL rendering commands, even
    at the fragment level.

14. Because rasterization of non-antialiased polygons is point sampled, poly-
    gons that have no area generate no fragments when they are rasterized in
    FILL mode, and the fragments generated by the rasterization of “narrow”
    polygons may not form a continuous array.

15. OpenGL does not force left- or right-handedness on any of its coordinates
    systems. Consider, however, the following conditions: (1) the object coordi-
    nate system is right-handed; (2) the only commands used to manipulate the
    model-view matrix are Scale (with positive scaling values only), Rotate, and
    Translate; (3) exactly one of either Frustum or Ortho is used to set the pro-
    jection matrix; (4) the near value is less than the far value for DepthRange.
    If these conditions are all satisfied, then the eye coordinate system is right-
    handed and the clip, normalized device, and window coordinate systems are
    left-handed.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
                                                                                426


16. ColorMaterial has no effect on color index lighting.

17. (No pixel dropouts or duplicates.) Let two polygons share an identical edge
    (that is, there exist vertices A and B of an edge of one polygon, and vertices
    C and D of an edge of the other polygon, and the coordinates of vertex A
    (resp. B) are identical to those of vertex C (resp. D), and the state of the the
    coordinate transfomations is identical when A, B, C, and D are specified).
    Then, when the fragments produced by rasterization of both polygons are
    taken together, each fragment intersecting the interior of the shared edge is
    produced exactly once.

18. OpenGL state continues to be modified in FEEDBACK mode and in SELECT
    mode. The contents of the framebuffer are not modified.

19. The current raster position, the user defined clip planes, the spot directions
    and the light positions for LIGHTi, and the eye planes for texgen are trans-
    formed when they are specified. They are not transformed during a PopAt-
    trib, or when copying a context.

20. Dithering algorithms may be different for different components. In particu-
    lar, alpha may be dithered differently from red, green, or blue, and an imple-
    mentation may choose to not dither alpha at all.

21. For any GL and framebuffer state, and for any group of GL commands and
    arguments, the resulting GL and framebuffer state is identical whether the
    GL commands and arguments are executed normally or from a display list.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix C

Compressed Texture Image
Formats

C.1     RGTC Compressed Texture Image Formats
Compressed texture images stored using the RGTC compressed image encodings
are represented as a collection of 4 × 4 texel blocks, where each block contains
64 or 128 bits of texel data. The image is encoded as a normal 2D raster image in
which each 4 × 4 block is treated as a single pixel. If an RGTC image has a width
or height that is not a multiple of four, the data corresponding to texels outside
the image are irrelevant and undefined.
    When an RGTC image with a width of w, height of h, and block size of block-
size (8 or 16 bytes) is decoded, the corresponding image size (in bytes) is:

                                w        h
                                    ×       × blocksize.
                                4        4
   When decoding an RGTC image, the block containing the texel at offset (x, y)
begins at an offset (in bytes) relative to the base of the image of:
                                       w        y       x
                       blocksize ×          ×       +        .
                                        4       4       4
    The data corresponding to a specific texel (x, y) are extracted from a 4×4 texel
block using a relative (x, y) value of

                             (x   mod 4, y    mod 4).
   There are four distinct RGTC image formats:




                                        427
C.1. RGTC COMPRESSED TEXTURE IMAGE FORMATS                                        428


C.1.1   Format COMPRESSED_RED_RGTC1
Each 4 × 4 block of texels consists of 64 bits of unsigned red image data.
    Each red image data block is encoded as a sequence of 8 bytes, called (in order
of increasing address):

                 red0 , red1 , bits0 , bits1 , bits2 , bits3 , bits4 , bits5
   The 6 bits∗ bytes of the block are decoded into a 48-bit bit vector:


bits = bits0 +256×(bits1 + 256 × (bits2 + 256 × (bits3 + 256 × (bits4 + 256 × bits5 ))))

    red0 and red1 are 8-bit unsigned integers that are unpacked to red values
RED0 and RED1 as though they were pixels with a format of LUMINANCE and a
type of UNSIGNED_BYTE.
    bits is a 48-bit unsigned integer, from which a three-bit control code is ex-
tracted for a texel at location (x, y) in the block using:


        code(x, y) = bits [3 × (4 × y + x) + 2 . . . 3 × (4 × y + x) + 0]

   where bit 47 is the most significant and bit 0 is the least significant bit.
   The red value R for a texel at location (x, y) in the block is given by:




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
C.1. RGTC COMPRESSED TEXTURE IMAGE FORMATS                                  429


                  
                  RED0 ,
                  
                  
                                      red0 > red1 , code(x, y) = 0
                   RED1 ,             red0 > red1 , code(x, y) = 1
                  
                  
                  
                  
                   6RED0 +RED1
                                      red0 > red1 , code(x, y) = 2
                  
                  
                  
                  
                        7,
                    5RED0 +2RED1
                                      red0 > red1 , code(x, y) = 3
                  
                  
                          7,
                  
                  
                  
                   4RED0 +3RED1
                                     red0 > red1 , code(x, y) = 4
                   3RED0 7,
                  
                  
                  
                          +4RED1
                  
                  
                         7,          red0 > red1 , code(x, y) = 5
                  
                   2RED0 +5RED1
                  
                  
                  
                         7,          red0 > red1 , code(x, y) = 6
                   RED0 +6RED1
                  
                                      red0 > red1 , code(x, y) = 7
             R=           7,
                  
                  
                  RED0 ,             red0 ≤ red1 , code(x, y) = 0
                  
                  RED1 ,
                  
                  
                                     red0 ≤ red1 , code(x, y) = 1
                   4RED0 +RED1
                  
                  
                  
                        5,           red0 ≤ red1 , code(x, y) = 2
                    3RED0 +2RED1
                  
                  
                  
                  
                         5,          red0 ≤ red1 , code(x, y) = 3
                    2RED0 +3RED1
                  
                                      red0 ≤ red1 , code(x, y) = 4
                  
                  
                  
                         5,
                    RED0 +4RED1
                  
                                      red0 ≤ red1 , code(x, y) = 5
                  
                  
                  
                  
                        5,
                   RED       ,        red0 ≤ red1 , code(x, y) = 6
                  
                         min
                  
                  
                  
                  
                   REDmax ,           red0 ≤ red1 , code(x, y) = 7
                  

    REDmin and REDmax are 0.0 and 1.0 respectively.
    Since the decoded texel has a red format, the resulting RGBA value for the
texel is (R, 0, 0, 1).

C.1.2   Format COMPRESSED_SIGNED_RED_RGTC1
Each 4 × 4 block of texels consists of 64 bits of signed red image data. The red
values of a texel are extracted in the same way as COMPRESSED_RED_RGTC1 ex-
cept red 0, red 1, RED 0, RED 1, REDmin , and REDmax are signed values
defined as follows:
    red0 and red1 are 8-bit signed (two’s complement) integers.
                                    red0
                                   127.0,   red0 > −128
                       RED0 =
                                   −1.0,    red0 = −128
                                    red1
                                   127.0,   red1 > −128
                       RED1 =
                                   −1.0,    red1 = −128

                               REDmin = −1.0




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
C.1. RGTC COMPRESSED TEXTURE IMAGE FORMATS                                    430



                                REDmax = 1.0
   CAVEAT for signed red0 and red1 values: the expressions red0 > red1 and
red0 ≤ red1 above are considered undefined (read: may vary by implementation)
when red0 = −127 and red1 = −128. This is because if red0 were remapped to
-127 prior to the comparison to reduce the latency of a hardware decompressor, the
expressions would reverse their logic. Encoders for the signed red-green formats
should avoid encoding blocks where red0 = −127 and red1 = −128.

C.1.3   Format COMPRESSED_RG_RGTC2
Each 4 × 4 block of texels consists of 64 bits of compressed unsigned red image
data followed by 64 bits of compressed unsigned green image data.
    The first 64 bits of compressed red are decoded exactly like COMPRESSED_-
RED_RGTC1 above.
    The second 64 bits of compressed green are decoded exactly like
COMPRESSED_RED_RGTC1 above except the decoded value R for this second
block is considered the resulting green value G.
    Since the decoded texel has a red-green format, the resulting RGBA value for
the texel is (R, G, 0, 1).

C.1.4   Format COMPRESSED_SIGNED_RG_RGTC2
Each 4 × 4 block of texels consists of 64 bits of compressed signed red image data
followed by 64 bits of compressed signed green image data.
    The first 64 bits of compressed red are decoded exactly like COMPRESSED_-
SIGNED_RED_RGTC1 above.
    The second 64 bits of compressed green are decoded exactly like
COMPRESSED_SIGNED_RED_RGTC1 above except the decoded value R for this
second block is considered the resulting green value G.
    Since this image has a red-green format, the resulting RGBA value is
(R, G, 0, 1).




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix D

Shared Objects and Multiple
Contexts

State that can be shared between contexts includes display lists, pixel and vertex
buffer objects, program and shader objects, and texture objects (except for the tex-
ture objects named zero).
    Framebuffer, query, and vertex array objects are not shared.


D.1     Object Deletion Behavior
After an object is deleted, its name is immediately marked unused. Caution should
be taken when deleting an object attached to a container object (such as a buffer
object attached to a vertex array object, or a renderbuffer or texture attached to
a framebuffer object), or a shared object bound in multiple contexts. Following
its deletion, the object’s name may be used by any context to create a new object
or returned by Gen* commands, even though the underlying object state and data
may still be referred to by container objects, or in use by contexts other than the one
in which the object was deleted. Such a container or other context may continue
using the object, and may still contain state identifying its name as being currently
bound, until such time as the container object is deleted, the attachment point of
the container object is changed to refer to another object, or another attempt to
bind or attach the name is made in that context. Since the name is marked unused,
binding the name will create a new object with the same name, and attaching the
name will generate an error. The underlying storage backing a deleted object will
not be reclaimed by the GL until all references to the object from container object
attachment points or context binding points are removed.




                                         431
D.2. PROPAGATING STATE CHANGES                                                                   432


D.2        Propagating State Changes
Data is information the GL implementation does not have to inspect, and does not
have an operational effect. Currently, data consists of:

       • Pixels in the framebuffer.

       • The contents of textures and renderbuffers.

       • The contents of buffer objects.

    State determines the configuration of the rendering pipeline and the driver does
have to inspect.
    In hardware-accelerated GL implementations, state typically lives in GPU reg-
isters, while data typically lives in GPU memory.
    When the state of an object T is changed, such changes are not always imme-
diately visible, and do not always immediately affect GL operations involving that
object. Changes to an object may occur via any of the following means:

       • State-setting commands, such as TexParameter.

       • Data-setting commands, such as TexSubImage* or BufferSubData.

       • Data-setting through rendering to attached renderbuffers or transform feed-
         back operations.

       • Commands that affect both state and data, such as TexImage* and Buffer-
         Data.

       • Changes to mapped buffer data followed by a command such as Unmap-
         Buffer or FlushMappedBufferRange.

     The object T is considered to have been changed once such a command has
completed. Completion of a command 1 may be determined only by calling Fin-
ish.
   1
     The GL already specifies that a single context processes commands in the order they are received.
This means that a change to an object in a context at time t must be completed by the time a command
issued in the same context at time t + 1 uses the result of that change.




               OpenGL 3.1 with GL ARB compatibility - May 28, 2009
D.2. PROPAGATING STATE CHANGES                                                     433


D.2.1     Definitions
In the remainder of this section, the following terminology is used:

   • An object T is directly attached to the current context if it has been bound to
     one of the context binding points. Examples include but are not limited to
     bound textures, bound framebuffers, bound vertex arrays, and current pro-
     grams.

   • T is indirectly attached to the current context if it is attached to another ob-
     ject C, referred to as a container object, and C is itself directly or indirectly
     attached. Examples include but are not limited to renderbuffers or textures
     attached to framebuffers; buffers attached to vertex arrays; and shaders at-
     tached to programs.

   • An object T which is directly attached to the current context may be re-
     attached by re-binding T at the same bind point. An object T which is indi-
     rectly attached to the current context may be re-attached by re-attaching the
     container object C to which T is attached.
        Corollary: re-binding C to the current context re-attaches C and its hierarchy
        of contained objects.

D.2.2     Rules
The following rules must be obeyed by all GL implementations:

Rule 1 If the state of object T is changed in the current context while T is directly
or indirectly attached, then all operations on T will use that new state in the current
context.
    Note: The intent of this rule is to address state changes in a single context only.
The multi-context case is handled by the other rules.
    Note: “Updates” via rendering or transform feedback are treated consistently
with update via GL commands. Once EndTransformFeedback has been issued,
any command in the same context that uses the results of the transform feedback
operation will see the results. If a feedback loop is setup between rendering and
transform feedback (see above), results will be undefined.

Rule 2 While a container object C is bound, any changes made to C’s attachments
in the current context are guaranteed to be seen. To guarantee seeing changes
made in another context to objects attached to C must be completed in that other
context (by calling Finish) prior to C being bound. Changes made in another




              OpenGL 3.1 with GL ARB compatibility - May 28, 2009
D.2. PROPAGATING STATE CHANGES                                                     434


context without calling Finish, or after C is bound in the current context, are not
guaranteed to be seen.

Rule 3 State changes to shared objects are not automatically propagated between
contexts. If the state of a shared object T is changed in a context other than the
current context, and T is already directly or indirectly attached to the current con-
text, any operations on the current context involving T via those attachments are
not guaranteed to use its new state.

Rule 4 If the state of a shared object T is changed in a context other than the cur-
rent context, and T is already directly or indirectly attached to the current context
at multiple attachment or bind points, it must be attached or re-attached to at least
one binding point in the current context in order for the new state of T to be visible
in the current context.
    Note: “Attached or re-attached” means either attaching an object to a binding
point it wasn’t already attached to, or attaching an object again to a binding point
it was already attached.
    Note: This rule also applies to the pointer to the data store of an object. The
pointer itself is state, while the content of the data store are data, not state. To
guarantee that another context sees data updates to an object, you should attach
or re-attach the object in that context, since the pointer to the data store could have
changed.
    Note: To be sure that a data update, as the result of a transform-feedback
operation in another context, is visible in the current context, the app needs to make
sure that the command EndTransformFeedback has completed (using Finish).
    Example: If a texture image is bound to multiple texture bind points and the
texture is modified in another context, re-binding the texture at any one of the tex-
ture bind points is sufficient to cause the modifications to be visible at all texture
bind points.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix E

The Deprecation Model

OpenGL 3.0 introduces a deprecation model in which certain features may be
marked as deprecated. Deprecated features are expected to be completely removed
from a future version of OpenGL. Deprecated features are summarized in sec-
tion E.1.
    To aid developers in writing applications which will run on such future ver-
sions, it is possible to create an OpenGL 3.0 context which does not support dep-
recated features. Such a context is called a forward compatible context, while a
context supporting all OpenGL 3.0 features is called a full context. Forward com-
patible contexts cannot restore deprecated functionality through extensions, but
they may support additional, non-deprecated functionality through extensions.
    Profiles allow defining subsets of OpenGL functionality targeted to specific ap-
plication domains. While OpenGL 3.0 only defines a single profile, future versions
may introduce profiles addressing domains such as workstation, gaming, and em-
bedded. Implementations are not required to support all defined profiles, but must
support at least one profile.
    To enable application control of deprecation and profiles, new context creation
APIs have been defined as extensions to GLX and WGL. These APIs allow spec-
ifying a particular version, profile, and full or forward compatible status, and will
either create a context compatible with the request, or fail (if, for example, request-
ing an OpenGL version or profile not supported by the implementation),
    Only the ARB may define OpenGL profiles and deprecated features.


E.1     Profiles and Deprecated Features of OpenGL 3.0
OpenGL 3.0 defines a single profile, and all OpenGL 3.0 implementations must
support that profile.




                                         435
E.1. PROFILES AND DEPRECATED FEATURES OF OPENGL 3.0                              436


    The features deprecated in OpenGL 3.0 are summarized below, together with
the sections of the specification in which they are defined. Functions which are
completely deprecated will generate an INVALID_OPERATION error if called in
a forward-compatible context. Functions which are partially deprecated (e.g. no
longer accept some parameter values) will generate the errors appropriate for any
other unrecognized value of that parameter when a deprecated value is passed in a
forward-compatible context.

   • Application-generated object names - the names of all object types, such as
     buffer, query, and texture objects, must be generated using the correspond-
     ing Gen* commands. Trying to bind an object name not returned by a Gen*
     command will result in an INVALID_OPERATION error. This behavior is
     already the case for framebuffer, renderbuffer, and vertex array objects. Ob-
     ject types which have default objects (objects named zero) , such as vertex
     array, framebuffer, and texture objects, may also bind the default object, even
     though it is not returned by Gen*.

   • Color index mode - No color index visuals are supplied by the window
     system-binding APIs such as GLX and WGL, so the default framebuffer
     is always in RGBA mode. All language and state related to color index
     mode vertex, rasterization, and fragment processing behavior is removed.
     COLOR_INDEX formats are also deprecated.

   • OpenGL Shading Language versions 1.10 and 1.20. These versions of the
     shading language depend on many API features that have also been depre-
     cated.

   • Begin / End primitive specification - Begin, End, and EdgeFlag* (sec-
     tion 2.6.1); Color*, FogCoord*, Index*, Normal3*, SecondaryColor3*,
     TexCoord*, Vertex* Vertex* (section 2.7); and all associated state in ta-
     bles 6.4 and 6.5. Vertex arrays and array drawing commands must be used
     to draw primitives. However, VertexAttrib* and the current vertex attribute
     state are retained in order to provide default attribute values for disabled at-
     tribute arrays.

   • Edge flags and fixed-function vertex processing - ColorPointer, EdgeFlag-
     Pointer, FogCoordPointer, IndexPointer, NormalPointer, Secondary-
     ColorPointer, TexCoordPointer, VertexPointer, EnableClientState,
     DisableClientState, and InterleavedArrays, ClientActiveTexture (sec-
     tion 2.8); Frustum, LoadIdentity, LoadMatrix, LoadTransposeMa-
     trix, MatrixMode, MultMatrix, MultTransposeMatrix, Ortho, PopMa-




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
E.1. PROFILES AND DEPRECATED FEATURES OF OPENGL 3.0                          437


    trix, PushMatrix, Rotate, Scale, and Translate (section 2.12.1; En-
    able/Disable targets RESCALE_NORMAL and NORMALIZE (section 2.12.2);
      TexGen* and Enable/Disable targets TEXTURE_GEN_* (section 2.12.3,
      Material*, Light*, LightModel*, and ColorMaterial, ShadeModel,
    and Enable/Disable targets LIGHTING. VERTEX_PROGRAM_TWO_SIDE,
    LIGHTi, and COLOR_MATERIAL (sections 2.13.2 and 2.13.3; ClipPlane;
    and all associated fixed-function vertex array, multitexture, matrix and ma-
    trix stack, normal and texture coordinate, lighting, and clipping state. A
    vertex shader must be defined in order to draw primitives.
    Language referring to edge flags in the current specification is modified as
    though all edge flags are TRUE.
    Note that the FrontFace and ClampColor commands in section 2.10 are not
    deprecated, as they still affect other non-deprecated functionality; however,
    the ClampColor targets CLAMP_VERTEX_COLOR and CLAMP_FRAGMENT_-
    COLOR are deprecated.

  • Client vertex and index arrays - all vertex array attribute and element ar-
    ray index pointers must refer to buffer objects (section 2.9.4). The default
    vertex array object (the name zero) is also deprecated. Calling VertexAt-
    tribPointer when no buffer object or no vertex array object is bound will
    generate an INVALID_OPERATION error, as will calling any array drawing
    command when no vertex array object is bound.

  • Rectangles - Rect* (section 2.11).

  • Current raster position - RasterPos* and WindowPos* (section 2.22), and
    all associated state.

  • Two-sided color selection (section 2.13.1) - Enable target VERTEX_-
    PROGRAM_TWO_SIDE; OpenGL Shading Language builtins gl_BackColor
    and gl_BackSecondaryColor; and all associated state.

  • Non-sprite points (section 3.4) - Enable/Disable targets POINT_SMOOTH
    and POINT_SPRITE, and all associated state. Point rasterization is always
    performed as though POINT_SPRITE were enabled.

  • Wide lines and line stipple - LineWidth is not deprecated, but values greater
    than 1.0 will generate an INVALID_VALUE error; LineStipple and En-
    able/Disable target LINE_STIPPLE (section 3.5.2, and all associated state.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
E.1. PROFILES AND DEPRECATED FEATURES OF OPENGL 3.0                              438


  • Quadrilateral and polygon primitives - vertex array drawing modes
    POLYGON, QUADS, and QUAD_STRIP (section 2.6.1, related descriptions of
    rasterization of non-triangle polygons in section 3.6, and all associated state.
  • Separate polygon draw mode - PolygonMode face values of FRONT and
    BACK; polygons are always drawn in the same mode, no matter which face
    is being rasterized.
  • Polygon Stipple - PolygonStipple and Enable/Disable target POLYGON_-
    STIPPLE (section 3.6.2, and all associated state.

  • Pixel transfer modes and operations - all pixel transfer modes, including
    pixel maps, shift and bias, color table lookup, color matrix, and convolution
    commands and state (sections 3.7.2, 3.7.3, and 3.7.6), and all associated
    state and commands defining that state.
  • Pixel drawing - DrawPixels and PixelZoom (section 3.7.5). However, the
    language describing pixel rectangles in section 3.7 is retained as it is required
    for TexImage* and ReadPixels.
  • Bitmaps - Bitmap (section 3.8) and the BITMAP external format.
  • Legacy OpenGL 1.0 pixel formats - the values 1, 2, 3, and 4 are no longer
    accepted as internal formats by TexImage* or any other command taking an
    internal format argument. The initial internal format of a texel array is RGBA
    instead of 1 (see section 3.9.12).  TEXTURE_COMPONENTS is deprecated;
    always use TEXTURE_INTERNAL_FORMAT.
  • Legacy pixel formats - all ALPHA, LUMINANCE, LUMINANCE_ALPHA, and
    INTENSITY external and internal formats, including compressed, floating-
    point, and integer variants (see tables 3.6, 3.16, 3.18, 3.20, 3.25, and 6.1); all
    references to luminance and intensity formats elsewhere in the specification,
    including conversion to and from those formats; and all associated state.
    including state describing the allocation or format of luminance and intensity
    texture or framebuffer components.
  • Depth texture mode - DEPTH_TEXTURE_MODE. Section 3.9.15 is to be
    changed so that r is returned to texture samplers directly, and the OpenGL
    Shading Language 1.30 Specification is to be changed so that (r, r, r, 1) is
    always returned from depth texture samplers in this case.
  • Texture wrap mode CLAMP - CLAMP is no longer accepted as a value of
    texture parameters TEXTURE_WRAP_S, TEXTURE_WRAP_T, or TEXTURE_-
    WRAP_R.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
E.1. PROFILES AND DEPRECATED FEATURES OF OPENGL 3.0                           439


  • Texture borders - the border value to TexImage* must always be zero, or
    an INVALID_VALUE error is generated (section 3.9.1); all language in sec-
    tion 3.9 referring to nonzero border widths during texture image specification
    and texture sampling; and all associated state.
  • Automatic mipmap generation - TexParameter* target GENERATE_MIPMAP
    (section 3.9.8), and all associated state.
  • Fixed-function fragment processing - AreTexturesResident, Prioritize-
    Textures, and TexParameter target TEXTURE_PRIORITY; TexEnv target
    TEXTURE_ENV, and all associated parameters; TexEnv target TEXTURE_-
    FILTER_CONTROL, and parameter name TEXTURE_LOD_BIAS; Enable tar-
    gets of all dimensionalities (TEXTURE_1D, TEXTURE_2D, TEXTURE_3D,
    TEXTURE_1D_ARRAY, TEXTURE_2D_ARRAY, and TEXTURE_CUBE_MAP);
    Enable target COLOR_SUM; Enable target FOG, Fog, and all associated pa-
    rameters; the implementation-dependent values MAX_TEXTURE_UNITS and
    MAX_TEXTURE_COORDS; and all associated state.

  • Alpha test - AlphaFunc and Enable/Disable target ALPHA_TEST (sec-
    tion 4.1.4), and all associated state.
  • Accumulation buffers - ClearAccum, and ACCUM_BUFFER_BIT is not valid
    as a bit in the argument to Clear (section 4.2.3); Accum (section 4.2.4); the
    ACCUM_*_BITS framebuffer state describing the size of accumulation buffer
    components (table 6.55); and all associated state.
    Window system-binding APIs such as GLX and WGL may choose to either
    not expose window configs containing accumulation buffers, or to ignore
    accumulation buffers when the default framebuffer bound to a GL context
    contains them.
  • Pixel copying - CopyPixels (the comments also applying to CopyTexImage
    will be moved to section 3.9.2).
  • Auxiliary color buffers, including AUXi targets of the default framebuffer.
  • Context framebuffer size queries - RED_BITS, GREEN_BITS, BLUE_BITS,
    ALPHA_BITS, DEPTH_BITS, and STENCIL_BITS.

  • Evaluators - Map*, EvalCoord*, MapGrid*, EvalMesh*, EvalPoint*, and
    all evaluator map enables in table 5.1 (section 5.1, and all associated state.
  • Selection and feedback modes - RenderMode, InitNames, PopName,
    PushName, LoadName, and SelectBuffer (section 5.2); FeedbackBuffer
    and PassThrough (section 5.3); and all associated state.




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
E.1. PROFILES AND DEPRECATED FEATURES OF OPENGL 3.0                              440


  • Display lists - NewList, EndList, CallList, CallLists, ListBase, GenLists,
    IsList, and DeleteLists (section 5.4); all references to display lists and be-
    havior when compiling commands into display lists elsewhere in the speci-
    fication; and all associated state.

  • Hints - the PERSPECTIVE_CORRECTION_HINT, POINT_SMOOTH_HINT,
    FOG_HINT, and GENERATE_MIPMAP_HINT targets to Hint (section 5.6).

  • Attribute stacks - PushAttrib, PushClientAttrib, PopAttrib, Pop-
    ClientAttrib, the MAX_ATTRIB_STACK_DEPTH, MAX_CLIENT_ATTRIB_-
    STACK_DEPTH, ATTRIB_STACK_DEPTH, and CLIENT_ATTRIB_STACK_-
    DEPTH state, the client and server attribute stacks, and the values ALL_-
    ATTRIB_BITS and CLIENT_ALL_ATTRIB_BITS (section 6.1.18).

  • Unified extension string - EXTENSIONS target to GetString (section 6.1.4).

  • Token names and queries - all token names and queries not otherwise men-
    tioned above for deprecated state, as well as all query entry points where all
    valid targets of that query are deprecated state (chapter 6 and the state tables)




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix F

Version 3.0 and Before

OpenGL version 3.0, released on August 11, 2008, is the eighth revision since
the original version 1.0. When using a full 3.0 context, OpenGL 3.0 is upward
compatible with earlier versions, meaning that any program that runs with a 2.1 or
earlier GL implementation will also run unchanged with a 3.0 GL implementation.
OpenGL 3.0 context creation is done using a window system binding API, and
on most platforms a new command, defined by extensions introduced along with
OpenGL 3.0, must be called to create a 3.0 context. Calling the older context
creation commands will return an OpenGL 2.1 context. When using a forward
compatible context, many OpenGL 2.1 features are not supported.
    Following are brief descriptions of changes and additions to OpenGL 3.0. De-
scriptions of changes and additions in earlier versions of OpenGL (versions 1.1,
1.2, 1.2.1, 1.3, 1.4, 1.5, 2.0, and 2.1) are omitted in this specification, but may be
found in the OpenGL 3.0 Specification, available on the World Wide Web at URL

                         http://www.opengl.org/registry/


F.1    New Features
New features in OpenGL 3.0, including the extension or extensions if any on which
they were based, include:

   • API support for the new texture lookup, texture format, and integer and un-
     signed integer capabilities of the OpenGL Shading Language 1.30 specifica-
     tion (GL_EXT_gpu_shader4).

   • Conditional rendering (GL_NV_conditional_render).




                                         441
F.2. DEPRECATION MODEL                                                       442


   • Fine control over mapping buffer subranges into client space and flushing
     modified data (GL_APPLE_flush_buffer_range).
   • Floating-point color and depth internal formats for textures and ren-
     derbuffers (GL_ARB_color_buffer_float, GL_NV_depth_buffer_-
     float, GL_ARB_texture_float, GL_EXT_packed_float, and GL_-
     EXT_texture_shared_exponent).

   • Framebuffer objects (GL_EXT_framebuffer_object).
   • Half-float (16-bit) vertex array and pixel data formats (GL_NV_half_float
     and GL_ARB_half_float_pixel).
   • Multisample  stretch blit functionality (GL_EXT_framebuffer_-
      multisample and GL_EXT_framebuffer_blit).

   • Non-normalized integer color internal formats for textures and renderbuffers
     (GL_EXT_texture_integer).
   • One- and two-dimensional layered texture targets (GL_EXT_texture_-
     array).

   • Packed depth/stencil internal formats for combined depth+stencil textures
     and renderbuffers (GL_EXT_packed_depth_stencil).
   • Per-color-attachment blend enables and color writemasks (GL_EXT_draw_-
     buffers2).

   • RGTC        specific   internal                 compressed          formats
     (GL_EXT_texture_compression_rgtc).
   • Single- and double-channel (R and RG) internal formats for textures and ren-
     derbuffers.
   • Transform feedback (GL_EXT_transform_feedback).
   • Vertex array objects (GL_APPLE_vertex_array_object).
   • sRGB framebuffer mode (GL_EXT_framebuffer_sRGB)


F.2    Deprecation Model
OpenGL 3.0 introduces a deprecation model in which certain features may be
marked as deprecated. The deprecation model is described in detail in appendix E,
together with a summary of features deprecated in OpenGL 3.0.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
F.3. CHANGED TOKENS                                                          443


          New Token Name                   Old Token Name
          COMPARE_REF_TO_TEXTURE           COMPARE_R_TO_TEXTURE
          MAX_VARYING_COMPONENTS           MAX_VARYING_FLOATS
          MAX_CLIP_DISTANCES               MAX_CLIP_PLANES
          CLIP_DISTANCEi                   CLIP_PLANEi

          Table F.1: New token names and the old names they replace.



F.3    Changed Tokens
New token names are introduced to be used in place of old, inconsistent names.
However, the old token names continue to be supported, for backwards compati-
bility with code written for previous versions of OpenGL. The new names, and the
old names they replace, are shown in table F.1.


F.4    Change Log
Minor corrections to the OpenGL 3.0 Specification were made after its initial re-
lease.
    Changes in the draft of September 23, 2008:

   • Changed ClearBuffer* in section 4.2.3 to use DEPTH and STENCIL
     buffer names. Changed GetFramebufferAttachmentParameteriv in sec-
     tion 6.1.16 to accept only DEPTH and STENCIL to identify default frame-
     buffer depth and stencil buffers, and only DEPTH_ATTACHMENT and
     STENCIL_ATTACMENT to identify framebuffer object depth and stencil
     buffers (bug 3744).

   Changes in the draft of September 18, 2008:

   • Added missing close-brace to ArrayElement pseudocode in section 2.8
     (bug 3897).

   • Noted in section 2.16 that BeginQuery will generate an INVALID_-
     OPERATION error when called with an existing query object name whose
     type does not match the specified target (bug 3712).

   • Add description of gl_ClipDistance to shader outputs in section 2.14.7
     and note that only one of gl_ClipVertex and gl_ClipDistance should
     be written by a shader (bug 3898).




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
F.4. CHANGE LOG                                                                  444


  • Changed ClearBuffer* in section 4.2.3 to indirect through the draw
    buffer state by specifying the buffer type and draw buffer number, rather
    than the attachment name; also changed to accept DEPTH_BUFFER /
    DEPTH_ATTACHMENT and STENCIL_BUFFER / STENCIL_ATTACHMENT in-
    terchangeably, to reduce inconsistency between clearing the default frame-
    buffer and framebuffer objects. Likewise changed GetFramebufferAttach-
    mentParameteriv in section 6.1.16 to accept DEPTH_BUFFER / DEPTH_-
    ATTACHMENT and STENCIL_BUFFER / STENCIL_ATTACMENT interchange-
    ably (bug 3744).

  • Add proper type suffix to query commands in tables 6.8 and 6.44 (Mark
    Kilgard).

  • Update deprecation list in section E.1 to itemize deprecated state for two-
    sided color selection and include per-texture-unit LOD bias (bug 3735).

  Changes in the draft of August 28, 2008:

  • Sections 2.9, 2.9.1; tables 2.7, 2.8, and 6.11 - move buffer map/unmap
    calls into their own subsection and rewrite MapBuffer in terms of Map-
    BufferRange. Add buffer state BUFFER_ACCESS_FLAGS, BUFFER_MAP_-
    OFFSET, BUFFER_MAP_LENGTH. Make MapBuffer and MapBufferRange
    errors consistent (bug 3601).

  • Section 2.10 - Extend INVALID_OPERATION error to any array pointer-
    setting command called to specify a client array while a vertex array object
    is bound, not just VertexAttrib*Pointer (bug 3696).

  • Sections 2.15.1, 4.1.2, 4.2.1, and 4.3.4 - define initial state when a context is
    bound with no default framebuffer - null viewport and scissor region, draw
    buffer = read buffer = NONE, max viewport dims = max(display size - if any,
    max renderbuffer size). Viewport/scissor language added to the GLX and
    WGL create context extension specs as well (bug 2941).

  • Section 2.18 - define “word-aligned” to be a multiple of 4 (e.g. 32 bits) (bug
    3624).

  • Section 5.4.1 - add MapBufferRange and FlushMappedBufferRange to
    commands not compiled in display lists (bug 3704).

  • Section 6.1.13 - Moved GetBufferParameteriv query from section 6.1.3
    and changed formal argument specifying the parameter name from value to
    pname (side effect of bug 3697).




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
F.5. CREDITS AND ACKNOWLEDGEMENTS                                                  445


    • Section 6.1.16 - Moved GetFramebufferAttachmentiv query from sec-
      tion 6.1.3. Querying framebuffer attachment parameters other than object
      type and name when no attachment is present is an INVALID_ENUM error.
      Querying texture parameters (level, cube map face, or layer) for a render-
      buffer attachment is also an INVALID_ENUM error (note that this was allowed
      in previous versions of the extension but the return values were not specified;
      it should clearly be an error as are other parameters that don’t exist for the
      type of attachment present). Also reorganized the description of this com-
      mand quite a bit to improve readability and remove redundancy and internal
      inconsistencies (bug 3697).

    • Section 6.1.17 - Moved GetRenderbufferParameteriv query from sec-
      tion 6.1.3 (side effect of bug 3697).

    • Appendix D.1 - add language to clarify that attachments to an object affect
      its reference count, and that object storage doesn’t go away until there are no
      references remaining (bug 3725).

    • Appendix E.1 - remove TEXTURE_BORDER_COLOR and CLAMP_TO_BORDER
      mode from the deprecated feature list; they were put in by accident (bug
      3750).

    • Appendix F - Cite GL_EXT_texture_array instead of GL_EXT_-
      geometry_shader4 as the source of 1D/2D array texture functionality. Fix
      a typo. Add change log relative to initial 3.0 spec release.


F.5    Credits and Acknowledgements
OpenGL 3.0 is the result of the contributions of many people and companies.
Members of the Khronos OpenGL ARB Working Group during the development
of OpenGL 3.0, including the company that they represented at the time of their
contributions, follow. Some major contributions made by individuals are listed to-
gether with their name, including specific functionality developed in the form of
new ARB extensions together with OpenGL 3.0. In addition, many people partic-
ipated in developing earlier vendor and EXT extensions on which the OpenGL 3.0
functionality is based in part; those individuals are listed in the respective extension
specifications in the OpenGL Extension Registry.

  Aaftab Munshi, Apple
  Alain Bouchard, Matrox
  Alexis Mather, AMD (Chair, ARB Marketing TSG)




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
F.5. CREDITS AND ACKNOWLEDGEMENTS                                         446


 Andreas Wolf, AMD
 Avi Shapira, Graphic Remedy
 Barthold Lichtenbelt, NVIDIA (Chair, Khronos OpenGL ARB Working Group)
 Benjamin Lipchak, AMD
 Benji Bowman, Imagination Technologies
 Bill Licea-Kane, AMD (Chair, ARB Shading Language TSG)
 Bob Beretta, Apple
 Brent Insko, Intel
 Brian Paul, Tungsten Graphics
 Bruce Merry, ARM (Detailed specification review)
 Cass Everitt, NVIDIA
 Chris Dodd, NVIDIA
 Daniel Horowitz, NVIDIA
 Daniel Koch, Transgaming (Framebuffer objects, half float vertex formats, and
      instanced rendering)
 Daniel Omachi, Apple
 Dave Shreiner, ARM
 Eric Boumaour, AMD
 Eskil Steenberg, Obsession
 Evan Hart, NVIDIA
 Folker Schamel, Spinor GMBH
 Gavriel State, Transgaming
 Geoff Stahl, Apple
 Georg Kolling, Imagination Technologies
 Gregory Prisament, NVIDIA
 Guillaume Portier, HI Corp
 Ian Romanick, IBM / Intel (Vertex array objects; GLX protocol)
 James Helferty, Transgaming (Instanced rendering)
 James Jones, NVIDIA
 Jamie Gennis, NVIDIA
 Jason Green, Transgaming
 Jeff Bolz, NVIDIA
 Jeff Juliano, NVIDIA
 Jeremy Sandmel, Apple (Chair, ARB Nextgen (OpenGL 3.0) TSG)
 John Kessenich, Intel (OpenGL Shading Language Specification Editor; depre-
      cation model)
 John Rosasco, Apple
 Jon Leech, Independent (Chair, ARB Ecosystem TSG; OpenGL API Specifica-
      tion Editor; R/RG image formats and new context creation APIs)
 Marc Olano, U. Maryland




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
F.5. CREDITS AND ACKNOWLEDGEMENTS                                        447


 Mark Callow, HI Corp
 Mark Kilgard, NVIDIA (Many extensions on which OpenGL 3.0 features were
     based)
 Matti Paavola, Nokia
 Michael Gold, NVIDIA (Framebuffer objects and instanced rendering)
 Neil Trevett, NVIDIA (President, Khronos Group)
 Nick Burns, Apple
 Nick Haemel, AMD
 Pat Brown, NVIDIA (Many extensions on which OpenGL 3.0 features were
     based; detailed specification review)
 Paul Martz, SimAuthor
 Paul Ramsey, Sun
 Pierre Boudier, AMD (Floating-point depth buffers)
 Rob Barris, Blizzard (Framebuffer object and map buffer range)
 Robert Palmer, Symbian
 Robert Simpson, AMD
 Steve Demlow, Vital Images
 Thomas Roell, NVIDIA
 Timo Suoranta, Futuremark
 Tom Longo, AMD
 Tom Olson, TI (Chair, Khronos OpenGL ES Working Group)
 Travis Bryson, Sun
 Yaki Tebeka, Graphic Remedy
 Yanjun Zhang, S3 Graphics
 Zack Rusin, Tungsten Graphics


    The ARB gratefully acknowledges administrative support by the members of
Gold Standard Group, including Andrew Riegel, Elizabeth Riegel, Glenn Freder-
icks, and Michelle Clark, and technical support from James Riordon, webmaster
of Khronos.org and OpenGL.org.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix G

Version 3.1

OpenGL version 3.1, released on March 24, 2009, is the ninth revision since the
original version 1.0.
    Unlike earlier versions of OpenGL, OpenGL 3.1 is not upward compatible with
earlier versions. The commands and interfaces identified as deprecated in OpenGL
3.0 (see appendix F) have been removed from OpenGL 3.1 entirely, with the
following exception:

   • Wide lines have not been removed, and calling LineWidth with values
     greater than 1.0 is not an error.

   Implementations may restore such removed features using the GL_ARB_-
compatibility extension discussed in section G.2.
   Following are brief descriptions of changes and additions to OpenGL 3.1.


G.1     New Features
New features in OpenGL 3.1, including the extension or extensions if any on which
they were based, include:

   • Support for OpenGL Shading Language 1.30 and 1.40.

   • Instanced rendering with a per-instance counter accessible to vertex shaders
     (GL_ARB_draw_instanced).

   • Data copying between buffer objects (GL_ARB_copy_buffer).

   • Primitive restart (GL_NV_primitive_restart). Because client en-
     able/disable no longer exists in OpenGL 3.1, the PRIMITIVE_RESTART




                                      448
G.2. DEPRECATION MODEL                                                             449


      state has become server state, unlike the NV extension where it is client
      state. As a result, the numeric values assigned to PRIMITIVE_RESTART and
      PRIMITIVE_RESTART_INDEX differ from the NV versions of those tokens.

   • At least 16 texture image units must be accessible to vertex shaders, in addi-
     tion to the 16 already guaranteed to be accessible to fragment shaders.

   • Texture buffer objects (GL_ARB_texture_buffer_object).

   • Rectangular textures (GL_ARB_texture_rectangle).

   • Uniform buffer objects (GL_ARB_uniform_buffer_object).

   • Signed normalized texture component formats.


G.2     Deprecation Model
The features marked as deprecated in OpenGL 3.0 (see section E) have been re-
moved from OpenGL 3.1 (with the exception of line widths greater than one, which
are retained).
    As described by the deprecation model, features removed from OpenGL 3.0
have been moved into the new extension GL_ARB_compatibility. If an imple-
mentation chooses to provide this extension, it restores all features deprecated by
OpenGL 3.0 and removed from OpenGL 3.1. This extension may only be provided
in an OpenGL 3.1 or later context version.
    Because of the complexity of describing this extension relative to the OpenGL
3.1 core specification, it is not written up as a separate document, unlike other ex-
tensions in the extension registry. Instead, an alternate version of this specification
document has been generated with the deprecated material still present, but marked
in a distinct color.
    No additional features are deprecated in OpenGL 3.1.


G.3     Change Log
Changes in the specification update of May 28, 2009:

   • Update MAX_CLIP_DISTANCES from 6 to 8 in section 2.20 and table 6.48,
     to match GLSL (bug 4803).

   • Accept null pointers in CompressedTexImage* (section 3.9.3) and treat
     them the same as for the corresponding TexImage* commands (bug 4863).




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
G.4. CREDITS AND ACKNOWLEDGEMENTS                                                  450


    • Relax error conditions when specifying RGTC format texture images (sec-
      tion 3.9.2) and subimages (section 3.9.3) so that non-power-of-two RGTC
      images may be specified (also see section C.1), and edits to partial tiles at
      the edge of such an image made (bug 4856).
    • Relaxed texture magnification switch-over point calculation in section 3.9.9
      (bug 4392).
    • Clarify initial value of stencil value masks in section 4.1.5 and table 6.24
      (bug 4378).
    • Change     FramebufferTextureLayer          in   section   4.4.2    to   generate
      INVALID_VALUE for negative layer only if texture is non-zero (bug
      4084).
    • Clarify RenderbufferStorageMultisample language in section 4.4.2 to al-
      low, but not require creation of multisampled integer renderbuffers with more
      one sample (bug 4396).
    • Added language to section 6.1.4 disallowing data-type format mismatches
      between internal and external texture formats in GetTexImage (bug 4163).
    • Change initial value of FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_-
      MAP_FACE in table 6.29 to NONE (bug 4407).

    • Brought extension list in appendix H.3 up to date and correctly described
      extensions introduced along with OpenGL 3.0 and OpenGL 3.1 which im-
      plement subsets of new functionality in those versions to enable older hard-
      ware.
    • Added missing contributors to the OpenGL 3.1 contributor list.


G.4     Credits and Acknowledgements
OpenGL 3.1 is the result of the contributions of many people and companies.
Members of the Khronos OpenGL ARB Working Group during the development
of OpenGL 3.1, including the company that they represented at the time of their
contributions, follow. Some major contributions made by individuals are listed to-
gether with their name, including specific functionality developed in the form of
new ARB extensions together with OpenGL 3.1. In addition, many people partic-
ipated in developing earlier vendor and EXT extensions on which the OpenGL 3.1
functionality is based in part; those individuals are listed in the respective extension
specifications in the OpenGL Extension Registry.




             OpenGL 3.1 with GL ARB compatibility - May 28, 2009
G.4. CREDITS AND ACKNOWLEDGEMENTS                                    451


 Alexis Mather, AMD (Chair, ARB Marketing TSG)
 Avi Shapira, Graphic Remedy
 Barthold Lichtenbelt, NVIDIA (Chair, Khronos OpenGL ARB Working Group)
 Benjamin Lipchak, Apple (Uniform buffer objects)
 Bill Licea-Kane, AMD (Chair, ARB Shading Language TSG; signed normalized
      texture formats)
 Brent Insko, Intel
 Brian Paul, Tungsten Graphics
 Bruce Merry, ARM (Detailed specification review)
 Christopher Webb, NVIDIA
 Daniel Koch, Transgaming
 Daniel Omachi, Apple
 Eric Werness, NVIDIA
 Gavriel State, Transgaming
 Geoff Stahl, Apple
 Gregory Roth, NVIDIA
 Ian Romanick, Intel
 James Helferty, Transgaming
 James Jones, NVIDIA
 Jeff Bolz, NVIDIA (Buffer to buffer copies)
 Jeremy Sandmel, Apple (Chair, ARB Nextgen (OpenGL 3.1) TSG; uniform
      buffer objects)
 John Kessenich, Intel (OpenGL Shading Language Specification Editor)
 John Rosasco, Apple (Uniform buffer objects)
 Jon Leech, Independent (OpenGL API Specification Editor)
 Mark Callow, HI Corp
 Mark Kilgard, NVIDIA (Many extensions on which OpenGL 3.0 features were
      based)
 Matt Craighead, NVIDIA
 Michael Gold, NVIDIA
 Neil Trevett, NVIDIA (President, Khronos Group)
 Nick Haemel, AMD
 Pat Brown, NVIDIA (Many extensions on which OpenGL 3.0 features were
      based; detailed specification review)
 Paul Martz, SimAuthor
 Pierre Boudier, AMD
 Rob Barris, Blizzard
 Tom Olson, TI (Chair, Khronos OpenGL ES Working Group)
 Yaki Tebeka, Graphic Remedy
 Yanjun Zhang, S3 Graphics




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
G.4. CREDITS AND ACKNOWLEDGEMENTS                                        452


    The ARB gratefully acknowledges administrative support by the members of
Gold Standard Group, including Andrew Riegel, Elizabeth Riegel, Glenn Freder-
icks, and Michelle Clark, and technical support from James Riordon, webmaster
of Khronos.org and OpenGL.org.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Appendix H

Extension Registry, Header Files,
and ARB Extensions

H.1     Extension Registry
Many extensions to the OpenGL API have been defined by vendors, groups of
vendors, and the OpenGL ARB. In order not to compromise the readability of
the GL Specification, such extensions are not integrated into the core language;
instead, they are made available online in the OpenGL Extension Registry, together
with extensions to window system binding APIs, such as GLX and WGL, and with
specifications for OpenGL, GLX, and related APIs.
    Extensions are documented as changes to a particular version of the Specifica-
tion. The Registry is available on the World Wide Web at URL

                        http://www.opengl.org/registry/


H.2     Header Files
Historically, C and C++ source code calling OpenGL was to #include a single
header file, <GL/gl.h>. In addition to the core OpenGL API, the APIs for all
extensions provided by an implementation were defined in this header.
     When platforms became common where the OpenGL SDK (library and header
files) were not necessarily obtained from the same source as the OpenGL driver,
such as Microsoft Windows and Linux, <GL/gl.h> could not always be kept
in sync with new core API versions and extensions supported by drivers. At this
time the OpenGL ARB defined a new header, <GL/glext.h>, which could be
obtained directly from the OpenGL Extension Registry (see section H.1). The




                                       453
H.3. ARB EXTENSIONS                                                             454


combination of <GL/gl.h> and <GL/glext.h> always defines APIs for the
latest core OpenGL version as well as for all extensions defined in the Registry.
     With the introduction of OpenGL 3.1, many features were removed from the
core API. The deprecation model does not allow reintroduction of these features ex-
cept via the special GL_ARB_compatibility extension (see section G.2). While
it is possible to continue using <GL/gl.h> and <GL/glext.h>, new header
files are defined for OpenGL 3.1 and future versions. The ARB recommends using
these headers for any new application which is written to the OpenGL 3.1 core
without using any of the features removed from OpenGL 3.0. The header files so
defined are:

   • <GL3/gl3.h>, which will always define the core API of the current ver-
     sion of OpenGL, and only that API. It does not include APIs for features
     removed by OpenGL 3.1. Initially it contains only the APIs in OpenGL 3.1.

   • <GL3/gl3ext.h>, which will always define APIs for registered exten-
     sions which may be provided by an OpenGL 3.1 implementation that does
     not support the GL_ARB_compatibility extension. Most currently de-
     fined extensions cannot be provided by such an implementation, since they
     depend on features no longer present in OpenGL 3.1.

    By using <GL3/gl3.h> and <GL3/gl3ext.h>, instead of the legacy
<GL/gl.h> and <GL/glext.h>, newly developed applications are given in-
creased protection against accidentally using a “legacy” feature that has been re-
moved from OpenGL 3.1. This can assist in developing applications on a GL
implementation that supports GL_ARB_compatibility when the application is
also intended to run on other platforms supporting only the core OpenGL 3.1 API.
    Developers should always be able to download <GL3/gl3.h> and
<GL3/gl3ext.h> from the Registry, with these headers replacing, or being used
in place of older versions that may be provided by a platform SDK.


H.3     ARB Extensions
OpenGL extensions that have been approved by the OpenGL Architectural Review
Board (ARB) are summarized in this section. ARB extensions are not required
to be supported by a conformant OpenGL implementation, but are expected to be
widely available; they define functionality that is likely to move into the required
feature set in a future revision of the specification.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                           455


H.3.1   Naming Conventions
To distinguish ARB extensions from core OpenGL features and from vendor-
specific extensions, the following naming conventions are used:

   • A unique name string of the form ”GL_ARB_name” is associated with each
     extension. If the extension is supported by an implementation, this string
     will be present in the EXTENSIONS string returned by GetString, and will
     be among the EXTENSIONS strings returned by GetStringi, as described in
     section 6.1.4.

   • All functions defined by the extension will have names of the form Func-
     tionARB

   • All enumerants defined by the extension will have names of the form
     NAME_ARB.

   • In additional to OpenGL extensions, there are also ARB extensions to the
     related GLX and WGL APIs. Such extensions have name strings prefixed by
     "GLX_" and "WGL_" respectively. Not all GLX and WGL ARB extensions
     are described here, but all such extensions are included in the registry.

H.3.2   Promoting Extensions to Core Features
ARB extensions can be promoted to required core features in later revisions of
OpenGL. When this occurs, the extension specifications are merged into the core
specification. Functions and enumerants that are part of such promoted extensions
will have the ARB affix removed.
     GL implementations of such later revisions should continue to export the name
strings of promoted extensions in the EXTENSIONS string and continue to support
the ARB-affixed versions of functions and enumerants as a transition aid.
     For descriptions of extensions promoted to core features in OpenGL 1.3 and
beyond, see the corresponding version of the OpenGL specification, or the de-
scriptions of that version in version-specific appendices to later versions of the
specification.

H.3.3   Multitexture
The name string for multitexture is GL_ARB_multitexture. It was promoted to
a core feature in OpenGL 1.3.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                               456


H.3.4    Transpose Matrix
The name string for transpose matrix is GL_ARB_transpose_matrix. It was
promoted to a core feature in OpenGL 1.3.

H.3.5    Multisample
The name string for multisample is GL_ARB_multisample. It was promoted to a
core feature in OpenGL 1.3.

H.3.6    Texture Add Environment Mode
The name string for texture add mode is GL_ARB_texture_env_add. It was
promoted to a core feature in OpenGL 1.3.

H.3.7    Cube Map Textures
The name string for cube mapping is GL_ARB_texture_cube_map. It was pro-
moted to a core feature in OpenGL 1.3.

H.3.8    Compressed Textures
The name string for compressed textures is GL_ARB_texture_compression. It
was promoted to a core feature in OpenGL 1.3.

H.3.9    Texture Border Clamp
The name string for texture border clamp is GL_ARB_texture_border_clamp.
It was promoted to a core feature in OpenGL 1.3.

H.3.10    Point Parameters
The name string for point parameters is GL_ARB_point_parameters. It was
promoted to a core features in OpenGL 1.4.

H.3.11    Vertex Blend
Vertex blending replaces the single model-view transformation with multiple ver-
tex units. Each unit has its own transform matrix and an associated current weight.
Vertices are transformed by all the enabled units, scaled by their respective weights,
and summed to create the eye-space vertex. Normals are similarly transformed by
the inverse transpose of the model-view matrices.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                            457


   The name string for vertex blend is GL_ARB_vertex_blend.

H.3.12    Matrix Palette
Matrix palette extends vertex blending to include a palette of model-view matrices.
Each vertex may be transformed by a different set of matrices chosen from the
palette.
    The name string for matrix palette is GL_ARB_matrix_palette.

H.3.13    Texture Combine Environment Mode
The name string for texture combine mode is GL_ARB_texture_env_combine.
It was promoted to a core feature in OpenGL 1.3.

H.3.14    Texture Crossbar Environment Mode
The name string for texture crossbar is GL_ARB_texture_env_crossbar. It
was promoted to a core features in OpenGL 1.4.

H.3.15    Texture Dot3 Environment Mode
The name string for DOT3 is GL_ARB_texture_env_dot3. It was promoted to
a core feature in OpenGL 1.3.

H.3.16    Texture Mirrored Repeat
The name string for texture mirrored repeat is GL_ARB_texture_mirrored_-
repeat. It was promoted to a core feature in OpenGL 1.4.


H.3.17    Depth Texture
The name string for depth texture is GL_ARB_depth_texture. It was promoted
to a core feature in OpenGL 1.4.

H.3.18    Shadow
The name string for shadow is GL_ARB_shadow. It was promoted to a core feature
in OpenGL 1.4.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                               458


H.3.19    Shadow Ambient
Shadow ambient extends the basic image-based shadow functionality by allowing
a texture value specified by the TEXTURE_COMPARE_FAIL_VALUE_ARB texture
parameter to be returned when the texture comparison fails. This may be used for
ambient lighting of shadowed fragments and other advanced lighting effects.
    The name string for shadow ambient is GL_ARB_shadow_ambient.

H.3.20    Window Raster Position
The name string for window raster position is GL_ARB_window_pos. It was pro-
moted to a core feature in OpenGL 1.4.

H.3.21    Low-Level Vertex Programming
Application-defined vertex programs may be specified in a new low-level program-
ming language, replacing the standard fixed-function vertex transformation, light-
ing, and texture coordinate generation pipeline. Vertex programs enable many new
effects and are an important first step towards future graphics pipelines that will be
fully programmable in an unrestricted, high-level shading language.
    The name string for low-level vertex programming is GL_ARB_vertex_-
program.


H.3.22    Low-Level Fragment Programming
Application-defined fragment programs may be specified in the same low-level lan-
guage as GL_ARB_vertex_program, replacing the standard fixed-function vertex
texturing, fog, and color sum operations.
    The name string for low-level fragment programming is GL_ARB_-
fragment_program.


H.3.23    Buffer Objects
The name string for buffer objects is GL_ARB_vertex_buffer_object. It was
promoted to a core feature in OpenGL 1.5.

H.3.24    Occlusion Queries
The name string for occlusion queries is GL_ARB_occlusion_query. It was
promoted to a core feature in OpenGL 1.5.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                     459


H.3.25   Shader Objects
The name string for shader objects is GL_ARB_shader_objects. It was pro-
moted to a core feature in OpenGL 2.0.

H.3.26   High-Level Vertex Programming
The name string for high-level vertex programming is GL_ARB_vertex_shader.
It was promoted to a core feature in OpenGL 2.0.

H.3.27   High-Level Fragment Programming
The name string for high-level fragment programming is GL_ARB_fragment_-
shader. It was promoted to a core feature in OpenGL 2.0.


H.3.28   OpenGL Shading Language
The name string for the OpenGL Shading Language is GL_ARB_shading_-
language_100. The presence of this extension string indicates that programs
written in version 1 of the Shading Language are accepted by OpenGL. It was
promoted to a core feature in OpenGL 2.0.

H.3.29   Non-Power-Of-Two Textures
The name string for non-power-of-two textures is GL_ARB_texture_non_-
power_of_two. It was promoted to a core feature in OpenGL 2.0.


H.3.30   Point Sprites
The name string for point sprites is GL_ARB_point_sprite. It was promoted to
a core feature in OpenGL 2.0.

H.3.31   Fragment Program Shadow
Fragment program shadow extends low-level fragment programs defined with
GL_ARB_fragment_program to add shadow 1D, 2D, and 3D texture targets, and
remove the interaction with GL_ARB_shadow.
   The name string for fragment program shadow is GL_ARB_fragment_-
program_shadow.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                              460


H.3.32    Multiple Render Targets
The name string for multiple render targets is GL_ARB_draw_buffers. It was
promoted to a core feature in OpenGL 2.0.

H.3.33    Rectangular Textures
Rectangular textures define a new texture target TEXTURE_RECTANGLE_ARB that
supports 2D textures without requiring power-of-two dimensions. Rectangular
textures are useful for storing video images that do not have power-of-two sizes
(POTS). Resampling artifacts are avoided and less texture memory may be re-
quired. They are are also useful for shadow maps and window-space texturing.
These textures are accessed by dimension-dependent (aka non-normalized) texture
coordinates.
    Rectangular textures are a restricted version of non-power-of-two textures. The
differences are that rectangular textures are supported only for 2D; they require a
new texture target; and the new target uses non-normalized texture coordinates.
    The name string for texture rectangles is GL_ARB_texture_rectangle. It
was promoted to a core feature in OpenGL 3.1.

H.3.34    Floating-Point Color Buffers
Floating-point color buffers can represent values outside the normal [0, 1] range
of colors in the fixed-function OpenGL pipeline. This group of related exten-
sions enables controlling clamping of vertex colors, fragment colors throughout the
pipeline, and pixel data read back to client memory, and also includes WGL and
GLX extensions for creating frame buffers with floating-point color components
(referred to in GLX as framebuffer configurations, and in WGL as pixel formats).
    The name strings for floating-point color buffers are GL_ARB_color_-
buffer_float,        GLX_ARB_fbconfig_float,             and WGL_ARB_pixel_-
format_float. GL_ARB_color_buffer_float was promoted to a core
feature in OpenGL 3.0.

H.3.35    Half-Precision Floating Point
This extension defines the representation of a 16-bit floating point data format, and
a corresponding type argument which may be used to specify and read back pixel
and texture images stored in this format in client memory. Half-precision floats are
smaller than full precision floats, but provide a larger dynamic range than similarly
sized (short) data types.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                             461


   The name string for half-precision floating point is GL_ARB_half_float_-
pixel. It was promoted to a core feature in OpenGL 3.0.


H.3.36    Floating-Point Textures
Floating-point textures stored in both 32- and 16-bit formats may be defined using
new internalformat arguments to commands which specify and read back texture
images.
   The name string for floating-point textures is GL_ARB_texture_float. It
was promoted to a core feature in OpenGL 3.0.

H.3.37    Pixel Buffer Objects
The buffer object interface is expanded by adding two new binding targets for
buffer objects, the pixel pack and unpack buffers. This permits buffer objects to be
used to store pixel data as well as vertex array data. Pixel-drawing and -reading
commands using data in pixel buffer objects may operate at greatly improved per-
formance compared to data in client memory.
    The name string for pixel buffer objects is GL_ARB_pixel_buffer_object.
It was promoted to a core feature in OpenGL 2.1.

H.3.38    Floating-Point Depth Buffers
The name string for floating-point depth buffers is GL_ARB_depth_buffer_-
float. This extension is equivalent to new core functionality introduced in
OpenGL 3.0, based on the earlier GL_NV_depth_buffer_float extension, and
is provided to enable this functionality in older drivers.

H.3.39    Instanced Rendering
The name string for instanced rendering is GL_ARB_draw_instanced. It was
promoted to a core feature in OpenGL 3.1.

H.3.40    Framebuffer Objects
The name string for framebuffer objects is GL_ARB_framebuffer_object. This
extension is equivalent to new core functionality introduced in OpenGL 3.0, based
on the earlier GL_EXT_framebuffer_object, GL_EXT_framebuffer_-
multisample, and GL_EXT_framebuffer_blit extensions, and is provided
to enable this functionality in older drivers.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                          462


H.3.41    sRGB Framebuffers
The name string for sRGB framebuffers is GL_ARB_framebuffer_sRGB. It was
promoted to a core feature in OpenGL 3.0. This extension is equivalent to new
core functionality introduced in OpenGL 3.0, based on the earlier GL_EXT_-
framebuffer_sRGB extension, and is provided to enable this functionality in
older drivers.
    To create sRGB format surface for use on display devices, an additional pixel
format (config) attribute is required in the window system integration layer. The
name strings for the GLX and WGL sRGB pixel format interfaces are GLX_ARB_-
framebuffer_sRGB and WGL_ARB_framebuffer_sRGB respectively.


H.3.42    Geometry Shaders
This extension defines a new shader type called a geometry shader. Geometry
shaders are run after vertices are transformed, but prior to the remaining fixed-
function vertex processing, and may generate new vertices for, or remove vertices
from the primitive assembly process.
   The name string for geometry shaders is GL_ARB_geometry_shader4.

H.3.43    Half-Precision Vertex Data
The name string for half-precision vertex data GL_ARB_half_float_vertex.
This extension is equivalent to new core functionality introduced in OpenGL 3.0,
based on the earlier GL_NV_half_float extension, and is provided to enable this
functionality in older drivers.

H.3.44    Instanced Rendering
.
   This instanced rendering interface is a less-capable form of GL_ARB_draw_-
instanced which can be supported on older hardware.
   The name string for instance rendering is GL_ARB_instanced_arrays.

H.3.45    Flexible Buffer Mapping
The name string for flexible buffer mapping is GL_ARB_map_buffer_range.
This extension is equivalent to new core functionality introduced in OpenGL 3.0,
based on the earlier GL_APPLE_flush_buffer_range extension, and is pro-
vided to enable this functionality in older drivers.




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                            463


H.3.46    Texture Buffer Objects
The name string for texture buffer objects is GL_ARB_texture_buffer_-
object. It was promoted to a core feature in OpenGL 3.1.


H.3.47    RGTC Texture Compression Formats
The name string for RGTC texture compression formats is GL_ARB_texture_-
compression_rgtc. This extension is equivalent to new core functionality intro-
duced in OpenGL 3.0, based on the earlier GL_EXT_texture_compression_-
rgtc extension, and is provided to enable this functionality in older drivers.
   It was promoted to a core feature in OpenGL 3.0.

H.3.48    One- and Two-Component Texture Formats
The name string for one- and two-component texture formats is GL_ARB_-
texture_rg. It was promoted to a core feature in OpenGL 3.0. This extension is
equivalent to new core functionality introduced in OpenGL 3.0, and is provided to
enable this functionality in older drivers.

H.3.49    Vertex Array Objects
The name string for vertex array objects is GL_ARB_vertex_array_object.
This extension is equivalent to new core functionality introduced in OpenGL 3.0,
based on the earlier GL_APPLE_vertex_array_object extension, and is pro-
vided to enable this functionality in older drivers.
    It was promoted to a core feature in OpenGL 3.0.

H.3.50    Versioned Context Creation
Starting with OpenGL 3.0, a new context creation interface is required in the win-
dow system integration layer. This interface specifies the context version required
as well as other attributes of the context.
    The name strings for the GLX and WGL context creation interfaces are GLX_-
ARB_create_context and WGL_ARB_create_context respectively.


H.3.51    Uniform Buffer Objects
The name string for uniform buffer objects is GL_ARB_uniform_buffer_-
object. This extension is equivalent to new core functionality introduced in
OpenGL 3.1 and is provided to enable this functionality in older drivers.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
H.3. ARB EXTENSIONS                                                             464


H.3.52    Restoration of features removed from OpenGL 3.0
OpenGL 3.1 removes a large number of features that were marked deprecated
in OpenGL 3.0 (see appendix G.2). GL implementations needing to maintain
these features to support existing applications may do so, following the depreca-
tion model, by exporting an extension string indicating those features are present.
Applications written for OpenGL 3.1 should not depend on any of the features cor-
responding to this extension, since they will not be available on all platforms with
3.1 implementations.
    The name string for restoration of features deprecated by OpenGL 3.0 is GL_-
ARB_compatibility.


H.3.53    Fast Buffer-to-Buffer Copies
The name string for fast buffer-to-buffer copies is GL_ARB_copy_buffer. This
extension is equivalent to new core functionality introduced in OpenGL 3.1 and is
provided to enable this functionality in older drivers.

H.3.54    Shader Texture Level of Detail Control
The name string for shader texture level of detail control is GL_ARB_shader_-
texture_lod. This extension is equivalent to new core functions introduced in
OpenGL Shading Language 1.30 and is provided to enable this functionality in
older versions of the shading language.




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
Index

x, 400                             ACCUM    ALPHA BITS, 302
x BIAS, 154, 396                   ACCUM    BLUE BITS, 302
x BITS, 418                        ACCUM    BUFFER BIT, 282, 364, 439
x SCALE, 154, 396                  ACCUM    CLEAR VALUE, 389
x SIZE, 400                        ACCUM    GREEN BITS, 302
*CopyBufferSubData, 50             ACCUM    RED BITS, 302
*GetString, 350                    ACTIVE   ATTRIBUTE MAX -
*GetStringi, 351                           LENGTH, 82, 356, 404
*MapBuffer, 49                     ACTIVE ATTRIBUTES, 82, 356, 403
*MapBufferRange, 46                ACTIVE TEXTURE, 27, 60, 123, 193,
*Pointer, 53                               194, 240, 322, 340, 385
-, 402–404, 412                    ACTIVE UNIFORM BLOCK -
–, 367, 368, 419                           MAX NAME LENGTH, 356,
419                                        405
2D, 330, 331, 419                  ACTIVE UNIFORM BLOCKS,             86,
2 BYTES, 333                               87, 356, 405
3D, 330, 331                       ACTIVE UNIFORM -
3D COLOR, 330, 331                         MAX LENGTH, 89, 90, 356,
3D COLOR TEXTURE, 330, 331                 403
3 BYTES, 333                       ACTIVE UNIFORMS, 89, 90, 356, 403
4D COLOR TEXTURE, 330, 331         ActiveTexture, 99, 193, 194, 249
4 BYTES, 333                       ADD, 241, 243, 244, 286
                                   ADD SIGNED, 244
1, 382                             ALIASED LINE WIDTH RANGE,
2, 382                                     413
3, 163, 164, 382                   ALIASED POINT SIZE RANGE, 412
4, 163, 164                        ALL ATTRIB BITS, 363, 364, 440
                                   ALPHA, 154, 168, 183, 184, 196, 200,
ACCUM, 286                                 203, 222, 223, 241–243, 246,
Accum, 114, 128, 285, 286, 439             272, 291, 295, 313, 345, 384,
ACCUM x BITS, 418                          392, 396, 397, 399, 418, 438
ACCUM * BITS, 439                  ALPHA12, 200




                                 465
INDEX                                                                       466


ALPHA16, 200                               BeginConditionalRender, 114, 115
ALPHA4, 200                                BeginQuery, 113, 118, 268, 443
ALPHA8, 198, 200                           BeginTransformFeedback, 115–118
ALPHA BIAS, 181                            BGR, 168, 291, 295
ALPHA BITS, 318, 439                       BGR INTEGER, 168
ALPHA INTEGER, 168                         BGRA, 168, 171, 176, 291
ALPHA SCALE, 180, 241, 386                 BGRA INTEGER, 168
ALPHA TEST, 264, 387, 439                  BindAttribLocation, 83, 335
ALPHA TEST FUNC, 387                       BindBuffer, 42, 52, 98, 116, 220, 334
ALPHA TEST REF, 387                        BindBufferBase, 98, 116, 118, 334
AlphaFunc, 265, 439                        BindBufferRange, 98, 99, 116–118, 334
ALWAYS, 222, 247, 265–267, 387             BindFragDataLocation, 257, 258, 335
AMBIENT, 71, 72, 74, 377, 378              BindFramebuffer, 301, 303, 315, 334
AMBIENT AND DIFFUSE, 71, 72, 74            BindRenderbuffer, 304, 305, 334
AND, 275                                   BindTexture, 99, 194, 237–239
AND INVERTED, 275                          BindVertexArray, 53, 334
AND REVERSE, 275                           BITMAP, 147, 156, 159, 165, 167, 178,
Antialiasing, 144                                  190, 293, 346, 438
AreTexturesResident, 239, 334, 439         Bitmap, 99, 114, 128, 190, 191, 256,
ARRAY BUFFER, 43, 51, 54                           438
ARRAY BUFFER BINDING, 51, 373              BITMAP TOKEN, 331
ArrayElement, 26, 34–37, 51, 106, 332,     BLEND, 241, 243, 269, 273, 274, 388
         443                               BLEND COLOR, 388
ATTACHED SHADERS, 356, 357, 403            BLEND DST ALPHA, 388
AttachShader, 79, 335                      BLEND DST RGB
ATTRIB STACK DEPTH, 419, 440                       (v1.3:BLEND DST), 388
AUTO NORMAL, 103, 323, 401                 BLEND EQUATION ALPHA, 388
AUXi, 277–279, 360, 439                    BLEND EQUA-
AUX0, 277                                          TION RGB (v1.5: BLEND -
AUX BUFFERS, 277, 302, 418                         EQUATION), 388
                                           BLEND SRC ALPHA, 388
BACK, 70, 71, 73, 146, 148, 266, 269,      BLEND SRC RGB
         277, 278, 280–282, 284, 290,              (v1.3:BLEND SRC), 388
         300, 341, 380, 438                BlendColor, 271
BACK LEFT, 278, 279, 360                   BlendEquation, 269
BACK RIGHT, 278, 279, 360                  BlendEquationSeparate, 269
Begin, 18, 22–26, 35–37, 54, 71, 74, 76,   BlendFunc, 270
         99, 108, 114, 116, 138, 141,      BlendFuncSeparate, 270
         145, 148, 256, 316, 317, 324,     BlitFramebuffer, 287, 297, 299, 312,
         325, 330, 436                             335




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                     467


BLUE, 154, 168, 291, 295, 384, 392,   CLAMP FRAGMENT COLOR, 179,
          396, 397, 399, 418                   298, 376, 437
BLUE BIAS, 181                        CLAMP READ COLOR, 292, 376
BLUE BITS, 318, 439                   CLAMP TO BORDER, 222, 228, 445
BLUE INTEGER, 168                     CLAMP TO EDGE, 222, 228, 236, 298
BLUE SCALE, 180                       CLAMP VERTEX COLOR, 75, 376,
BOOL, 91                                       437
bool, 91, 95                          ClampColor, 75, 179, 292, 437
BOOL VEC2, 91                         CLEAR, 275
BOOL VEC3, 91                         Clear, 114, 128, 282, 283, 285, 439
BOOL VEC4, 91                         ClearAccum, 283, 439
BUFFER ACCESS, 43, 45, 48, 374        ClearBuffer, 285
BUFFER ACCESS FLAGS, 43, 45, 48,      ClearBuffer*, 114, 128, 443, 444
          50, 374, 444                ClearBuffer{if ui}v, 284, 285
BUFFER MAP LENGTH, 43, 45, 48,        ClearBufferfi, 284, 285
          50, 374, 444                ClearBufferfv, 284, 285
BUFFER MAP OFFSET, 43, 45, 48,        ClearBufferiv, 284, 285
          50, 374, 444                ClearBufferuiv, 284
BUFFER MAP POINTER, 43, 45, 48,       ClearColor, 283, 284
          50, 353, 354, 374           ClearDepth, 283–285
BUFFER MAPPED, 43, 45, 48, 50, 374    ClearIndex, 283
BUFFER SIZE, 43, 45, 46, 48, 49, 98,  ClearStencil, 283–285
          116, 374                    CLIENT ACTIVE TEXTURE,               33,
BUFFER USAGE, 43, 45, 47, 374                  340, 373
BufferData, 44, 45, 85, 334, 432      CLIENT ALL ATTRIB BITS,             363,
BufferSubData, 46, 85, 334, 432                364, 440
bvec2, 91, 94                         CLIENT ATTRIB STACK DEPTH,
bvec3, 91                                      419, 440
bvec4, 91                             CLIENT PIXEL STORE BIT, 364
BYTE, 31, 167, 293, 294, 333          CLIENT VERTEX ARRAY BIT, 364
                                      ClientActiveTexture, 26, 33, 334, 436
C3F V3F, 39, 40                       CLIP DISTANCEi, 120, 375, 443
C4F N3F V3F, 39, 40                   CLIP DISTANCE0, 120
C4UB V2F, 39, 40                      CLIP PLANEi, 119, 375, 443
C4UB V3F, 39, 40                      ClipPlane, 119, 437
CallList, 26, 332, 333, 440           COEFF, 342, 401
CallLists, 26, 333, 440               COLOR, 56, 60, 158, 162, 163, 209,
CCW, 145, 380                                  284, 285, 295
CheckFramebufferStatus, 315, 316, 334 Color, 26, 28, 64, 74, 81, 114, 122
CLAMP, 222, 227, 228, 438             Color*, 436




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                     468


Color3, 28                             COLOR TABLE BLUE SIZE, 347
Color4, 28                             COLOR TABLE FORMAT, 347, 397
Color[size][type]v, 34                 COLOR TABLE GREEN SIZE, 347
COLOR ARRAY, 33, 41, 369               COLOR TABLE INTENSITY SIZE,
COLOR ARRAY BUFFER BIND-                        347
         ING, 372                      COLOR TABLE LUMINANCE SIZE,
COLOR ARRAY POINTER, 350, 369                   347
COLOR ARRAY SIZE, 369                  COLOR TABLE RED SIZE, 347
COLOR ARRAY STRIDE, 369                COLOR TABLE SCALE,             156–158,
COLOR ARRAY TYPE, 369                           347, 397
COLOR ATTACHMENTi, 277, 278, COLOR TABLE WIDTH, 347, 397
         290, 308, 314                 COLOR WRITEMASK, 281, 389
COLOR ATTACHMENTm, 277, 280            ColorMask, 281, 282
COLOR ATTACHMENTn, 302                 ColorMaski, 281
COLOR ATTACHMENT0, 277, 280, ColorMaterial, 71, 73, 74, 323, 425, 437
         290, 302                      ColorPointer, 26, 31, 32, 41, 334, 436
COLOR BUFFER BIT, 282, 285, 297, ColorSubTable, 152, 158
         298, 364                      ColorTable, 152, 156–160, 163, 164,
COLOR CLEAR VALUE, 389                          187, 188, 335
COLOR INDEX, 147, 156, 159, 165, ColorTableParameter, 157
         168, 178, 181, 190, 291, 295, ColorTableParameterfv, 156
         345, 346, 436                 Colorub, 122
COLOR INDEXES, 72, 75, 378             Colorui, 122
COLOR LOGIC OP, 274, 388               Colorus, 122
COLOR MATERIAL, 71, 74, 377, 437 COMBINE, 241, 244, 249
COLOR MATERIAL FACE, 377               COMBINE ALPHA, 241, 244, 245,
COLOR MATERIAL PARAMETER,                       385
         377                           COMBINE RGB, 241, 244, 245, 385
COLOR MATRIX, 347                      COMPARE R TO TEXTURE, 443
COLOR MATRIX                           COMPARE REF TO TEXTURE, 222,
         (TRANSPOSE COLOR MATRIX),              246, 443
         375                           COMPILE, 332, 425
COLOR MATRIX STACK DEPTH,              COMPILE AND EXECUTE, 332, 333
         347, 375                      COMPILE STATUS, 78, 355, 402
COLOR SUM, 251, 376, 439               CompileShader, 78, 335
COLOR TABLE, 156, 159, 182, 397        COMPRESSED ALPHA, 203
COLOR TABLE x SIZE, 397                COMPRESSED INTENSITY, 203
COLOR TABLE ALPHA SIZE, 347            COMPRESSED LUMINANCE, 203
COLOR TABLE BIAS, 156, 157, 347, COMPRESSED LUMINANCE AL-
         397                                    PHA, 203




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                 469


COMPRESSED RED, 203                  CONVOLUTION xD, 398
COMPRESSED RED RGTC1,         198,   CONVOLUTION 1D, 160–162, 182,
       203, 428–430                          207, 348, 398
COMPRESSED RG, 203                   CONVOLUTION 2D, 159–161, 183,
COMPRESSED RG RGTC2,          198,           206, 348, 398
       203, 430                      CONVOLUTION -
COMPRESSED RGB, 203                          BORDER COLOR, 185, 348,
COMPRESSED RGBA, 203                         398
COMPRESSED SIGNED -                  CONVOLUTION BORDER MODE,
       RED RGTC1, 198, 203, 429,             184, 348, 398
       430                           CONVOLUTION FILTER BIAS, 159–
COMPRESSED SIGNED RG -                       161, 348, 398
       RGTC2, 198, 203, 430          CONVOLUTION FILTER SCALE,
COMPRESSED SLUMINANCE, 203,                  159–162, 348, 398
       247                           CONVOLUTION FORMAT, 348, 398
COMPRESSED SLUMINANCE AL-            CONVOLUTION HEIGHT, 348, 398
       PHA, 203, 247                 CONVOLUTION WIDTH, 348, 398
COMPRESSED SRGB, 203, 247            ConvolutionFilter1D, 152, 160–162
COMPRESSED SRGB ALPHA, 203,          ConvolutionFilter2D, 152, 159–162
       247                           ConvolutionParameter, 160, 184
COMPRESSED TEXTURE FOR-              ConvolutionParameterfv, 160, 185
       MATS, 197, 413                ConvolutionParameteriv, 161, 185
CompressedTexImage, 217              COORD REPLACE, 133, 136, 385
CompressedTexImagenD, 215            COPY, 275, 388
CompressedTexImage*, 316, 449        COPY INVERTED, 275
CompressedTexImage1D, 214–217        COPY PIXEL TOKEN, 331
CompressedTexImage2D, 214–217        COPY READ BUFFER, 43, 51, 419
CompressedTexImage3D, 214–217        COPY WRITE BUFFER, 43, 51, 419
CompressedTexSubImagenD, 217         CopyColorSubTable, 158, 295
CompressedTexSubImage1D, 216–218     CopyColorTable, 157, 158, 295
CompressedTexSubImage2D, 216–218     CopyConvolutionFilter*, 295
CompressedTexSubImage3D, 216–218     CopyConvolutionFilter1D, 162
CONSTANT, 243, 245, 386              CopyConvolutionFilter2D, 161, 162
CONSTANT ALPHA, 272                  CopyPixels, 114, 128, 151, 154, 157,
CONSTANT ATTENUATION, 72, 378                158, 161, 162, 183, 287, 295–
CONSTANT BORDER, 184–186                     298, 329, 439
CONSTANT COLOR, 272                  CopyTexImage, 317, 439
CONTEXT FLAG FORWARD COM-            CopyTexImage*, 295, 308, 312, 313,
       PATIBLE BIT, 351                      316
CONTEXT FLAGS, 351, 414              CopyTexImage1D, 183, 210, 211, 214,




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                 470


        231                                    407
CopyTexImage2D, 183, 209–211, 214,   CW, 145
        231
CopyTexImage3D, 211                  DECAL, 241, 242
CopyTexSubImage, 317                 DECR, 266
CopyTexSubImage*, 214, 218, 295,     DECR WRAP, 266
        308                          DELETE STATUS, 79, 355, 356, 402,
CopyTexSubImage1D, 183, 210, 211,            403
        213, 214                     DeleteBuffers, 42, 44, 334
CopyTexSubImage2D, 183, 210–214      DeleteFramebuffers, 301, 303, 334
CopyTexSubImage3D, 183, 210, 211,    DeleteLists, 334, 440
        213, 214                     DeleteProgram, 81, 335
CreateProgram, 79, 335               DeleteQueries, 113, 114, 334
CreateShader, 78, 335                DeleteRenderbuffers, 304, 316, 335
CULL FACE, 146, 380                  DeleteShader, 79, 335
CULL FACE MODE, 380                  DeleteTextures, 238, 316, 334
CullFace, 145, 146, 150              DeleteVertexArrays, 53, 334
CURRENT BIT, 364                     DEPTH, 209, 284, 285, 295, 360, 384,
CURRENT COLOR, 368                           392, 396, 443
CURRENT FOG COORD, 368               DEPTH24 STENCIL8, 198, 203
CURRENT INDEX, 368                   DEPTH32F STENCIL8, 198, 203
CURRENT NORMAL, 368                  DEPTH ATTACHMENT, 302, 308,
CURRENT PROGRAM, 403                         314, 443, 444
CURRENT QUERY, 352, 419              DEPTH BIAS, 154, 181
CURRENT RASTER COLOR, 368            DEPTH BITS, 297, 318, 418, 439
CURRENT RASTER DISTANCE,             DEPTH BUFFER, 444
        368                          DEPTH BUFFER BIT, 282, 285, 297–
CURRENT RASTER INDEX, 368                    299, 364
CURRENT RASTER POSITION, 368         DEPTH CLEAR VALUE, 389
CURRENT RASTER POSITION -            DEPTH COMPONENT, 106, 156, 157,
        VALID, 368                           159, 168, 178, 196, 203, 246,
CURRENT RASTER SECONDARY -                   248, 255, 289, 291, 295, 297,
        COLOR, 368                           313, 344, 347–349
CURRENT RASTER TEXTURE CO-           DEPTH COMPONENT16, 198, 203
        ORDS, 123, 368, 424          DEPTH COMPONENT24, 198, 203
CURRENT SECONDARY COLOR,             DEPTH COMPONENT32, 203
        368                          DEPTH COMPONENT32F, 198, 203
CURRENT TEXTURE COORDS, 27,          DEPTH FUNC, 388
        368                          DEPTH RANGE, 375
CURRENT VERTEX ATTRIB, 358,          DEPTH SCALE, 154, 180




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                           471


DEPTH STENCIL, 106, 156, 157, 159,          DRAW FRAMEBUFFER -
         165, 168, 171, 176–178, 180,              BINDING, 25, 178, 191, 230,
         195, 196, 203, 209, 234, 246,             277, 279, 297, 299, 303, 317,
         248, 255, 284, 285, 287, 289,             318, 390
         291, 295, 297, 307, 310, 313,      DRAW PIXEL TOKEN, 331
         344                                DrawArrays, 36, 38, 51, 53, 106, 332
DEPTH STENCIL ATTACHMENT,                   DrawArraysInstanced, 38
         307, 308, 310, 360                 DrawBuffer, 275–278, 280, 282, 285
DEPTH TEST, 267, 388                        DrawBuffers, 276, 279, 280
DEPTH TEXTURE MODE, 222, 237,               DrawElements, 37–39, 52, 53, 106, 116,
         243, 246, 383, 438                        332
DEPTH WRITEMASK, 389                        DrawElementsInstanced, 39, 52
DepthFunc, 267, 287                         DrawPixels, 99, 114, 118, 128, 147,
DepthMask, 281, 282, 287                           151–154, 156, 159, 170, 178–
DepthRange, 111, 125, 339, 425                     180, 183, 189, 190, 256, 287,
DetachShader, 79, 335                              295, 329, 438
dFdx, 337                                   DrawRangeElements, 38, 52, 106, 332,
dFdy, 337                                          413
DIFFUSE, 71, 72, 377, 378                   DST ALPHA, 272
Disable, 35, 60, 61, 64, 66, 70, 71, 120,   DST COLOR, 272
         128, 131–133, 138, 141, 145,       DYNAMIC COPY, 43, 45
         146, 148, 150, 187–189, 194,       DYNAMIC DRAW, 43, 45
         248, 249, 251, 263–265, 267,       DYNAMIC READ, 43, 45
         269, 274, 322, 323, 437–439
DisableClientState, 26, 33, 41, 334, 436    EDGE FLAG, 368
Disablei, 269                               EDGE FLAG ARRAY, 33, 41, 371
DisableVertexAttribArray, 33, 334, 358      EDGE FLAG ARRAY BUFFER -
DITHER, 274, 388                                     BINDING, 372
DOMAIN, 342, 401                            EDGE FLAG ARRAY POINTER,
DONT CARE, 336, 410                                  350, 371
DOT3 RGB, 244                               EDGE FLAG ARRAY STRIDE, 371
DOT3 RGBA, 244                              EdgeFlag, 25, 26
DOUBLE, 31, 34, 35                          EdgeFlag*, 436
DOUBLEBUFFER, 418                           EdgeFlagPointer, 26, 31, 32, 334, 436
DRAW BUFFER, 277, 280, 290                  EdgeFlagv, 25, 34
DRAW BUFFERi, 269, 280, 281, 284,           ELEMENT ARRAY BUFFER, 43, 52
         315, 391                           ELEMENT ARRAY BUFFER BIND-
DRAW BUFFER0, 280                                    ING, 372
DRAW FRAMEBUFFER, 286, 301,                 EMISSION, 71, 72, 377
         303, 307, 308, 316, 360, 390       Enable, 35, 60, 61, 64, 66, 70, 71, 120,




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                          472


         128, 131–133, 138, 141, 145,     FALSE, 25, 43, 45, 50, 67, 69, 78,
         146, 148, 150, 187–189, 194,                80, 93, 94, 108–110, 133, 152,
         248, 249, 251, 263–265, 267,                154, 163, 164, 178, 179, 181,
         269, 274, 322, 323, 339, 437–               189, 222, 236, 239, 256, 264,
         439                                         287, 289, 292, 339, 346, 349,
ENABLE BIT, 364                                      352, 353, 355, 356, 358, 359,
EnableClientState, 26, 33, 41, 334, 436              362, 369–371, 373–385, 387,
Enablei, 269                                         388, 395–403, 407, 408, 419
EnableVertexAttribArray, 33, 53, 334,     FASTEST, 336
         358                              FEEDBACK, 327–329, 426
End, 18, 22, 24–26, 35–37, 54, 71, 74,    FEEDBACK BUFFER POINTER,
         76, 99, 114, 138, 145, 148,                 350, 419
         316, 324, 325, 330, 436          FEEDBACK BUFFER SIZE, 419
EndConditionalRender, 114, 115            FEEDBACK BUFFER TYPE, 419
EndList, 332, 440                         FeedbackBuffer, 328, 329, 334, 350,
EndQuery, 113, 268                                   439
EndTransformFeedback, 115, 433, 434       FILL, 148–151, 324, 380, 425
EQUAL, 222, 247, 265–267                  Finish, 335, 336, 424, 432–434
EQUIV, 275                                FIXED ONLY, 179, 292, 298, 300, 376
EVAL BIT, 364                             FLAT, 76, 425
EvalCoord, 26, 322, 323                   flat, 76
EvalCoord*, 439                           FLOAT, 31, 34, 35, 40, 41, 82, 91, 165,
EvalCoord1, 323–325                                  167, 196, 291, 292, 294, 333,
EvalCoord1d, 324                                     341, 343, 360, 369–371
EvalCoord1f, 324                          float, 81, 91, 95
EvalCoord2, 323, 325, 326                 FLOAT 32 UNSIGNED INT -
EvalMesh*, 439                                       24 8 REV, 165, 167, 170, 171,
EvalMesh1, 114, 324                                  175, 289, 293, 294
EvalMesh2, 114, 324, 325                  FLOAT MAT2, 82, 91
EvalPoint, 26                             FLOAT MAT2x3, 82, 91
EvalPoint*, 439                           FLOAT MAT2x4, 82, 91
EvalPoint1, 325                           FLOAT MAT3, 82, 91
EvalPoint2, 325                           FLOAT MAT3x2, 82, 91
EXP, 251, 252, 376                        FLOAT MAT3x4, 82, 91
EXP2, 251                                 FLOAT MAT4, 82, 91
EXTENSIONS, 154, 350, 351, 414,           FLOAT MAT4x2, 82, 91
         440, 455                         FLOAT MAT4x3, 82, 91
EYE LINEAR, 62–64, 341, 385               FLOAT VEC2, 82, 91
EYE PLANE, 62, 63, 385                    FLOAT VEC3, 82, 91
                                          FLOAT VEC4, 82, 91




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                473


Flush, 335, 336, 424                         273, 361, 392
FlushMappedBufferRange, 47, 49, 334,    FRAMEBUFFER ATTACHMENT -
         432, 444                            COMPONENT TYPE, 360,
FOG, 251, 376, 439                           392
Fog, 251, 252, 439                      FRAMEBUFFER ATTACHMENT -
FOG BIT, 364                                 DEPTH SIZE, 360
FOG COLOR, 252, 376                     FRAMEBUFFER ATTACHMENT -
FOG COORD, 123, 251                          GREEN SIZE, 360
FOG COORD ARRAY, 33, 41, 369            FRAMEBUFFER ATTACH-
FOG COORD ARRAY BUFFER -                     MENT OBJECT NAME, 307,
         BINDING, 372                        309, 314, 360, 361, 392
FOG COORD ARRAY POINTER,                FRAMEBUFFER ATTACH-
         350, 369                            MENT OBJECT TYPE, 307,
FOG COORD ARRAY STRIDE, 369                  309, 313–315, 318, 360, 361,
FOG COORD ARRAY TYPE, 369                    392
FOG COORD SRC, 125, 251, 252, 376       FRAMEBUFFER ATTACHMENT -
FOG DENSITY, 251, 376                        RED SIZE, 360
FOG END, 251, 376                       FRAMEBUFFER ATTACHMENT -
FOG HINT, 337, 410, 440                      STENCIL SIZE, 360
FOG INDEX, 252, 376                     FRAMEBUFFER ATTACHMENT -
FOG MODE, 251, 252, 376                      TEXTURE -
FOG START, 251, 376                          CUBE MAP FACE, 309, 361,
FogCoord, 26, 27                             392, 450
FogCoord*, 436                          FRAMEBUFFER ATTACHMENT -
FogCoord[type]v, 34                          TEXTURE LAYER, 310, 314,
FogCoordPointer, 26, 31, 32, 334, 436        319, 361, 392
FRAGMENT DEPTH, 251, 252, 376           FRAMEBUFFER ATTACHMENT -
FRAGMENT SHADER, 253, 355                    TEXTURE LEVEL, 230, 309,
FRAGMENT SHADER DERIVA-                      311, 312, 361, 392
         TIVE HINT, 337, 410            FRAMEBUFFER BINDING, 303
FRAMEBUFFER, 301, 307, 308, 316,        FRAMEBUFFER COMPLETE, 317
         360                            FRAMEBUFFER DEFAULT, 360
FRAMEBUFFER ATTACHMENT x -              FRAMEBUFFER INCOMPLETE AT-
         SIZE, 392                           TACHMENT, 315
FRAMEBUFFER ATTACHMENT -                FRAMEBUFFER INCOMPLETE -
         ALPHA SIZE, 360                     DRAW BUFFER, 315
FRAMEBUFFER ATTACHMENT -                FRAMEBUFFER INCOMPLETE -
         BLUE SIZE, 360                      MISSING ATTACHMENT,
FRAMEBUFFER ATTACHMENT -                     315
         COLOR ENCODING, 270,           FRAMEBUFFER INCOMPLETE -




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                              474


         MULTISAMPLE, 315       GENERATE MIPMAP HINT,              337,
FRAMEBUFFER INCOMPLETE -                 410, 440
         READ BUFFER, 315       GenerateMipmap, 232, 334
FRAMEBUFFER SRGB, 270, 273,     GenFramebuffers, 301, 303, 334
         388                    GenLists, 333, 334, 440
FRAMEBUFFER UNDEFINED, 314      GenQueries, 113, 334
FRAMEBUFFER UNSUPPORTED,        GenRenderbuffers, 304, 305, 334
         315, 316               GenTextures, 238, 239, 334, 346
                                GenVertexArrays, 53, 334
FramebufferRenderbuffer, 307, 315,
         316, 335               GEQUAL, 222, 247, 265–267
FramebufferTexture, 310         Get, 27, 112, 123, 335, 338, 339
                                GetActiveUniformBlockiv, 406
FramebufferTexture*, 309, 310, 315,
         316                    GetActiveAttrib, 81, 82, 102, 404
                                GetActiveUniform, 89–91, 94, 403
FramebufferTexture1D, 308, 309, 335
                                GetActiveUniformBlockiv, 87
FramebufferTexture2D, 308, 309, 335
                                GetActiveUniformBlockName, 86
FramebufferTexture3D, 308–310, 335
                                GetActiveUniformName, 88, 89
FramebufferTextureLayer, 310, 335,
         450                    GetActiveUniformsiv, 89–91, 405, 406
                                GetAttachedShaders, 357, 403
FRONT, 70, 71, 74, 146, 148, 266, 269,
                                GetAttribLocation, 82, 83, 404
         277, 278, 280–282, 284, 290,
         300, 341, 438          GetBooleani v, 281, 338, 389
FRONT AND BACK, 70, 71, 73, 74, GetBooleanv, 264, 281, 338–340, 365,
         146, 148, 266, 269, 278, 280–   368, 377, 381, 389, 395, 396,
         282, 284, 290                   418
FRONT FACE, 380                 GetBufferParameteriv, 353, 374, 444
FRONT LEFT, 278, 279, 360       GetBufferPointerv, 354, 374
FRONT RIGHT, 278, 279, 360      GetBufferSubData, 353, 354, 374
FrontFace, 70, 145, 256, 437    GetClipPlane, 340, 375
Frustum, 57, 58, 425, 436       GetColorTable, 159, 289, 347, 397
ftransform, 107                 GetColorTable- Parameterfv, 397
FUNC ADD, 269, 271, 388         GetColorTable- Parameteriv, 397
FUNC REVERSE SUBTRACT, 269,     GetColorTableParameter, 347
         271                    GetCompressedTexImage,         215–217,
FUNC SUBTRACT, 269, 271                  336, 343, 346
fwidth, 337                     GetConvolution- Filter, 398
                                GetConvolution- Parameterfv, 398
Gen*, 431, 436                  GetConvolution- Parameteriv, 398, 413
GenBuffers, 42, 334             GetConvolutionFilter, 289, 347
GENERATE MIPMAP, 222, 223, 233, GetConvolutionParameter, 348
        236, 383, 439           GetConvolutionParameteriv, 160, 161




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                        475


GetDoublev, 338–340, 365                  GetQueryiv, 352, 414, 419
GetError, 17, 419                         GetQueryObject[u]iv, 353
GetFloatv, 14, 264, 338–340, 346, 347,    GetQueryObjectiv, 352, 408
         365, 368, 375–377, 379–381,      GetQueryObjectuiv, 352, 408
         388, 389, 396, 399–401, 411–     GetRenderbufferParameteriv, 394
         413                              GetRenderbufferParameteriv, 318, 362,
GetFragDataLocation, 258                           445
GetFramebufferAttachment-                 GetSeparable- Filter, 398
         Parameteriv, 392                 GetSeparableFilter, 289, 348
GetFramebufferAttachmentiv, 445           GetShaderInfoLog, 78, 357, 402
GetFramebufferAttachmentParameteriv,      GetShaderiv, 78, 79, 355, 357, 358, 402
         318, 360, 443, 444               GetShaderSource, 357, 402
GetHistogram, 164, 289, 348, 399          GetString, 351, 414, 440, 455
GetHistogram- Parameteriv, 399            GetStringi, 414, 455
GetHistogramParameter, 349                GetTexEnv, 341
GetIntegeri v, 338, 354, 405, 409         GetTexEnvfv, 385, 386
GetIntegerv, 38, 87, 95, 98, 130, 279,    GetTexEnviv, 385, 386
         280, 303, 304, 338–340, 347,     GetTexGen, 341
         351, 365, 368–373, 375–377,      GetTexGenfv, 385
         379, 380, 382, 385, 387–391,     GetTexGeniv, 385
         393, 395, 396, 400, 403, 405,    GetTexImage, 237, 289, 344–349, 382,
         409–419                                   450
GetLight, 341                             GetTexLevelParameter, 342, 343, 384
GetLightfv, 378                           GetTexParameter, 318, 342, 383
GetMap, 342                               GetTexParameterfv, 237, 239, 383
GetMapfv, 401                             GetTexParameterI, 342
GetMapiv, 401                             GetTexParameterIiv, 342
GetMaterial, 341                          GetTexParameterIuiv, 342
GetMaterialfv, 377, 378                   GetTexParameteriv, 237, 239, 383
GetMinmax, 289, 349, 400                  GetTransformFeedbackVarying, 404
GetMinmax- Parameteriv, 400               GetTransformFeedbackVarying, 102
GetMinmaxParameter, 350                   GetUniform, 403
GetPixelMap, 341, 400                     GetUniform*, 359
GetPixelMapuiv, 341                       GetUniformBlockIndex, 86
GetPixelMapusv, 341                       GetUniformfv, 359
GetPointerv, 350, 369–371, 419            GetUniformIndices, 88–90
GetPolygonStipple, 289, 346, 380          GetUniformiv, 359
GetProgramInfoLog, 80, 357, 403           GetUniformLocation, 85, 89, 90, 99,
GetProgramiv, 80, 82, 86, 89, 102, 108,            403
         356, 357, 403–405                GetUniformuiv, 359




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                     476


GetVertexAttribPointerv, 371             GL  ARB shader texture lod, 464
GetVertexAttribdv, 358                   GL  ARB shading language 100, 459
GetVertexAttribfv, 358, 407              GL  ARB shadow, 457, 459
GetVertexAttribIiv, 358                  GL  ARB shadow ambient, 458
GetVertexAttribIuiv, 358                 GL  ARB texture border clamp, 456
GetVertexAttribiv, 358, 371, 372         GL  ARB texture buffer object,   449,
GetVertexAttribPointerv, 359                      463
GL APPLE flush buffer range,      442,   GL ARB texture compression, 456
        462                              GL ARB texture compression rgtc,
GL APPLE vertex array object, 442,                463
        463                              GL ARB texture cube map, 456
GL ARB color buffer float, 442, 460      GL ARB texture env add, 456
GL ARB compatibility, 448, 449, 454,     GL ARB texture env combine, 457
        464                              GL ARB texture env crossbar, 457
GL ARB copy buffer, 448, 464             GL ARB texture env dot3, 457
GL ARB depth buffer float, 461           GL ARB texture float, 442, 461
GL ARB depth texture, 457                GL ARB texture mirrored repeat, 457
GL ARB draw buffers, 460                 GL ARB texture non power of two,
GL ARB draw instanced, 448, 461,                  459
        462                              GL ARB texture rectangle, 449, 460
GL ARB fragment program, 458, 459        GL ARB texture rg, 463
GL ARB fragment program shadow,          GL ARB transpose matrix, 456
        459                              GL ARB uniform buffer object, 449,
GL ARB fragment shader, 459                       463
GL ARB framebuffer object, 461           GL ARB vertex array object, 463
GL ARB framebuffer sRGB, 462             GL ARB vertex blend, 457
GL ARB geometry shader4, 462             GL ARB vertex buffer object, 458
GL ARB half float pixel, 442, 461        GL ARB vertex program, 458
GL ARB half float vertex, 462            GL ARB vertex shader, 459
GL ARB imaging, 154                      GL ARB window pos, 458
GL ARB instanced arrays, 462             GL ARB name, 455
GL ARB map buffer range, 462             gl BackColor, 69, 76, 107, 437
GL ARB matrix palette, 457               gl BackSecondaryColor, 69, 76, 107,
GL ARB multisample, 456                           437
GL ARB multitexture, 455                 gl ClipDistance, 107, 443
GL ARB occlusion query, 458              gl ClipDistance[], 120
GL ARB pixel buffer object, 461          gl ClipVertex, 107, 120, 443
GL ARB point parameters, 456             gl Color, 256
GL ARB point sprite, 459                 GL EXT draw buffers2, 442
GL ARB shader objects, 459               GL EXT framebuffer blit, 442, 461




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                 477


GL EXT framebuffer multisample,       GREEN, 154, 168, 291, 295, 384, 392,
         442, 461                           396, 397, 399, 418
GL EXT framebuffer object, 442, 461   GREEN BIAS, 181
GL EXT framebuffer sRGB, 442, 462     GREEN BITS, 318, 439
GL EXT geometry shader4, 445          GREEN INTEGER, 168
GL EXT gpu shader4, 441               GREEN SCALE, 180
GL EXT packed depth stencil, 442
GL EXT packed float, 442              HALF, 292
GL EXT texture array, 442, 445        HALF FLOAT, 31, 167, 196, 291, 292,
GL EXT texture compression rgtc,               294
         442, 463                     Hint, 336, 440
GL EXT texture integer, 442           HINT BIT, 364
GL EXT texture shared exponent, 442   HISTOGRAM, 163, 164, 188, 348, 349,
GL EXT transform feedback, 442                 399
gl FogFragCoord, 107, 123             Histogram, 163, 164, 189, 335
gl FragColor, 256, 257, 280           HISTOGRAM x SIZE, 399
gl FragCoord, 255                     HISTOGRAM ALPHA SIZE, 349
gl FragCoord.z, 423                   HISTOGRAM BLUE SIZE, 349
gl FragData, 257, 280                 HISTOGRAM FORMAT, 349, 399
gl FragData[n], 256, 257              HISTOGRAM GREEN SIZE, 349
gl FragDepth, 256, 257, 423           HISTOGRAM LUMINANCE SIZE,
gl FrontColor, 69, 76, 107                     349
gl FrontFacing, 256                   HISTOGRAM RED SIZE, 349
gl FrontSecondaryColor, 69, 76, 107   HISTOGRAM SINK, 349, 399
gl InstanceID, 38, 106, 107           HISTOGRAM WIDTH, 349, 399
GL NV conditional render, 441
                                      INCR, 266
GL NV depth buffer float, 442, 461
                                      INCR WRAP, 266
GL NV half float, 442, 462
                                      INDEX, 360, 418
GL NV primitive restart, 448
                                      Index, 26, 28
gl PointCoord, 136
                                      Index*, 436
gl PointSize, 107, 132
                                      Index[type]v, 34
gl Position, 100, 107, 111
                                      INDEX ARRAY, 33, 41, 370
gl PrimitiveID, 256
                                      INDEX ARRAY BUFFER BINDING,
gl SecondaryColor, 256
                                               372
gl TexCoord, 107
                                      INDEX ARRAY POINTER, 350, 370
gl VertexID, 106, 256
                                      INDEX ARRAY STRIDE, 370
GLX ARB create context, 463
                                      INDEX ARRAY TYPE, 370
GLX ARB fbconfig float, 460
                                      INDEX CLEAR VALUE, 389
GLX ARB framebuffer sRGB, 462
                                      INDEX LOGIC OP, 274
GREATER, 222, 247, 265–267




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                            478


INDEX LOGIC OP                                        TION, 19, 25, 158, 162, 178,
          (v1.0:LOGIC OP), 388                        191, 214, 290, 295, 297, 299,
INDEX MODE, 418                                       317
INDEX OFFSET, 154, 181, 396                 INVALID INDEX, 86, 88
INDEX SHIFT, 154, 181, 396                  INVALID OPERATION, 19, 26, 42,
INDEX WRITEMASK, 389                                  44, 46, 48–51, 53, 60, 77, 79,
IndexMask, 281                                        80, 83, 85, 94, 100, 102, 108,
IndexPointer, 26, 31, 32, 334, 436                    113, 115–118, 153, 156, 165,
INFO LOG LENGTH, 355–357, 402,                        169, 170, 178, 194, 196, 205,
          403                                         209, 213, 215–219, 233, 238,
InitNames, 326, 439                                   258, 277, 279, 280, 285–287,
INT, 31, 82, 91, 167, 293, 294, 333, 343,             289–291, 293, 295, 297–299,
          360                                         301, 304, 305, 307–310, 316,
int, 91, 95                                           322, 327, 329, 332, 340, 341,
INT SAMPLER 1D, 91                                    343–346, 352, 355, 359, 360,
INT SAMPLER 1D ARRAY, 91                              362, 436, 437, 443, 444
INT SAMPLER 2D, 91                          INVALID VALUE, 18, 19, 29, 31, 33,
INT SAMPLER 2D ARRAY, 91                              35, 36, 38, 46, 48, 49, 51, 59,
INT SAMPLER 3D, 91                                    70, 77, 82, 83, 86, 87, 89, 90,
INT SAMPLER CUBE, 91                                  98, 99, 101, 102, 112, 115,
INT VEC2, 82, 91                                      116, 131, 132, 138, 152, 154,
INT VEC3, 82, 91                                      155, 157, 158, 160, 161, 163,
INT VEC4, 82, 91                                      195, 204–207, 209, 211–213,
INTENSITY, 164, 183, 184, 196, 202,                   215, 217, 231, 239, 251, 258,
          203, 222, 223, 242, 243, 246,               263, 269, 277, 279, 281, 283,
          345, 384, 397, 438                          285, 305, 309, 310, 321, 322,
INTENSITY12, 202                                      324, 332, 339, 343, 345, 346,
INTENSITY16, 202                                      351, 355, 358, 359, 437, 439,
INTENSITY4, 202                                       450
INTENSITY8, 202                             INVERT, 266, 275
INTERLEAVED ATTRIBS, 101, 117,              Is, 335
          356, 404                          isampler1D, 91
InterleavedArrays, 26, 39, 40, 334, 436     isampler1DArray, 91
INTERPOLATE, 244                            isampler2D, 91
INVALID ENUM, 18, 19, 34, 49, 63,           isampler2DArray, 91
          70, 153, 159, 164, 165, 194,      isampler3D, 91
          209, 215–218, 223, 237, 277,      isamplerCube, 91
          279, 285, 289, 290, 345, 347–     IsBuffer, 353
          349, 361, 362, 445                IsEnabled, 263, 273, 339, 365, 369–
INVALID FRAMEBUFFER OPERA-                            371, 373, 375–382, 385, 387,




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                     479


          388, 397–401, 407             LINE STIPPLE, 141, 379, 437
IsEnabledi, 273, 339, 388               LINE STIPPLE PATTERN, 379
IsFramebuffer, 359                      LINE STIPPLE REPEAT, 379
IsList, 334, 440                        LINE STRIP, 22, 116, 324
IsProgram, 356                          LINE TOKEN, 331
IsQuery, 352                            LINE WIDTH, 379
IsRenderbuffer, 362                     LINEAR, 104, 222, 223, 228, 230, 232–
IsShader, 355                                    234, 236, 251, 298, 299, 311,
IsTexture, 346                                   361, 383
IsVertexArray, 355                      LINEAR ATTENUATION, 72, 378
ivec2, 91                               LINEAR MIPMAP LINEAR,             222,
ivec3, 91                                        230, 232, 312
ivec4, 91                               LINEAR MIPMAP NEAREST, 222,
                                                 230, 232, 312
KEEP, 266, 267, 387                     LINES, 22, 115, 116, 141
                                        LineStipple, 141, 437
layout, 96
                                        LineWidth, 138, 437, 448
LEFT, 269, 277, 278, 280, 281, 284, 290
                                        LINK STATUS, 80, 356, 403
LEQUAL, 222, 237, 247, 265–267, 383
                                        LinkProgram, 80, 82, 83, 86–89, 99–
LESS, 222, 247, 265–267, 388
                                                 102, 118, 258, 335
Light, 70–72
                                        LIST BASE, 419
LIGHTi, 70, 71, 378, 426, 437
                                        LIST BIT, 364
Light*, 437
                                        LIST INDEX, 419
LIGHT0, 70
                                        LIST MODE, 419
LIGHT MODEL AMBIENT, 72, 377
                                        ListBase, 333, 335, 440
LIGHT MODEL COLOR CONTROL,
                                        LOAD, 286
         72, 377
                                        LoadIdentity, 57, 436
LIGHT MODEL LOCAL VIEWER,
                                        LoadMatrix, 56, 57, 436
         72, 377
                                        LoadMatrix[fd], 57
LIGHT MODEL TWO SIDE, 72, 377
                                        LoadName, 326, 327, 439
LIGHTING, 66, 377, 437
                                        LoadTransposeMatrix, 57, 436
LIGHTING BIT, 364
                                        LoadTransposeMatrix[fd], 57
LightModel, 70, 72
                                        LOGIC OP, 274
LightModel*, 437
                                        LOGIC OP MODE, 388
LINE, 148–151, 324, 325, 380
                                        LogicOp, 274, 275
LINE BIT, 364
                                        LOWER LEFT, 133, 136, 137
LINE LOOP, 22, 116
                                        LUMINANCE, 168, 177, 183, 184, 195,
LINE RESET TOKEN, 331
                                                 196, 202, 203, 222, 223, 237,
LINE SMOOTH, 138, 144, 379
                                                 242, 243, 246, 291, 292, 295,
LINE SMOOTH HINT, 337, 410
                                                 345, 383, 384, 397, 399, 428,




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                              480


      438                          MAP INVALIDATE BUFFER BIT,
LUMINANCE12, 202                            47, 48
LUMINANCE12 ALPHA12, 202           MAP INVALIDATE RANGE BIT, 47,
LUMINANCE12 ALPHA4, 202                     48
LUMINANCE16, 202                   MAP READ BIT, 46–49
LUMINANCE16 ALPHA16, 202           MAP STENCIL, 154, 182, 396
LUMINANCE4, 202                    MAP UNSYNCHRONIZED BIT, 47,
LUMINANCE4 ALPHA4, 202                      48
LUMINANCE6 ALPHA2, 202             MAP WRITE BIT, 46–49
LUMINANCE8, 202, 236               Map{12}, 322
LUMINANCE8 ALPHA8, 202             MapBuffer, 46, 49, 85, 98, 116, 118,
LUMINANCE ALPHA, 168, 177, 183,             334, 444
      184, 195, 196, 202, 203, 242,MapBufferRange, 46–49, 334, 444
      243, 291, 292, 295, 345, 438 MapGrid*, 439
                                   MapGrid1, 324
MAJOR VERSION, 351, 414            MapGrid2, 324
Map*, 439                          matC, 96
Map1, 320–322, 339                 matCxR, 96
MAP1 x, 401                        mat2, 81, 91
MAP1 COLOR 4, 321                  mat2x3, 81, 91
MAP1 GRID DOMAIN, 401              mat2x4, 81, 91
MAP1 GRID SEGMENTS, 401            mat3, 81, 91
MAP1 INDEX, 321                    mat3x2, 81, 91
MAP1 NORMAL, 321                   mat3x4, 81, 91
MAP1 TEXTURE COORD 1,         321, mat4, 81, 91
        323                        mat4x2, 81, 91
MAP1 TEXTURE COORD 2,         321, mat4x3, 81, 91
        323                        Material, 26, 70–72, 75, 425
MAP1 TEXTURE COORD 3, 321          Material*, 437
MAP1 TEXTURE COORD 4, 321          MATRIX MODE, 60, 375
MAP1 VERTEX 3, 321                 MatrixMode, 56, 436
MAP1 VERTEX 4, 321                 MAX, 269, 271
Map2, 321, 322, 339                MAX 3D TEXTURE SIZE, 205, 309,
MAP2 x, 401                                 411
MAP2 GRID DOMAIN, 401              MAX ARRAY TEXTURE LAYERS,
MAP2 GRID SEGMENTS, 401                     205, 411
MAP2 VERTEX 3, 323                 MAX ATTRIB STACK DEPTH, 363,
MAP2 VERTEX 4, 323                          412, 440
MAP COLOR, 154, 181, 182, 396      MAX CLIENT ATTRIB STACK -
MAP FLUSH EXPLICIT BIT, 47–49               DEPTH, 363, 412, 440




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                 481


MAX CLIP DISTANCES, 411, 443,        MAX PIXEL MAP TABLE, 155, 181,
      449                                  412
MAX CLIP PLANES, 443                 MAX PROGRAM TEXEL OFFSET,
MAX COLOR ATTACHMENTS, 277,                225, 415
      278, 280, 301, 308, 317, 418   MAX PROJECTION STACK -
MAX COLOR MATRIX STACK -                   DEPTH, 411
      DEPTH, 347, 411                MAX RECTANGLE TEXTURE -
MAX COMBINED FRAGMENT -                    SIZE, 205, 413
      UNIFORM COMPONENTS,            MAX RENDERBUFFER SIZE, 305,
      253, 417                             411
MAX COMBINED TEXTURE IM-             MAX SAMPLES, 305, 306, 418
      AGE UNITS, 105, 194, 340,      MAX TEXTURE BUFFER SIZE,
      415                                  219, 413
MAX COMBINED UNIFORM -               MAX TEXTURE COORDS, 27, 30,
      BLOCKS, 95, 416                      41, 60, 194, 340, 415, 439
MAX COMBINED VERTEX UNI-             MAX TEXTURE IMAGE UNITS,
      FORM COMPONENTS, 84,                 105, 255, 415
      417                            MAX TEXTURE LOD BIAS,            225,
MAX CONVOLUTION HEIGHT,                    411
      160, 348, 413                  MAX TEXTURE SIZE, 205, 309, 411
MAX CONVOLUTION WIDTH, 160,          MAX TEXTURE STACK DEPTH,
      161, 348, 413                        411
MAX CUBE MAP TEXTURE SIZE,           MAX TEXTURE UNITS, 19, 194,
      205, 309, 411                        249, 363, 415, 439
MAX DRAW BUFFERS, 258, 269,          MAX TRANSFORM FEEDBACK -
      271, 279, 281, 285, 418              INTERLEAVED COMPO-
MAX ELEMENTS INDICES, 38, 413              NENTS, 101, 409
MAX ELEMENTS VERTICES, 38,           MAX TRANSFORM FEEDBACK -
      413                                  SEPARATE ATTRIBS, 101,
MAX EVAL ORDER, 321, 322, 412              116, 117, 354, 409
MAX FRAGMENT UNIFORM -               MAX TRANSFORM FEEDBACK -
      BLOCKS, 95, 416                      SEPARATE COMPONENTS,
MAX FRAGMENT UNI-                          101, 409
      FORM COMPONENTS, 253,          MAX UNIFORM BLOCK SIZE, 87,
      415, 417                             416
MAX LIGHTS, 411                      MAX UNIFORM -
MAX LIST NESTING, 412                      BUFFER BINDINGS, 98, 99,
MAX MODELVIEW STACK -                      354, 416
      DEPTH, 411                     MAX VARYING COMPONENTS,
MAX NAME STACK DEPTH, 412                  100, 415, 443




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                     482


MAX VARYING FLOATS, 443                NAME STACK DEPTH, 419
MAX VERTEX ATTRIBS, 28–31, 33,         NAND, 275
        41, 81, 83, 358, 359, 415      NEAREST, 104, 222, 223, 227, 228,
MAX VERTEX TEXTURE IMAGE -                     230, 232–234, 246, 298, 311
        UNITS, 105, 415                NEAREST MIPMAP -
MAX VERTEX UNIFORM -                           LINEAR, 222, 230, 232, 234,
        BLOCKS, 95, 416                        236, 312
MAX VERTEX UNIFORM COMPO-              NEAREST MIPMAP NEAREST, 222,
        NENTS, 84, 415, 417                    230, 232, 234, 246, 312
MAX VIEWPORT DIMS, 352, 412            NEVER, 222, 247, 265–267
MIN, 269, 271                          NewList, 332, 333, 440
MIN PROGRAM TEXEL OFFSET,              NICEST, 336
        225, 415                       NO ERROR, 17, 18
MINMAX, 164, 189, 349, 350, 400        NONE, 106, 222, 236, 237, 246, 255,
Minmax, 164, 189                               275, 277–280, 285, 290, 300,
MINMAX FORMAT, 350, 400                        313–315, 343, 360, 383, 384,
MINMAX SINK, 350, 400                          392, 444, 450
MINOR VERSION, 351, 414                NOOP, 275
MIRRORED REPEAT, 222, 223, 228         noperspective, 122
MODELVIEW, 56, 60                      NOR, 275
MODELVIEW MATRIX, 340                  Normal, 26, 27, 81
MODELVIEW MATRIX                       Normal3, 27
        (TRANSPOSE MODELVIEW           Normal3*, 436
                                       MATRIX),
        375                            Normal3[type]v, 34
MODELVIEW STACK DEPTH, 375             NORMAL ARRAY, 33, 41, 369
MODULATE, 241–244, 385                 NORMAL ARRAY BUFFER BIND-
MULT, 286                                      ING, 372
MultiDrawArrays, 36, 106               NORMAL ARRAY POINTER, 350,
MultiDrawElements, 37, 52, 106                 369
MULTISAMPLE, 131, 137, 144, 150,       NORMAL ARRAY STRIDE, 369
        189, 192, 263, 275, 276, 381   NORMAL ARRAY TYPE, 369
MULTISAMPLE BIT, 364                   NORMAL MAP, 62, 63
MultiTexCoord, 26, 27, 34              NORMALIZE, 61, 375, 437
MultiTexCoord[size][type]v, 34         NormalPointer, 26, 31, 32, 41, 334, 436
MultMatrix, 56, 57, 436                NOTEQUAL, 222, 247, 265–267
MultMatrix[fd], 57                     NULL, 41, 43, 45, 48, 52, 54, 78, 82,
MultTransposeMatrix, 57, 436                   86, 89, 90, 102, 354, 357, 366,
MultTransposeMatrix[fd], 57                    371, 374
                                       NUM COMPRESSED TEXTURE -
N3F V3F, 39, 40                                FORMATS, 197, 413




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                               483


NUM EXTENSIONS, 351, 414        PassThrough, 330, 439
NV, 449                         PERSPECTIVE CORRECTION -
                                         HINT, 337, 410, 440
OBJECT LINEAR, 62, 64, 341      PIXEL MAP A TO A, 155, 181
OBJECT PLANE, 62, 63, 385       PIXEL MAP B TO B, 155, 181
ONE, 271, 272, 388              PIXEL MAP G TO G, 155, 181
ONE MINUS CONSTANT ALPHA,       PIXEL MAP I TO A, 155, 181
         272                    PIXEL MAP I TO B, 155, 181
ONE MINUS CONSTANT COLOR,       PIXEL MAP I TO G, 155, 181
         272                    PIXEL MAP I TO I, 155, 182
ONE MINUS DST ALPHA, 272        PIXEL MAP I TO R, 155, 181
ONE MINUS DST COLOR, 272        PIXEL MAP R TO R, 155, 181
ONE MINUS SRC ALPHA, 245, 272 PIXEL MAP S TO S, 155, 182
ONE MINUS SRC COLOR, 245, 272 PIXEL MODE BIT, 364
OPERAND0 ALPHA, 386             PIXEL PACK BUFFER, 43, 153, 287
OPERAND0 RGB, 386               PIXEL PACK BUFFER BINDING,
OPERAND1 ALPHA, 386                      293, 341, 345, 395
OPERAND1 RGB, 386               PIXEL UNPACK BUFFER, 43, 153
OPERAND2 ALPHA, 386             PIXEL UNPACK BUFFER BIND-
OPERAND2 RGB, 386                        ING, 155, 165, 215, 395
OPERANDn ALPHA, 241, 245, 249   PixelMap, 152, 154–156, 300
OPERANDn RGB, 241, 245, 249     PixelStore, 26, 151, 152, 154, 289, 300,
OR, 275                                  334
OR INVERTED, 275                PixelTransfer, 151, 154, 187, 300
OR REVERSE, 275                 PixelZoom, 179, 190, 438
ORDER, 342, 401                 POINT, 148–151, 324, 325, 380
Ortho, 57, 59, 425, 436         POINT BIT, 364
OUT OF MEMORY, 18, 19, 45, 48, POINT DISTANCE ATTENUATION,
         305, 332                        132, 379
                                POINT FADE THRESHOLD SIZE,
PACK ALIGNMENT, 289, 395
                                         132, 379
PACK IMAGE HEIGHT, 289, 345,
                                POINT SIZE, 379
         395
                                POINT SIZE GRANULARITY, 412
PACK LSB FIRST, 289, 395
                                POINT SIZE MAX, 132, 379
PACK ROW LENGTH, 289, 395
                                POINT SIZE MIN, 132, 379
PACK SKIP IMAGES, 289, 345, 395
                                POINT SIZE RANGE, 412
PACK SKIP PIXELS, 289, 395
                                POINT SMOOTH, 132, 137, 379, 437
PACK SKIP ROWS, 289, 395
                                POINT SMOOTH HINT, 337, 410,
PACK SWAP BYTES, 289, 395
                                         440
PASS THROUGH TOKEN, 331
                                POINT SPRITE, 133, 137, 138, 240,




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                  484


         341, 379, 437                     POST COLOR MATRIX BLUE -
POINT SPRITE COORD ORIGIN,                        BIAS, 187
         133, 136, 137, 379                POST COLOR MATRIX BLUE -
POINT TOKEN, 331                                  SCALE, 187
PointParameter, 132                        POST COLOR MATRIX COLOR -
PointParameter*, 133                              TABLE, 156, 188, 397
POINTS, 22, 115, 116, 148, 324             POST COLOR MATRIX GREEN -
PointSize, 131, 132                               BIAS, 187
POLYGON, 22, 25, 116, 256, 438             POST COLOR MATRIX GREEN -
POLYGON BIT, 364                                  SCALE, 187
POLYGON MODE, 380                          POST COLOR MATRIX RED BIAS,
POLYGON OFFSET FACTOR, 380                        187
POLYGON OFFSET FILL, 150, 380              POST COLOR MATRIX RED -
POLYGON OFFSET LINE, 150, 380                     SCALE, 187
POLYGON OFFSET POINT, 150, 380             POST CONVOLUTION x BIAS, 154,
POLYGON OFFSET UNITS, 380                         399
POLYGON SMOOTH, 145, 150, 380              POST CONVOLUTION x SCALE,
POLYGON SMOOTH HINT, 337, 410                     154, 399
POLYGON STIPPLE, 148, 380, 438             POST CONVOLUTION ALPHA -
POLYGON STIPPLE BIT, 364                          BIAS, 187
POLYGON TOKEN, 331                         POST CONVOLUTION ALPHA -
PolygonMode, 144, 148, 149, 151, 327,             SCALE, 187
         329, 438                          POST CONVOLUTION BLUE BIAS,
PolygonOffset, 149                                187
PolygonStipple, 147, 152, 438              POST CONVOLUTION BLUE -
PopAttrib, 362, 363, 365, 426, 440                SCALE, 187
PopClientAttrib, 26, 334, 362, 363, 365,   POST CONVOLUTION COLOR TA-
         440                                      BLE, 156, 187, 397
PopMatrix, 60, 437                         POST CONVOLUTION GREEN -
PopName, 326, 439                                 BIAS, 187
POSITION, 72, 341, 378                     POST CONVOLUTION GREEN -
POST COLOR MATRIX x BIAS,                         SCALE, 187
         154, 399                          POST CONVOLUTION RED BIAS,
POST COLOR MATRIX x SCALE,                        187
         154, 399                          POST CONVOLUTION RED -
POST COLOR MATRIX ALPHA -                         SCALE, 187
         BIAS, 188                         PREVIOUS, 243, 245, 386
POST COLOR MATRIX ALPHA -                  PRIMARY COLOR, 245
         SCALE, 187                        PRIMITIVE RESTART, 35, 373, 448,
                                                  449




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                      485


PRIMITIVE RESTART INDEX, 373,             QUADRATIC ATTENUATION,       72,
          449                                   378
PrimitiveRestartIndex, 35                 QUADS, 24, 25, 116, 256, 438
PRIMITIVES GENERATED, 118, 352            QUERY BY REGION NO WAIT, 115
PrioritizeTextures, 239, 240, 439         QUERY BY REGION WAIT, 114, 115
PROJECTION, 56, 60                        QUERY COUNTER BITS, 352, 414
PROJECTION MATRIX                         QUERY NO WAIT, 114
          (TRANSPOSE PROJECTION          MATRIX),
                                          QUERY RESULT, 352, 408
          375                             QUERY RESULT AVAILABLE, 353,
PROJECTION STACK DEPTH, 375                     408
PROXY COLOR TABLE, 156, 159,              QUERY WAIT, 114
          335
PROXY HISTOGRAM, 163, 164, 335,           R, 62, 63, 341, 442
          349                             R11F G11F B10F, 198, 201
PROXY POST COLOR MATRIX -                 R16, 198, 200, 221
          COLOR TABLE, 156, 335           R16 SNORM, 198, 200
PROXY POST CONVOLUTION -                  R16F, 198, 200, 221
          COLOR TABLE, 156, 335           R16I, 198, 201, 221
PROXY TEXTURE 1D, 196, 207, 237,          R16UI, 198, 201, 221
          335, 342                        R32F, 198, 201, 221
PROXY TEXTURE 1D ARRAY, 196,              R32I, 198, 201, 221
          206, 237, 335, 342              R32UI, 198, 201, 221
PROXY TEXTURE 2D, 196, 206, 237,          R3 G3 B2, 200
          335, 342                        R8, 198, 200, 221, 384
PROXY TEXTURE 2D ARRAY, 194,              R8 SNORM, 198, 200
          196, 237, 335, 342              R8I, 198, 201, 221
PROXY TEXTURE 3D, 194, 237, 335,          R8UI, 198, 201, 221
          342                             RASTERIZER DISCARD, 128
PROXY TEXTURE CUBE MAP, 196,              RasterPos, 108, 123, 317, 327, 425
          206, 237, 335, 342              RasterPos*, 99, 437
PROXY TEXTURE RECTANGLE,                  RasterPos2, 123
          196, 206, 215, 217, 237, 342    RasterPos3, 123
PushAttrib, 362, 363, 365, 440            RasterPos4, 123
PushClientAttrib, 26, 334, 362, 363,      READ BUFFER, 290, 315, 319, 391
          365, 440                        READ FRAMEBUFFER, 286, 301,
PushMatrix, 60, 437                                303, 307, 308, 316, 360, 390
PushName, 326, 439                        READ FRAMEBUFFER BINDING,
                                                   158, 162, 214, 289–291, 295,
Q, 62, 63, 341                                     299, 303, 390
QUAD STRIP, 24, 25, 116, 256, 438         READ ONLY, 43, 48, 49




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                        486


READ WRITE, 43, 45, 48, 49, 374                   362, 394
ReadBuffer, 278, 290, 300                 RENDERBUFFER WIDTH, 305, 362,
ReadPixels, 118, 151, 152, 154, 170,              394
         183, 209, 287–293, 295, 297,     RenderbufferStorage, 306, 316, 335
         317, 334, 345–347, 438           RenderbufferStorageMultisample, 305,
Rect, 54, 145                                     306, 335, 450
Rect*, 437                                RENDERER, 350, 414
RED, 154, 157, 168, 196, 200, 201, 203,   RenderMode, 327–330, 334, 439
         222, 223, 242, 243, 246, 291,    REPEAT, 222, 223, 228, 236
         295, 313, 345, 384, 392, 396,    REPLACE, 241, 242, 244, 266
         397, 399, 418                    REPLICATE BORDER, 184, 186
RED BIAS, 181                             RESCALE NORMAL, 61, 375, 437
RED BITS, 318, 439                        ResetHistogram, 349
RED INTEGER, 168                          ResetMinmax, 350
RED SCALE, 180                            RETURN, 286
REDUCE, 184, 185, 187, 398                RG, 157, 168, 196, 200, 201, 203, 242,
REFLECTION MAP, 62, 63                            243, 291, 295, 313, 345, 442
RENDER, 327, 328, 419                     RG16, 198, 200, 221
RENDER MODE, 419                          RG16 SNORM, 198, 200
RENDERBUFFER, 304, 305, 307, 318,         RG16F, 198, 200, 221
         360–362, 393                     RG16I, 198, 201, 221
RENDERBUFFER ALPHA SIZE,                  RG16UI, 198, 201, 221
         362, 394                         RG32F, 198, 201, 221
RENDERBUFFER BINDING,              304,   RG32I, 198, 201, 221
         393                              RG32UI, 198, 201, 221
RENDERBUFFER BLUE SIZE, 362,              RG8, 198, 200, 221
         394                              RG8 SNORM, 198, 200
RENDERBUFFER DEPTH SIZE,                  RG8I, 198, 201, 221
         362, 394                         RG8UI, 198, 201, 221
RENDERBUFFER GREEN SIZE,                  RG INTEGER, 168
         362, 394                         RGB, 168, 171, 176, 183, 184, 195, 196,
RENDERBUFFER HEIGHT, 305, 362,                    199–201, 203, 241–243, 272,
         394                                      291, 292, 295, 313, 345
RENDERBUFFER INTERNAL FOR-                RGB10, 200
         MAT, 305, 362, 394               RGB10 A2, 198, 200
RENDERBUFFER RED SIZE, 362,               RGB12, 200
         394                              RGB16, 198, 200
RENDERBUFFER SAMPLES, 305,                RGB16 SNORM, 198, 200
         306, 315, 317, 362, 394          RGB16F, 198, 200
RENDERBUFFER STENCIL SIZE,                RGB16I, 198, 201




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                     487


RGB16UI, 198, 201                        SAMPLE ALPHA TO COVERAGE,
RGB32F, 198, 201                                 263, 381
RGB32I, 198, 201                         SAMPLE ALPHA TO ONE, 263, 264,
RGB32UI, 198, 201                                381
RGB4, 200                                SAMPLE BUFFERS, 130, 137, 144,
RGB5, 200                                        150, 189, 192, 263, 268, 275,
RGB5 A1, 200                                     276, 282, 289, 295, 299, 317,
RGB8, 198, 200                                   418
RGB8 SNORM, 198, 200                     SAMPLE COVERAGE, 263, 264, 381
RGB8I, 198, 201                          SAMPLE COVERAGE INVERT, 263,
RGB8UI, 198, 201                                 264, 381
RGB9 E5, 157, 198, 201, 248, 293         SAMPLE COVERAGE VALUE, 263,
RGB INTEGER, 168                                 264, 381
RGB SCALE, 241, 386                      SampleCoverage, 264
RGBA, 158, 159, 162, 164, 168, 171,      sampler1D, 91
         176, 183, 184, 195, 196, 200,   sampler1DArray, 91
         201, 203, 242, 243, 291, 295,   sampler1DArrayShadow, 91
         313, 345, 394, 397–400, 438     sampler1DShadow, 91, 106, 255
RGBA12, 200                              sampler2D, 91, 99
RGBA16, 198, 200, 221                    sampler2DArray, 91
RGBA16 SNORM, 198, 200                   sampler2DArrayShadow, 91
RGBA16F, 198, 201, 221                   sampler2DRect, 91
RGBA16I, 198, 201, 221                   sampler2DRectShadow, 91, 106, 255
RGBA16UI, 198, 201, 221                  sampler2DShadow, 91, 106, 255
RGBA2, 200                               sampler3D, 91
RGBA32F, 198, 201, 221                   SAMPLER 1D, 91
RGBA32I, 198, 201, 221                   SAMPLER 1D ARRAY, 91
RGBA32UI, 198, 201, 221                  SAMPLER 1D ARRAY SHADOW,
RGBA4, 200                                       91
RGBA8, 198, 200, 221                     SAMPLER 1D SHADOW, 91
RGBA8 SNORM, 198, 200                    SAMPLER 2D, 91
RGBA8I, 198, 201, 221                    SAMPLER 2D ARRAY, 91
RGBA8UI, 198, 201, 221                   SAMPLER 2D ARRAY SHADOW,
RGBA INTEGER, 168                                91
RGBA MODE, 418                           SAMPLER 2D RECT, 91
RIGHT, 269, 277, 278, 280, 281, 284,     SAMPLER 2D RECT SHADOW, 91
         290                             SAMPLER 2D SHADOW, 91
Rotate, 57, 425, 437                     SAMPLER 3D, 91
                                         SAMPLER CUBE, 91
S, 62, 63, 341                           SAMPLER CUBE SHADOW, 91




            OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                   488


samplerCube, 91                           SHADE MODEL, 376
samplerCubeShadow, 91                     ShadeModel, 76, 437
SAMPLES, 130, 131, 268, 299, 317,         SHADER SOURCE LENGTH, 355,
          418                                     358, 402
SAMPLES PASSED, 114, 115, 268,            SHADER TYPE, 109, 355, 402
          352                             ShaderSource, 78, 335, 358
Scale, 57, 58, 425, 437                   SHADING LANGUAGE VERSION,
Scissor, 263                                      350, 414
SCISSOR BIT, 364                          SHININESS, 72, 377
SCISSOR BOX, 387                          SHORT, 31, 167, 293, 294, 333
SCISSOR TEST, 263, 387                    SIGNED NORMALIZED, 343, 360
SECONDARY COLOR ARRAY, 33,                SINGLE COLOR, 67, 68, 377
          41, 370                         SLUMINANCE, 202, 247
SECONDARY COLOR ARRAY -                   SLUMINANCE8, 247
          BUFFER BINDING, 372             SLUMINANCE8 ALPHA8, 202, 246
SECONDARY COLOR ARRAY -                   SLUMINANCE ALPHA, 246
          POINTER, 350, 370               SMOOTH, 76, 376
SECONDARY COLOR ARRAY -                   SMOOTH LINE WIDTH GRANU-
          SIZE, 370                               LARITY
SECONDARY COLOR ARRAY -                           (v1.1: LINE WIDTH GRAN-
          STRIDE, 370                             ULARITY), 413
SECONDARY COLOR ARRAY -                   SMOOTH LINE WIDTH RANGE
          TYPE, 370                               (v1.1:        LINE WIDTH -
SecondaryColor, 26, 28                            RANGE), 413
SecondaryColor3, 28                       SPECULAR, 71, 72, 377, 378
SecondaryColor3*, 436                     SPHERE MAP, 62–64
SecondaryColor3[type]v, 34                SPOT CUTOFF, 72, 378
SecondaryColorPointer, 26, 31, 32, 334,   SPOT DIRECTION, 72, 341, 378
          436                             SPOT EXPONENT, 72, 378
SELECT, 327, 328, 426                     SRC0 ALPHA, 386
SelectBuffer, 327, 328, 334, 350, 439     SRC0 RGB, 386
SELECTION BUFFER POINTER,                 SRC1 ALPHA, 386
          350, 419                        SRC1 RGB, 386
SELECTION BUFFER SIZE, 419                SRC2 ALPHA, 386
SEPARABLE 2D, 161, 183, 206, 348,         SRC2 RGB, 386
          398                             SRC ALPHA, 243, 245, 272, 386
SeparableFilter2D, 152, 161               SRC ALPHA SATURATE, 272
SEPARATE ATTRIBS, 101, 117, 356           SRC COLOR, 243, 245, 272, 386
SEPARATE SPECULAR COLOR, 68               SRCn ALPHA, 241, 245, 249
SET, 275                                  SRCn RGB, 241, 245, 249




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                    489


SRGB, 246, 270, 273, 361                 STENCIL PASS DEPTH PASS, 387
SRGB8, 198, 200, 246                     STENCIL REF, 387
SRGB8 ALPHA8, 198, 200, 246              STENCIL TEST, 265, 387
SRGB ALPHA, 246                          STENCIL VALUE MASK, 387
STACK OVERFLOW, 19, 60, 327, 363         STENCIL WRITEMASK, 389
STACK UNDERFLOW, 19, 60, 327,            StencilFunc, 265–267, 424
         363                             StencilFuncSeparate, 265, 266
STATIC COPY, 43, 45                      StencilMask, 282, 287, 424
STATIC DRAW, 43, 44, 374                 StencilMaskSeparate, 282, 287
STATIC READ, 43, 45                      StencilOp, 265, 266
std140, 87, 96                           StencilOpSeparate, 265, 266
STENCIL, 284, 285, 295, 360, 384,        STEREO, 418
         392, 443                        STREAM COPY, 43, 44
STENCIL ATTACHMENT, 302, 308,            STREAM DRAW, 43, 44
         314, 444                        STREAM READ, 43, 44
STENCIL ATTACMENT, 443, 444              SUBPIXEL BITS, 411
STENCIL BACK FAIL, 387                   SUBTRACT, 244
STENCIL BACK FUNC, 387
STENCIL BACK PASS DEPTH -                T, 62, 341
         FAIL, 387                       T2F C3F V3F, 39, 40
STENCIL BACK PASS DEPTH -                T2F C4F N3F V3F, 39, 40
         PASS, 387                       T2F C4UB V3F, 39, 40
STENCIL BACK REF, 387                    T2F N3F V3F, 39, 40
STENCIL BACK VALUE MASK, 387             T2F V3F, 39, 40
STENCIL BACK WRITEMASK, 389              T4F C4F N3F V4F, 39, 40
STENCIL BITS, 297, 318, 418, 439         T4F V4F, 39, 40
STENCIL BUFFER, 444                      TABLE TOO LARGE, 19, 157, 163
STENCIL BUFFER BIT, 282, 285,            TexBuffer, 219, 334
         297–299, 364                    TexCoord, 26, 27
STENCIL CLEAR VALUE, 389                 TexCoord*, 436
STENCIL FAIL, 387                        TexCoord1, 27
STENCIL FUNC, 387                        TexCoord2, 27
STENCIL INDEX, 156, 159, 165, 168,       TexCoord3, 27
         178, 180, 194, 287, 289, 291,   TexCoord4, 27
         295, 297, 306, 313, 345         TexCoordPointer, 26, 31–33, 41, 334,
STENCIL INDEX1, 306                               436
STENCIL INDEX16, 306                     TexEnv, 60, 194, 240, 249, 439
STENCIL INDEX4, 306                      TexEnv*, 133
STENCIL INDEX8, 306                      TexGen, 60, 62, 63, 340
STENCIL PASS DEPTH FAIL, 387             TexGen*, 437




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                  490


TexImage, 194, 211                      TEXTURE 1D, 196, 207, 210, 220,
TexImage*, 432, 438, 439, 449                 232, 237, 238, 248, 309, 342,
TexImage*D, 151, 152                          344, 439
TexImage1D, 152, 183, 185, 202, 207,    TEXTURE 1D ARRAY, 196, 206, 209,
        208, 210, 211, 214, 216, 231,         211, 220, 232, 237, 238, 342,
        237, 335                              344, 382, 439
TexImage2D, 152, 183, 185, 202, 205–    TEXTURE 2D, 99, 194, 196, 206, 209,
        209, 211, 214, 216, 231, 237,         211, 220, 232, 237, 238, 248,
        335                                   309, 342, 344, 439
TexImage3D, 152, 194, 195, 202, 204,    TEXTURE 2D ARRAY, 194, 196, 204,
        206, 208, 211, 214, 216, 231,         211, 216, 218, 220, 232, 237,
        237, 335, 345                         238, 342, 344, 382, 439
TexParameter, 194, 220, 432, 439        TEXTURE 3D, 194, 204, 211, 220,
TexParameter*, 439                            232, 237, 238, 248, 309, 342,
TexParameter[if], 225, 231                    344, 439
TexParameterf, 240                      TEXTURE ALPHA SIZE, 343
TexParameterfv, 240                     TEXTURE ALPHA TYPE, 343
TexParameterI, 220                      TEXTURE BASE LEVEL, 205, 220,
TexParameteri, 220, 240                       222, 223, 230, 231, 236, 311,
TexParameterIiv, 220                          312, 383
TexParameterIuiv, 220                   TEXTURE BINDING xD, 382
TexParameteriv, 220, 240                TEXTURE BINDING 1D ARRAY,
TexSubImage, 211                              382
TexSubImage*, 214, 218, 432             TEXTURE BINDING 2D ARRAY,
TexSubImage*D, 152                            382
TexSubImage1D, 152, 183, 210, 211,      TEXTURE BINDING BUFFER, 382
        213, 216                        TEXTURE BINDING CUBE MAP,
TexSubImage2D, 152, 183, 210–213,             382
        216                             TEXTURE BINDING RECTANGLE,
TexSubImage3D, 152, 210, 211, 213,            382
        216                             TEXTURE BIT, 363, 364
TEXTURE, 56, 59, 60, 243, 245, 309,     TEXTURE BLUE SIZE, 343
        314, 318, 360, 361, 386         TEXTURE BLUE TYPE, 343
TEXTUREi, 27, 194                       TEXTURE BORDER, 216, 217, 343,
TEXTURE0, 27, 34, 41, 194, 322, 329,          384
        363, 373, 385                   TEXTURE BORDER COLOR,
TEXTURE1, 363                                 220, 222, 228, 236, 342, 383,
TEXTURE x SIZE, 384                           445
TEXTURE x TYPE, 384                     TEXTURE BUFFER, 43, 219, 220,
TEXTURE xD, 382                               238, 343, 382, 419




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                               491


TEXTURE BUFFER DATA STORE -                 309, 342, 344, 382
      BINDING, 384                    TEXTURE CUBE MAP POS-
TEXTURE COMPARE FAIL -                      ITIVE X, 206, 209, 211, 224,
      VALUE ARB, 458                        309, 342, 344, 382
TEXTURE COMPARE FUNC, 222,            TEXTURE CUBE MAP POS-
      237, 243, 246, 383                    ITIVE Y, 206, 209, 211, 224,
TEXTURE COMPARE MODE,                       309, 342, 344, 382
      106, 222, 237, 243, 246, 255,   TEXTURE CUBE MAP POS-
      383                                   ITIVE Z, 206, 209, 211, 224,
TEXTURE COMPONENTS, 343, 438                309, 342, 344, 382
TEXTURE COMPRESSED, 384               TEXTURE DEPTH, 215, 217, 218,
TEXTURE COMPRESSED -                        343, 384
      IMAGE SIZE, 216, 217, 343,      TEXTURE DEPTH SIZE, 343
      346, 384                        TEXTURE DEPTH TYPE, 343
TEXTURE COMPRESSION HINT,             TEXTURE ENV, 240, 241, 341, 439
      337, 410                        TEXTURE ENV COLOR, 241, 385
TEXTURE COORD ARRAY, 33, 41,          TEXTURE ENV MODE, 241, 249,
      370                                   385
TEXTURE COORD ARRAY -                 TEXTURE FILTER CONTROL, 240,
      BUFFER BINDING, 372                   341, 439
TEXTURE COORD ARRAY -                 TEXTURE GEN x, 385
      POINTER, 350, 370               TEXTURE GEN *, 437
TEXTURE COORD ARRAY SIZE,             TEXTURE GEN MODE, 62–64, 385
      370                             TEXTURE GEN Q, 64
TEXTURE COORD ARRAY -                 TEXTURE GEN R, 64
      STRIDE, 370                     TEXTURE GEN S, 64
TEXTURE COORD ARRAY TYPE,             TEXTURE GEN T, 64
      370                             TEXTURE GREEN SIZE, 343
TEXTURE CUBE MAP, 196, 206,           TEXTURE GREEN TYPE, 343
      220, 232, 238, 248, 342, 343,   TEXTURE HEIGHT, 213, 215, 217,
      382, 439                              218, 343, 384
TEXTURE CUBE MAP *, 206               TEXTURE INTENSITY SIZE, 343
TEXTURE CUBE MAP NEG-                 TEXTURE INTENSITY TYPE, 343
      ATIVE X, 206, 209, 211, 224,    TEXTURE INTERNAL FORMAT,
      309, 342, 344, 382                    216, 217, 343, 438
TEXTURE CUBE MAP NEG-                 TEXTURE INTERNAL FORMAT
      ATIVE Y, 206, 209, 211, 224,          (TEXTURE COMPONENTS),
      309, 342, 344, 382                    384
TEXTURE CUBE MAP NEG-                 TEXTURE LOD BIAS, 222, 224, 240,
      ATIVE Z, 206, 209, 211, 224,          383, 385, 439




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                   492


TEXTURE LUMINANCE SIZE, 343         TRANSFORM FEEDBACK -
TEXTURE LUMINANCE TYPE, 343                  BUFFER, 43, 116, 118
TEXTURE MAG FILTER, 222, 233, TRANSFORM FEEDBACK -
      234, 236, 246, 383                     BUFFER BINDING, 354, 409
TEXTURE MATRIX                      TRANSFORM FEEDBACK -
      (TRANSPOSE TEXTURE MATRIX), BUFFER MODE, 356, 404
      375                           TRANSFORM FEEDBACK -
TEXTURE MAX LEVEL, 220, 222,                 BUFFER SIZE, 354, 409
      231, 236, 312, 383            TRANSFORM FEEDBACK -
TEXTURE MAX LOD, 220, 222, 225,              BUFFER START, 354, 409
      236, 383                      TRANSFORM FEEDBACK PRIM-
TEXTURE MIN FILTER, 222, 223,                ITIVES WRITTEN, 117, 118,
      227, 228, 230, 233–236, 246,           352
      311, 312, 383                 TRANSFORM FEEDBACK VARY-
TEXTURE MIN LOD, 220, 222, 225,              ING MAX LENGTH,            102,
      236, 383                               356, 404
TEXTURE PRIORITY, 220, 222, 236, TRANSFORM FEED-
      240, 383, 439                          BACK VARYINGS, 102, 356,
TEXTURE RECTANGLE, 196, 206,                 404
      207, 209, 211, 215–217, 220, TransformFeedbackVaryings, 101, 102,
      223, 237, 238, 309, 342, 344,          117, 334
      345, 382                      Translate, 57, 58, 425, 437
TEXTURE RECTANGLE ARB, 460          TRANSPOSE COLOR MATRIX, 340,
TEXTURE RED SIZE, 343                        347
TEXTURE RED TYPE, 343               TRANSPOSE MODELVIEW MA-
TEXTURE RESIDENT, 237, 239, 342,             TRIX, 340
      383                           TRANSPOSE PROJECTION MA-
TEXTURE SHARED SIZE, 343, 384                TRIX, 340
TEXTURE STACK DEPTH, 375            TRANSPOSE TEXTURE MATRIX,
TEXTURE STENCIL SIZE, 343                    340
TEXTURE WIDTH, 213, 215, 217, TRIANGLE FAN, 23, 25, 116
      218, 343, 384                 TRIANGLE STRIP, 23, 25, 116
TEXTURE WRAP R, 222, 223, 227, TRIANGLES, 24, 25, 115–117
      228, 383, 438                 TRUE, 25, 31, 43, 48, 50, 67, 69, 75,
TEXTURE WRAP S, 222, 223, 227,               78, 80, 94, 108, 121, 133, 136,
      228, 383, 438                          152, 154, 163, 164, 179, 222,
TEXTURE WRAP T, 222, 223, 227,               223, 233, 239, 256, 264, 281,
      228, 383, 438                          289, 292, 334, 339, 346, 349,
TEXTUREn, 245, 249                           352, 353, 355, 356, 358, 359,
TRANSFORM BIT, 364                           362, 368, 376, 381, 388, 389,




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                493


        437                          UNIFORM BUFFER, 43, 98
                                     UNIFORM BUFFER BINDING, 354,
uint, 95                                     405
Uniform, 14, 93                      UNIFORM BUFFER OFFSET -
Uniform*, 85, 94, 100                        ALIGNMENT, 98, 416
Uniform*f{v}, 93                     UNIFORM BUFFER SIZE, 354
Uniform*i{v}, 93                     UNIFORM BUFFER START, 354
Uniform*ui{v}, 93                    UNIFORM IS ROW MAJOR, 92, 406
Uniform1f, 15                        UNIFORM MATRIX STRIDE, 92, 96,
Uniform1i, 15                                406
Uniform1i{v}, 93, 99                 UNIFORM NAME LENGTH, 92, 405
Uniform1iv, 94                       UNIFORM OFFSET, 92, 405
Uniform2{if ui}*, 94                 UNIFORM SIZE, 92, 405
Uniform2f, 15                        UNIFORM TYPE, 90, 92, 405
Uniform2i, 15                        Uniform{1,2,3,4}ui, 93
Uniform3f, 15                        Uniform{1,2,3,4}uiv, 93
Uniform3i, 15                        UniformBlockBinding, 98, 99
Uniform4f, 13, 15                    UniformMatrix2x4fv, 93
Uniform4f{v}, 94                     UniformMatrix3fv, 94
Uniform4i, 15                        UniformMatrix{234}fv, 93
Uniform4i{v}, 94                     UniformMatrix{2x3,3x2,2x4,4x2,3x4,4x3}fv,
UNIFORM ARRAY STRIDE, 92, 96,                93
         406                         UnmapBuffer, 47, 49, 50, 85, 334, 432
UNIFORM BLOCK ACTIVE UNI-            UNPACK ALIGNMENT, 152, 169,
         FORM INDICES, 88, 406               195, 395
UNIFORM BLOCK ACTIVE UNI-            UNPACK IMAGE HEIGHT, 152, 195,
         FORMS, 88, 406                      395
UNIFORM BLOCK BINDING,         87,   UNPACK LSB FIRST, 152, 178, 395
         406                         UNPACK ROW LENGTH, 152, 169,
UNIFORM BLOCK DATA SIZE, 87,                 195, 395
         99, 406                     UNPACK SKIP IMAGES, 152, 195,
UNIFORM BLOCK INDEX, 92, 405                 206, 395
UNIFORM BLOCK NAME -                 UNPACK SKIP PIXELS, 152, 169,
         LENGTH, 87                          178, 395
UNIFORM BLOCK REFERENCED -           UNPACK SKIP ROWS, 152, 169, 178,
         BY FRAGMENT SHADER,                 395
         88, 406                     UNPACK SWAP BYTES, 152, 169,
UNIFORM BLOCK REFERENCED -                   395
         BY VERTEX SHADER, 88,       unsigned int, 91
         406                         UNSIGNED BYTE, 31, 37, 40, 167,




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                 494


      293, 294, 333, 428               UNSIGNED SHORT 4 4 4 4,        167,
UNSIGNED BYTE 2 3 3 REV, 167,                   171, 173, 294
      171, 172, 294                    UNSIGNED SHORT 4 4 4 4 REV,
UNSIGNED BYTE 3 3 2, 167, 171,                  167, 171, 173, 294
      172, 294                         UNSIGNED SHORT 5 5 5 1,        167,
UNSIGNED INT, 31, 37, 82, 91, 167,              171, 173, 294
      293, 294, 333, 341, 343, 360     UNSIGNED SHORT 5 6 5, 167, 171,
UNSIGNED INT 10 10 10 2,        167,            173, 294
      171, 174, 294                    UNSIGNED SHORT 5 6 5 REV, 167,
UNSIGNED INT 10F 11F 11F REV,                   171, 173, 294
      167, 171, 174, 176, 196, 292,    UPPER LEFT, 133, 136, 137, 379
      294                              usampler1D, 91
UNSIGNED INT 24 8, 165, 167, 171,      usampler1DArray, 91
      174, 289, 293, 294               usampler2D, 91
UNSIGNED INT 2 10 10 10 REV,           usampler2DArray, 91
      167, 171, 174, 294               usampler3D, 91
UNSIGNED INT 5 9 9 9 REV,              usamplerCube, 91
      167, 171, 174, 176, 196, 199,    UseProgram, 80, 102, 118
      292–294                          uvec2, 91
UNSIGNED INT 8 8 8 8, 167, 171,        uvec3, 91
      174, 294                         uvec4, 91
UNSIGNED INT 8 8 8 8 REV, 167,
      171, 174, 294                    V2F, 39, 40
UNSIGNED INT SAMPLER 1D, 91            V3F, 39, 40
UNSIGNED INT SAMPLER 1D AR-            VALIDATE STATUS, 108, 356, 403
      RAY, 91                          ValidateProgram, 108, 335, 356
UNSIGNED INT SAMPLER 2D, 91            vec2, 81, 91
UNSIGNED INT SAMPLER 2D AR-            vec3, 81, 91
      RAY, 91                          vec4, 81, 91, 94
UNSIGNED INT SAMPLER 3D, 91            VENDOR, 350, 414
UNSIGNED INT SAMPLER CUBE,             VERSION, 350, 351, 414
      91                               Vertex, 26, 81, 123, 323
UNSIGNED INT VEC2, 82, 91              Vertex*, 436
UNSIGNED INT VEC3, 82, 91              Vertex2, 26, 29, 54
UNSIGNED INT VEC4, 82, 91              Vertex3, 26, 29
UNSIGNED NORMALIZED, 343, 360          Vertex4, 26, 29
UNSIGNED SHORT, 31, 37, 167, 293,      Vertex[size][type]v, 35
      294, 333, 341                    VERTEX ARRAY, 33, 41, 369
UNSIGNED SHORT 1 5 5 5 REV,            VERTEX ARRAY BINDING,          340,
      167, 171, 173, 294                        358, 373




          OpenGL 3.1 with GL ARB compatibility - May 28, 2009
INDEX                                                                         495


VERTEX ARRAY BUFFER BIND-                 VertexAttribI, 29
        ING, 372                          VertexAttribI4, 29
VERTEX ARRAY POINTER,              350,   VertexAttribI[size][type]v, 34
        369                               VertexAttribIPointer, 31–33, 334, 358
VERTEX ARRAY SIZE, 369                    VertexAttribPointer, 26, 31, 32, 51, 53,
VERTEX ARRAY STRIDE, 369                          334, 358, 437
VERTEX ARRAY TYPE, 369                    VertexPointer, 26, 30, 32, 41, 334, 436
VERTEX ATTRIB ARRAY -                     VIEWPORT, 375
        BUFFER BINDING, 51, 358,          Viewport, 111
        372                               VIEWPORT BIT, 364
VERTEX ATTRIB ARRAY EN-
        ABLED, 358, 371                   WGL ARB create context, 463
VERTEX ATTRIB ARRAY INTE-                 WGL ARB framebuffer sRGB, 462
        GER, 358, 371                     WGL ARB pixel format float, 460
VERTEX ATTRIB ARRAY NOR-                  WindowPos, 125, 327
        MALIZED, 358, 371                 WindowPos*, 437
VERTEX ATTRIB ARRAY -                     WindowPos2, 125
        POINTER, 359, 371                 WindowPos3, 125
VERTEX ATTRIB ARRAY SIZE,                 WRITE ONLY, 43, 48, 49
        358, 371
                                          XOR, 275
VERTEX ATTRIB ARRAY STRIDE,
        358, 371                          ZERO, 266, 271, 272, 388
VERTEX ATTRIB ARRAY TYPE,                 ZOOM X, 400
        358, 371                          ZOOM Y, 400
VERTEX PROGRAM POINT SIZE,
        132, 407
VERTEX PROGRAM TWO SIDE,
        69, 70, 407, 437
VERTEX SHADER, 78, 355
VertexAttrib, 26, 28, 114
VertexAttrib*, 29, 30, 81, 436
VertexAttrib1*, 29
VertexAttrib2*, 29
VertexAttrib3*, 29
VertexAttrib4, 29
VertexAttrib4*, 29
VertexAttrib4N, 29
VertexAttrib4Nub, 29
VertexAttrib[size][type]v, 34, 35
VertexAttrib[size]N[type]v, 34, 35




           OpenGL 3.1 with GL ARB compatibility - May 28, 2009
